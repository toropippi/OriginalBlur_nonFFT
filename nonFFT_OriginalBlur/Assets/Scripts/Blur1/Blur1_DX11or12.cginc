
groupshared uint block4[4 * TPB];
groupshared uint block6[6 * TPB];
groupshared uint block8[8 * TPB];
groupshared uint block10[10 * TPB];
groupshared uint block12[12 * TPB];
groupshared uint block14[14 * TPB];
groupshared uint block16[16 * TPB];
groupshared uint block18[18 * TPB];
groupshared uint block20[20 * TPB];
groupshared uint block22[22 * TPB];
groupshared uint block24[24 * TPB];
groupshared uint block26[26 * TPB];
groupshared uint block28[28 * TPB];
groupshared uint block30[30 * TPB];
groupshared uint block32[32 * TPB];
groupshared uint block34[34 * TPB];
groupshared uint block36[36 * TPB];
groupshared uint block38[38 * TPB];
groupshared uint block40[40 * TPB];
groupshared uint block42[42 * TPB];
groupshared uint block44[44 * TPB];
groupshared uint block46[46 * TPB];
groupshared uint block48[48 * TPB];
groupshared uint block50[50 * TPB];
groupshared uint block52[52 * TPB];
groupshared uint block54[54 * TPB];
groupshared uint block56[56 * TPB];



#ifdef STORE_TEX
#define STORE(n,i, NPT) f4.w = 1;f4.x = (i % 256);f4.y = (i / 256 % 256);f4.z = (i / 65536 % 256);f4.xyz /= FTOI;Tex[float2(id.x + n * TPB, id.y)] = f4;
#define LOAD(n,i,NPT) f4 = Tex_ro[float2(id.y, n * TPB + id.x)];i = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
#else
#define STORE(n, i, NPT) Buf[(n * TPB + id.x) + id.y * (uint)WX] = i;
#define LOAD(n,i,NPT) i = Buf_ro[id.y + (n * TPB + id.x) * (uint)WX];
#endif



[numthreads(TPB, 1, 1)] 
void XBlur4(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block4[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block4[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block4[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block4[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block4[id.x * 4 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block4[id.x * 4 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block4[id.x * 4 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block4[id.x * 4 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr3;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg3;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb3;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr3 = celr3 * W + regr[(4 & 1) ^ 1];
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg3 = celg3 * W + regg[(4 & 1) ^ 1];
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb3 = celb3 * W + regb[(4 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block4[id.x * 4 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block4[id.x * 4 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block4[id.x * 4 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block4[id.x * 4 + 3] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block4[0 * TPB + id.x];
	STORE(0, i, 4);
	i = block4[1 * TPB + id.x];
	STORE(1, i, 4);
	i = block4[2 * TPB + id.x];
	STORE(2, i, 4);
	i = block4[3 * TPB + id.x];
	STORE(3, i, 4);;
}


[numthreads(TPB, 1, 1)] 
void XBlur6(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block6[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block6[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block6[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block6[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block6[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block6[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block6[id.x * 6 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block6[id.x * 6 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block6[id.x * 6 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block6[id.x * 6 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block6[id.x * 6 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block6[id.x * 6 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr5;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg5;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb5;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr5 = celr5 * W + regr[(6 & 1) ^ 1];
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg5 = celg5 * W + regg[(6 & 1) ^ 1];
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb5 = celb5 * W + regb[(6 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block6[id.x * 6 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block6[id.x * 6 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block6[id.x * 6 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block6[id.x * 6 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block6[id.x * 6 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block6[id.x * 6 + 5] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block6[0 * TPB + id.x];
	STORE(0, i, 6);
	i = block6[1 * TPB + id.x];
	STORE(1, i, 6);
	i = block6[2 * TPB + id.x];
	STORE(2, i, 6);
	i = block6[3 * TPB + id.x];
	STORE(3, i, 6);
	i = block6[4 * TPB + id.x];
	STORE(4, i, 6);
	i = block6[5 * TPB + id.x];
	STORE(5, i, 6);;
}

[numthreads(TPB, 1, 1)] void XBlur8(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block8[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block8[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block8[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block8[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block8[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block8[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block8[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block8[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block8[id.x * 8 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block8[id.x * 8 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block8[id.x * 8 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block8[id.x * 8 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block8[id.x * 8 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block8[id.x * 8 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block8[id.x * 8 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block8[id.x * 8 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr7;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg7;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb7;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr7 = celr7 * W + regr[(8 & 1) ^ 1];
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg7 = celg7 * W + regg[(8 & 1) ^ 1];
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb7 = celb7 * W + regb[(8 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block8[id.x * 8 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block8[id.x * 8 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block8[id.x * 8 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block8[id.x * 8 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block8[id.x * 8 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block8[id.x * 8 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block8[id.x * 8 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block8[id.x * 8 + 7] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block8[0 * TPB + id.x];
	STORE(0, i, 8);
	i = block8[1 * TPB + id.x];
	STORE(1, i, 8);
	i = block8[2 * TPB + id.x];
	STORE(2, i, 8);
	i = block8[3 * TPB + id.x];
	STORE(3, i, 8);
	i = block8[4 * TPB + id.x];
	STORE(4, i, 8);
	i = block8[5 * TPB + id.x];
	STORE(5, i, 8);
	i = block8[6 * TPB + id.x];
	STORE(6, i, 8);
	i = block8[7 * TPB + id.x];
	STORE(7, i, 8);;
} 
[numthreads(TPB, 1, 1)] void XBlur10(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block10[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block10[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block10[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block10[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block10[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block10[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block10[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block10[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block10[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block10[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block10[id.x * 10 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block10[id.x * 10 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block10[id.x * 10 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block10[id.x * 10 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block10[id.x * 10 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block10[id.x * 10 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block10[id.x * 10 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block10[id.x * 10 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block10[id.x * 10 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block10[id.x * 10 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr9;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg9;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb9;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr9 = celr9 * W + regr[(10 & 1) ^ 1];
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg9 = celg9 * W + regg[(10 & 1) ^ 1];
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb9 = celb9 * W + regb[(10 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block10[id.x * 10 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block10[id.x * 10 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block10[id.x * 10 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block10[id.x * 10 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block10[id.x * 10 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block10[id.x * 10 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block10[id.x * 10 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block10[id.x * 10 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block10[id.x * 10 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block10[id.x * 10 + 9] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block10[0 * TPB + id.x];
	STORE(0, i, 10);
	i = block10[1 * TPB + id.x];
	STORE(1, i, 10);
	i = block10[2 * TPB + id.x];
	STORE(2, i, 10);
	i = block10[3 * TPB + id.x];
	STORE(3, i, 10);
	i = block10[4 * TPB + id.x];
	STORE(4, i, 10);
	i = block10[5 * TPB + id.x];
	STORE(5, i, 10);
	i = block10[6 * TPB + id.x];
	STORE(6, i, 10);
	i = block10[7 * TPB + id.x];
	STORE(7, i, 10);
	i = block10[8 * TPB + id.x];
	STORE(8, i, 10);
	i = block10[9 * TPB + id.x];
	STORE(9, i, 10);;
} 
[numthreads(TPB, 1, 1)] void XBlur12(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block12[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block12[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block12[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block12[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block12[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block12[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block12[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block12[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block12[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block12[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block12[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block12[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block12[id.x * 12 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block12[id.x * 12 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block12[id.x * 12 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block12[id.x * 12 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block12[id.x * 12 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block12[id.x * 12 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block12[id.x * 12 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block12[id.x * 12 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block12[id.x * 12 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block12[id.x * 12 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block12[id.x * 12 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block12[id.x * 12 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr11;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg11;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb11;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr11 = celr11 * W + regr[(12 & 1) ^ 1];
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg11 = celg11 * W + regg[(12 & 1) ^ 1];
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb11 = celb11 * W + regb[(12 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block12[id.x * 12 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block12[id.x * 12 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block12[id.x * 12 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block12[id.x * 12 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block12[id.x * 12 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block12[id.x * 12 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block12[id.x * 12 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block12[id.x * 12 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block12[id.x * 12 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block12[id.x * 12 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block12[id.x * 12 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block12[id.x * 12 + 11] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block12[0 * TPB + id.x];
	STORE(0, i, 12);
	i = block12[1 * TPB + id.x];
	STORE(1, i, 12);
	i = block12[2 * TPB + id.x];
	STORE(2, i, 12);
	i = block12[3 * TPB + id.x];
	STORE(3, i, 12);
	i = block12[4 * TPB + id.x];
	STORE(4, i, 12);
	i = block12[5 * TPB + id.x];
	STORE(5, i, 12);
	i = block12[6 * TPB + id.x];
	STORE(6, i, 12);
	i = block12[7 * TPB + id.x];
	STORE(7, i, 12);
	i = block12[8 * TPB + id.x];
	STORE(8, i, 12);
	i = block12[9 * TPB + id.x];
	STORE(9, i, 12);
	i = block12[10 * TPB + id.x];
	STORE(10, i, 12);
	i = block12[11 * TPB + id.x];
	STORE(11, i, 12);;
} 
[numthreads(TPB, 1, 1)] void XBlur14(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block14[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block14[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block14[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block14[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block14[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block14[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block14[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block14[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block14[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block14[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block14[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block14[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block14[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block14[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block14[id.x * 14 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block14[id.x * 14 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block14[id.x * 14 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block14[id.x * 14 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block14[id.x * 14 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block14[id.x * 14 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block14[id.x * 14 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block14[id.x * 14 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block14[id.x * 14 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block14[id.x * 14 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block14[id.x * 14 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block14[id.x * 14 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block14[id.x * 14 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block14[id.x * 14 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr13;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg13;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb13;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr13 = celr13 * W + regr[(14 & 1) ^ 1];
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg13 = celg13 * W + regg[(14 & 1) ^ 1];
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb13 = celb13 * W + regb[(14 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block14[id.x * 14 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block14[id.x * 14 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block14[id.x * 14 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block14[id.x * 14 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block14[id.x * 14 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block14[id.x * 14 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block14[id.x * 14 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block14[id.x * 14 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block14[id.x * 14 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block14[id.x * 14 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block14[id.x * 14 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block14[id.x * 14 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block14[id.x * 14 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block14[id.x * 14 + 13] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block14[0 * TPB + id.x];
	STORE(0, i, 14);
	i = block14[1 * TPB + id.x];
	STORE(1, i, 14);
	i = block14[2 * TPB + id.x];
	STORE(2, i, 14);
	i = block14[3 * TPB + id.x];
	STORE(3, i, 14);
	i = block14[4 * TPB + id.x];
	STORE(4, i, 14);
	i = block14[5 * TPB + id.x];
	STORE(5, i, 14);
	i = block14[6 * TPB + id.x];
	STORE(6, i, 14);
	i = block14[7 * TPB + id.x];
	STORE(7, i, 14);
	i = block14[8 * TPB + id.x];
	STORE(8, i, 14);
	i = block14[9 * TPB + id.x];
	STORE(9, i, 14);
	i = block14[10 * TPB + id.x];
	STORE(10, i, 14);
	i = block14[11 * TPB + id.x];
	STORE(11, i, 14);
	i = block14[12 * TPB + id.x];
	STORE(12, i, 14);
	i = block14[13 * TPB + id.x];
	STORE(13, i, 14);;
} 
[numthreads(TPB, 1, 1)] void XBlur16(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block16[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block16[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block16[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block16[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block16[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block16[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block16[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block16[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block16[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block16[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block16[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block16[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block16[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block16[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block16[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block16[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block16[id.x * 16 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block16[id.x * 16 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block16[id.x * 16 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block16[id.x * 16 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block16[id.x * 16 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block16[id.x * 16 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block16[id.x * 16 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block16[id.x * 16 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block16[id.x * 16 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block16[id.x * 16 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block16[id.x * 16 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block16[id.x * 16 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block16[id.x * 16 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block16[id.x * 16 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block16[id.x * 16 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block16[id.x * 16 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr15;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg15;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb15;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr15 = celr15 * W + regr[(16 & 1) ^ 1];
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg15 = celg15 * W + regg[(16 & 1) ^ 1];
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb15 = celb15 * W + regb[(16 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block16[id.x * 16 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block16[id.x * 16 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block16[id.x * 16 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block16[id.x * 16 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block16[id.x * 16 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block16[id.x * 16 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block16[id.x * 16 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block16[id.x * 16 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block16[id.x * 16 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block16[id.x * 16 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block16[id.x * 16 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block16[id.x * 16 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block16[id.x * 16 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block16[id.x * 16 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block16[id.x * 16 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block16[id.x * 16 + 15] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block16[0 * TPB + id.x];
	STORE(0, i, 16);
	i = block16[1 * TPB + id.x];
	STORE(1, i, 16);
	i = block16[2 * TPB + id.x];
	STORE(2, i, 16);
	i = block16[3 * TPB + id.x];
	STORE(3, i, 16);
	i = block16[4 * TPB + id.x];
	STORE(4, i, 16);
	i = block16[5 * TPB + id.x];
	STORE(5, i, 16);
	i = block16[6 * TPB + id.x];
	STORE(6, i, 16);
	i = block16[7 * TPB + id.x];
	STORE(7, i, 16);
	i = block16[8 * TPB + id.x];
	STORE(8, i, 16);
	i = block16[9 * TPB + id.x];
	STORE(9, i, 16);
	i = block16[10 * TPB + id.x];
	STORE(10, i, 16);
	i = block16[11 * TPB + id.x];
	STORE(11, i, 16);
	i = block16[12 * TPB + id.x];
	STORE(12, i, 16);
	i = block16[13 * TPB + id.x];
	STORE(13, i, 16);
	i = block16[14 * TPB + id.x];
	STORE(14, i, 16);
	i = block16[15 * TPB + id.x];
	STORE(15, i, 16);;
} 
[numthreads(TPB, 1, 1)] void XBlur18(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block18[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block18[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block18[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block18[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block18[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block18[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block18[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block18[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block18[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block18[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block18[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block18[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block18[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block18[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block18[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block18[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block18[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block18[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block18[id.x * 18 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block18[id.x * 18 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block18[id.x * 18 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block18[id.x * 18 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block18[id.x * 18 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block18[id.x * 18 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block18[id.x * 18 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block18[id.x * 18 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block18[id.x * 18 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block18[id.x * 18 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block18[id.x * 18 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block18[id.x * 18 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block18[id.x * 18 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block18[id.x * 18 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block18[id.x * 18 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block18[id.x * 18 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block18[id.x * 18 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block18[id.x * 18 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr17;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg17;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb17;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr17 = celr17 * W + regr[(18 & 1) ^ 1];
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg17 = celg17 * W + regg[(18 & 1) ^ 1];
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb17 = celb17 * W + regb[(18 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block18[id.x * 18 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block18[id.x * 18 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block18[id.x * 18 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block18[id.x * 18 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block18[id.x * 18 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block18[id.x * 18 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block18[id.x * 18 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block18[id.x * 18 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block18[id.x * 18 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block18[id.x * 18 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block18[id.x * 18 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block18[id.x * 18 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block18[id.x * 18 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block18[id.x * 18 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block18[id.x * 18 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block18[id.x * 18 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block18[id.x * 18 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block18[id.x * 18 + 17] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block18[0 * TPB + id.x];
	STORE(0, i, 18);
	i = block18[1 * TPB + id.x];
	STORE(1, i, 18);
	i = block18[2 * TPB + id.x];
	STORE(2, i, 18);
	i = block18[3 * TPB + id.x];
	STORE(3, i, 18);
	i = block18[4 * TPB + id.x];
	STORE(4, i, 18);
	i = block18[5 * TPB + id.x];
	STORE(5, i, 18);
	i = block18[6 * TPB + id.x];
	STORE(6, i, 18);
	i = block18[7 * TPB + id.x];
	STORE(7, i, 18);
	i = block18[8 * TPB + id.x];
	STORE(8, i, 18);
	i = block18[9 * TPB + id.x];
	STORE(9, i, 18);
	i = block18[10 * TPB + id.x];
	STORE(10, i, 18);
	i = block18[11 * TPB + id.x];
	STORE(11, i, 18);
	i = block18[12 * TPB + id.x];
	STORE(12, i, 18);
	i = block18[13 * TPB + id.x];
	STORE(13, i, 18);
	i = block18[14 * TPB + id.x];
	STORE(14, i, 18);
	i = block18[15 * TPB + id.x];
	STORE(15, i, 18);
	i = block18[16 * TPB + id.x];
	STORE(16, i, 18);
	i = block18[17 * TPB + id.x];
	STORE(17, i, 18);;
} 
[numthreads(TPB, 1, 1)] void XBlur20(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block20[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block20[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block20[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block20[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block20[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block20[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block20[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block20[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block20[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block20[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block20[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block20[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block20[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block20[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block20[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block20[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block20[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block20[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block20[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block20[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block20[id.x * 20 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block20[id.x * 20 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block20[id.x * 20 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block20[id.x * 20 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block20[id.x * 20 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block20[id.x * 20 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block20[id.x * 20 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block20[id.x * 20 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block20[id.x * 20 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block20[id.x * 20 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block20[id.x * 20 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block20[id.x * 20 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block20[id.x * 20 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block20[id.x * 20 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block20[id.x * 20 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block20[id.x * 20 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block20[id.x * 20 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block20[id.x * 20 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block20[id.x * 20 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block20[id.x * 20 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr19;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg19;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb19;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr19 = celr19 * W + regr[(20 & 1) ^ 1];
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg19 = celg19 * W + regg[(20 & 1) ^ 1];
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb19 = celb19 * W + regb[(20 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block20[id.x * 20 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block20[id.x * 20 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block20[id.x * 20 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block20[id.x * 20 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block20[id.x * 20 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block20[id.x * 20 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block20[id.x * 20 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block20[id.x * 20 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block20[id.x * 20 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block20[id.x * 20 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block20[id.x * 20 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block20[id.x * 20 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block20[id.x * 20 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block20[id.x * 20 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block20[id.x * 20 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block20[id.x * 20 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block20[id.x * 20 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block20[id.x * 20 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block20[id.x * 20 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block20[id.x * 20 + 19] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block20[0 * TPB + id.x];
	STORE(0, i, 20);
	i = block20[1 * TPB + id.x];
	STORE(1, i, 20);
	i = block20[2 * TPB + id.x];
	STORE(2, i, 20);
	i = block20[3 * TPB + id.x];
	STORE(3, i, 20);
	i = block20[4 * TPB + id.x];
	STORE(4, i, 20);
	i = block20[5 * TPB + id.x];
	STORE(5, i, 20);
	i = block20[6 * TPB + id.x];
	STORE(6, i, 20);
	i = block20[7 * TPB + id.x];
	STORE(7, i, 20);
	i = block20[8 * TPB + id.x];
	STORE(8, i, 20);
	i = block20[9 * TPB + id.x];
	STORE(9, i, 20);
	i = block20[10 * TPB + id.x];
	STORE(10, i, 20);
	i = block20[11 * TPB + id.x];
	STORE(11, i, 20);
	i = block20[12 * TPB + id.x];
	STORE(12, i, 20);
	i = block20[13 * TPB + id.x];
	STORE(13, i, 20);
	i = block20[14 * TPB + id.x];
	STORE(14, i, 20);
	i = block20[15 * TPB + id.x];
	STORE(15, i, 20);
	i = block20[16 * TPB + id.x];
	STORE(16, i, 20);
	i = block20[17 * TPB + id.x];
	STORE(17, i, 20);
	i = block20[18 * TPB + id.x];
	STORE(18, i, 20);
	i = block20[19 * TPB + id.x];
	STORE(19, i, 20);;
} 
[numthreads(TPB, 1, 1)] void XBlur22(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block22[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block22[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block22[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block22[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block22[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block22[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block22[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block22[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block22[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block22[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block22[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block22[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block22[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block22[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block22[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block22[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block22[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block22[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block22[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block22[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block22[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block22[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block22[id.x * 22 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block22[id.x * 22 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block22[id.x * 22 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block22[id.x * 22 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block22[id.x * 22 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block22[id.x * 22 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block22[id.x * 22 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block22[id.x * 22 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block22[id.x * 22 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block22[id.x * 22 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block22[id.x * 22 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block22[id.x * 22 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block22[id.x * 22 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block22[id.x * 22 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block22[id.x * 22 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block22[id.x * 22 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block22[id.x * 22 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block22[id.x * 22 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block22[id.x * 22 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block22[id.x * 22 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block22[id.x * 22 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block22[id.x * 22 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr21;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg21;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb21;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr21 = celr21 * W + regr[(22 & 1) ^ 1];
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg21 = celg21 * W + regg[(22 & 1) ^ 1];
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb21 = celb21 * W + regb[(22 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block22[id.x * 22 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block22[id.x * 22 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block22[id.x * 22 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block22[id.x * 22 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block22[id.x * 22 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block22[id.x * 22 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block22[id.x * 22 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block22[id.x * 22 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block22[id.x * 22 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block22[id.x * 22 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block22[id.x * 22 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block22[id.x * 22 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block22[id.x * 22 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block22[id.x * 22 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block22[id.x * 22 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block22[id.x * 22 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block22[id.x * 22 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block22[id.x * 22 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block22[id.x * 22 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block22[id.x * 22 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block22[id.x * 22 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block22[id.x * 22 + 21] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block22[0 * TPB + id.x];
	STORE(0, i, 22);
	i = block22[1 * TPB + id.x];
	STORE(1, i, 22);
	i = block22[2 * TPB + id.x];
	STORE(2, i, 22);
	i = block22[3 * TPB + id.x];
	STORE(3, i, 22);
	i = block22[4 * TPB + id.x];
	STORE(4, i, 22);
	i = block22[5 * TPB + id.x];
	STORE(5, i, 22);
	i = block22[6 * TPB + id.x];
	STORE(6, i, 22);
	i = block22[7 * TPB + id.x];
	STORE(7, i, 22);
	i = block22[8 * TPB + id.x];
	STORE(8, i, 22);
	i = block22[9 * TPB + id.x];
	STORE(9, i, 22);
	i = block22[10 * TPB + id.x];
	STORE(10, i, 22);
	i = block22[11 * TPB + id.x];
	STORE(11, i, 22);
	i = block22[12 * TPB + id.x];
	STORE(12, i, 22);
	i = block22[13 * TPB + id.x];
	STORE(13, i, 22);
	i = block22[14 * TPB + id.x];
	STORE(14, i, 22);
	i = block22[15 * TPB + id.x];
	STORE(15, i, 22);
	i = block22[16 * TPB + id.x];
	STORE(16, i, 22);
	i = block22[17 * TPB + id.x];
	STORE(17, i, 22);
	i = block22[18 * TPB + id.x];
	STORE(18, i, 22);
	i = block22[19 * TPB + id.x];
	STORE(19, i, 22);
	i = block22[20 * TPB + id.x];
	STORE(20, i, 22);
	i = block22[21 * TPB + id.x];
	STORE(21, i, 22);;
} 
[numthreads(TPB, 1, 1)] void XBlur24(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block24[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block24[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block24[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block24[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block24[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block24[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block24[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block24[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block24[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block24[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block24[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block24[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block24[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block24[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block24[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block24[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block24[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block24[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block24[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block24[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block24[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block24[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block24[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block24[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block24[id.x * 24 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block24[id.x * 24 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block24[id.x * 24 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block24[id.x * 24 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block24[id.x * 24 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block24[id.x * 24 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block24[id.x * 24 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block24[id.x * 24 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block24[id.x * 24 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block24[id.x * 24 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block24[id.x * 24 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block24[id.x * 24 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block24[id.x * 24 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block24[id.x * 24 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block24[id.x * 24 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block24[id.x * 24 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block24[id.x * 24 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block24[id.x * 24 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block24[id.x * 24 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block24[id.x * 24 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block24[id.x * 24 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block24[id.x * 24 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block24[id.x * 24 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block24[id.x * 24 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr23;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg23;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb23;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr23 = celr23 * W + regr[(24 & 1) ^ 1];
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg23 = celg23 * W + regg[(24 & 1) ^ 1];
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb23 = celb23 * W + regb[(24 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block24[id.x * 24 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block24[id.x * 24 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block24[id.x * 24 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block24[id.x * 24 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block24[id.x * 24 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block24[id.x * 24 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block24[id.x * 24 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block24[id.x * 24 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block24[id.x * 24 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block24[id.x * 24 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block24[id.x * 24 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block24[id.x * 24 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block24[id.x * 24 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block24[id.x * 24 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block24[id.x * 24 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block24[id.x * 24 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block24[id.x * 24 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block24[id.x * 24 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block24[id.x * 24 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block24[id.x * 24 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block24[id.x * 24 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block24[id.x * 24 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block24[id.x * 24 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block24[id.x * 24 + 23] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block24[0 * TPB + id.x];
	STORE(0, i, 24);
	i = block24[1 * TPB + id.x];
	STORE(1, i, 24);
	i = block24[2 * TPB + id.x];
	STORE(2, i, 24);
	i = block24[3 * TPB + id.x];
	STORE(3, i, 24);
	i = block24[4 * TPB + id.x];
	STORE(4, i, 24);
	i = block24[5 * TPB + id.x];
	STORE(5, i, 24);
	i = block24[6 * TPB + id.x];
	STORE(6, i, 24);
	i = block24[7 * TPB + id.x];
	STORE(7, i, 24);
	i = block24[8 * TPB + id.x];
	STORE(8, i, 24);
	i = block24[9 * TPB + id.x];
	STORE(9, i, 24);
	i = block24[10 * TPB + id.x];
	STORE(10, i, 24);
	i = block24[11 * TPB + id.x];
	STORE(11, i, 24);
	i = block24[12 * TPB + id.x];
	STORE(12, i, 24);
	i = block24[13 * TPB + id.x];
	STORE(13, i, 24);
	i = block24[14 * TPB + id.x];
	STORE(14, i, 24);
	i = block24[15 * TPB + id.x];
	STORE(15, i, 24);
	i = block24[16 * TPB + id.x];
	STORE(16, i, 24);
	i = block24[17 * TPB + id.x];
	STORE(17, i, 24);
	i = block24[18 * TPB + id.x];
	STORE(18, i, 24);
	i = block24[19 * TPB + id.x];
	STORE(19, i, 24);
	i = block24[20 * TPB + id.x];
	STORE(20, i, 24);
	i = block24[21 * TPB + id.x];
	STORE(21, i, 24);
	i = block24[22 * TPB + id.x];
	STORE(22, i, 24);
	i = block24[23 * TPB + id.x];
	STORE(23, i, 24);;
} 
[numthreads(TPB, 1, 1)] void XBlur26(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block26[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block26[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block26[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block26[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block26[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block26[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block26[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block26[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block26[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block26[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block26[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block26[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block26[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block26[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block26[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block26[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block26[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block26[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block26[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block26[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block26[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block26[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block26[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block26[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block26[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block26[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block26[id.x * 26 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block26[id.x * 26 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block26[id.x * 26 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block26[id.x * 26 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block26[id.x * 26 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block26[id.x * 26 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block26[id.x * 26 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block26[id.x * 26 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block26[id.x * 26 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block26[id.x * 26 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block26[id.x * 26 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block26[id.x * 26 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block26[id.x * 26 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block26[id.x * 26 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block26[id.x * 26 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block26[id.x * 26 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block26[id.x * 26 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block26[id.x * 26 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block26[id.x * 26 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block26[id.x * 26 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block26[id.x * 26 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block26[id.x * 26 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block26[id.x * 26 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block26[id.x * 26 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block26[id.x * 26 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block26[id.x * 26 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr25;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg25;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb25;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr25 = celr25 * W + regr[(26 & 1) ^ 1];
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg25 = celg25 * W + regg[(26 & 1) ^ 1];
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb25 = celb25 * W + regb[(26 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block26[id.x * 26 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block26[id.x * 26 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block26[id.x * 26 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block26[id.x * 26 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block26[id.x * 26 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block26[id.x * 26 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block26[id.x * 26 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block26[id.x * 26 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block26[id.x * 26 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block26[id.x * 26 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block26[id.x * 26 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block26[id.x * 26 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block26[id.x * 26 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block26[id.x * 26 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block26[id.x * 26 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block26[id.x * 26 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block26[id.x * 26 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block26[id.x * 26 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block26[id.x * 26 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block26[id.x * 26 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block26[id.x * 26 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block26[id.x * 26 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block26[id.x * 26 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block26[id.x * 26 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block26[id.x * 26 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block26[id.x * 26 + 25] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block26[0 * TPB + id.x];
	STORE(0, i, 26);
	i = block26[1 * TPB + id.x];
	STORE(1, i, 26);
	i = block26[2 * TPB + id.x];
	STORE(2, i, 26);
	i = block26[3 * TPB + id.x];
	STORE(3, i, 26);
	i = block26[4 * TPB + id.x];
	STORE(4, i, 26);
	i = block26[5 * TPB + id.x];
	STORE(5, i, 26);
	i = block26[6 * TPB + id.x];
	STORE(6, i, 26);
	i = block26[7 * TPB + id.x];
	STORE(7, i, 26);
	i = block26[8 * TPB + id.x];
	STORE(8, i, 26);
	i = block26[9 * TPB + id.x];
	STORE(9, i, 26);
	i = block26[10 * TPB + id.x];
	STORE(10, i, 26);
	i = block26[11 * TPB + id.x];
	STORE(11, i, 26);
	i = block26[12 * TPB + id.x];
	STORE(12, i, 26);
	i = block26[13 * TPB + id.x];
	STORE(13, i, 26);
	i = block26[14 * TPB + id.x];
	STORE(14, i, 26);
	i = block26[15 * TPB + id.x];
	STORE(15, i, 26);
	i = block26[16 * TPB + id.x];
	STORE(16, i, 26);
	i = block26[17 * TPB + id.x];
	STORE(17, i, 26);
	i = block26[18 * TPB + id.x];
	STORE(18, i, 26);
	i = block26[19 * TPB + id.x];
	STORE(19, i, 26);
	i = block26[20 * TPB + id.x];
	STORE(20, i, 26);
	i = block26[21 * TPB + id.x];
	STORE(21, i, 26);
	i = block26[22 * TPB + id.x];
	STORE(22, i, 26);
	i = block26[23 * TPB + id.x];
	STORE(23, i, 26);
	i = block26[24 * TPB + id.x];
	STORE(24, i, 26);
	i = block26[25 * TPB + id.x];
	STORE(25, i, 26);;
} 

[numthreads(TPB, 1, 1)] void XBlur28(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block28[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block28[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block28[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block28[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block28[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block28[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block28[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block28[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block28[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block28[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block28[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block28[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block28[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block28[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block28[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block28[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block28[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block28[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block28[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block28[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block28[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block28[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block28[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block28[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block28[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block28[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block28[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block28[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block28[id.x * 28 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block28[id.x * 28 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block28[id.x * 28 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block28[id.x * 28 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block28[id.x * 28 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block28[id.x * 28 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block28[id.x * 28 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block28[id.x * 28 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block28[id.x * 28 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block28[id.x * 28 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block28[id.x * 28 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block28[id.x * 28 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block28[id.x * 28 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block28[id.x * 28 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block28[id.x * 28 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block28[id.x * 28 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block28[id.x * 28 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block28[id.x * 28 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block28[id.x * 28 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block28[id.x * 28 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block28[id.x * 28 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block28[id.x * 28 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block28[id.x * 28 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block28[id.x * 28 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block28[id.x * 28 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block28[id.x * 28 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block28[id.x * 28 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block28[id.x * 28 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr27;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg27;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb27;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr27 = celr27 * W + regr[(28 & 1) ^ 1];
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg27 = celg27 * W + regg[(28 & 1) ^ 1];
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb27 = celb27 * W + regb[(28 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block28[id.x * 28 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block28[id.x * 28 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block28[id.x * 28 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block28[id.x * 28 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block28[id.x * 28 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block28[id.x * 28 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block28[id.x * 28 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block28[id.x * 28 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block28[id.x * 28 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block28[id.x * 28 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block28[id.x * 28 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block28[id.x * 28 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block28[id.x * 28 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block28[id.x * 28 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block28[id.x * 28 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block28[id.x * 28 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block28[id.x * 28 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block28[id.x * 28 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block28[id.x * 28 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block28[id.x * 28 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block28[id.x * 28 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block28[id.x * 28 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block28[id.x * 28 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block28[id.x * 28 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block28[id.x * 28 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block28[id.x * 28 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block28[id.x * 28 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block28[id.x * 28 + 27] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block28[0 * TPB + id.x];
	STORE(0, i, 28);
	i = block28[1 * TPB + id.x];
	STORE(1, i, 28);
	i = block28[2 * TPB + id.x];
	STORE(2, i, 28);
	i = block28[3 * TPB + id.x];
	STORE(3, i, 28);
	i = block28[4 * TPB + id.x];
	STORE(4, i, 28);
	i = block28[5 * TPB + id.x];
	STORE(5, i, 28);
	i = block28[6 * TPB + id.x];
	STORE(6, i, 28);
	i = block28[7 * TPB + id.x];
	STORE(7, i, 28);
	i = block28[8 * TPB + id.x];
	STORE(8, i, 28);
	i = block28[9 * TPB + id.x];
	STORE(9, i, 28);
	i = block28[10 * TPB + id.x];
	STORE(10, i, 28);
	i = block28[11 * TPB + id.x];
	STORE(11, i, 28);
	i = block28[12 * TPB + id.x];
	STORE(12, i, 28);
	i = block28[13 * TPB + id.x];
	STORE(13, i, 28);
	i = block28[14 * TPB + id.x];
	STORE(14, i, 28);
	i = block28[15 * TPB + id.x];
	STORE(15, i, 28);
	i = block28[16 * TPB + id.x];
	STORE(16, i, 28);
	i = block28[17 * TPB + id.x];
	STORE(17, i, 28);
	i = block28[18 * TPB + id.x];
	STORE(18, i, 28);
	i = block28[19 * TPB + id.x];
	STORE(19, i, 28);
	i = block28[20 * TPB + id.x];
	STORE(20, i, 28);
	i = block28[21 * TPB + id.x];
	STORE(21, i, 28);
	i = block28[22 * TPB + id.x];
	STORE(22, i, 28);
	i = block28[23 * TPB + id.x];
	STORE(23, i, 28);
	i = block28[24 * TPB + id.x];
	STORE(24, i, 28);
	i = block28[25 * TPB + id.x];
	STORE(25, i, 28);
	i = block28[26 * TPB + id.x];
	STORE(26, i, 28);
	i = block28[27 * TPB + id.x];
	STORE(27, i, 28);;
} 
[numthreads(TPB, 1, 1)] void XBlur30(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block30[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block30[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block30[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block30[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block30[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block30[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block30[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block30[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block30[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block30[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block30[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block30[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block30[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block30[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block30[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block30[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block30[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block30[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block30[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block30[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block30[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block30[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block30[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block30[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block30[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block30[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block30[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block30[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block30[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block30[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block30[id.x * 30 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block30[id.x * 30 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block30[id.x * 30 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block30[id.x * 30 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block30[id.x * 30 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block30[id.x * 30 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block30[id.x * 30 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block30[id.x * 30 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block30[id.x * 30 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block30[id.x * 30 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block30[id.x * 30 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block30[id.x * 30 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block30[id.x * 30 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block30[id.x * 30 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block30[id.x * 30 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block30[id.x * 30 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block30[id.x * 30 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block30[id.x * 30 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block30[id.x * 30 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block30[id.x * 30 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block30[id.x * 30 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block30[id.x * 30 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block30[id.x * 30 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block30[id.x * 30 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block30[id.x * 30 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block30[id.x * 30 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block30[id.x * 30 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block30[id.x * 30 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block30[id.x * 30 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block30[id.x * 30 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr29;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg29;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb29;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr29 = celr29 * W + regr[(30 & 1) ^ 1];
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg29 = celg29 * W + regg[(30 & 1) ^ 1];
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb29 = celb29 * W + regb[(30 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block30[id.x * 30 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block30[id.x * 30 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block30[id.x * 30 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block30[id.x * 30 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block30[id.x * 30 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block30[id.x * 30 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block30[id.x * 30 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block30[id.x * 30 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block30[id.x * 30 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block30[id.x * 30 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block30[id.x * 30 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block30[id.x * 30 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block30[id.x * 30 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block30[id.x * 30 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block30[id.x * 30 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block30[id.x * 30 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block30[id.x * 30 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block30[id.x * 30 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block30[id.x * 30 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block30[id.x * 30 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block30[id.x * 30 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block30[id.x * 30 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block30[id.x * 30 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block30[id.x * 30 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block30[id.x * 30 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block30[id.x * 30 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block30[id.x * 30 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block30[id.x * 30 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block30[id.x * 30 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block30[id.x * 30 + 29] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block30[0 * TPB + id.x];
	STORE(0, i, 30);
	i = block30[1 * TPB + id.x];
	STORE(1, i, 30);
	i = block30[2 * TPB + id.x];
	STORE(2, i, 30);
	i = block30[3 * TPB + id.x];
	STORE(3, i, 30);
	i = block30[4 * TPB + id.x];
	STORE(4, i, 30);
	i = block30[5 * TPB + id.x];
	STORE(5, i, 30);
	i = block30[6 * TPB + id.x];
	STORE(6, i, 30);
	i = block30[7 * TPB + id.x];
	STORE(7, i, 30);
	i = block30[8 * TPB + id.x];
	STORE(8, i, 30);
	i = block30[9 * TPB + id.x];
	STORE(9, i, 30);
	i = block30[10 * TPB + id.x];
	STORE(10, i, 30);
	i = block30[11 * TPB + id.x];
	STORE(11, i, 30);
	i = block30[12 * TPB + id.x];
	STORE(12, i, 30);
	i = block30[13 * TPB + id.x];
	STORE(13, i, 30);
	i = block30[14 * TPB + id.x];
	STORE(14, i, 30);
	i = block30[15 * TPB + id.x];
	STORE(15, i, 30);
	i = block30[16 * TPB + id.x];
	STORE(16, i, 30);
	i = block30[17 * TPB + id.x];
	STORE(17, i, 30);
	i = block30[18 * TPB + id.x];
	STORE(18, i, 30);
	i = block30[19 * TPB + id.x];
	STORE(19, i, 30);
	i = block30[20 * TPB + id.x];
	STORE(20, i, 30);
	i = block30[21 * TPB + id.x];
	STORE(21, i, 30);
	i = block30[22 * TPB + id.x];
	STORE(22, i, 30);
	i = block30[23 * TPB + id.x];
	STORE(23, i, 30);
	i = block30[24 * TPB + id.x];
	STORE(24, i, 30);
	i = block30[25 * TPB + id.x];
	STORE(25, i, 30);
	i = block30[26 * TPB + id.x];
	STORE(26, i, 30);
	i = block30[27 * TPB + id.x];
	STORE(27, i, 30);
	i = block30[28 * TPB + id.x];
	STORE(28, i, 30);
	i = block30[29 * TPB + id.x];
	STORE(29, i, 30);;
} 
[numthreads(TPB, 1, 1)] void XBlur32(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block32[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block32[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block32[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block32[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block32[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block32[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block32[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block32[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block32[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block32[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block32[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block32[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block32[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block32[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block32[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block32[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block32[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block32[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block32[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block32[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block32[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block32[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block32[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block32[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block32[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block32[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block32[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block32[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block32[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block32[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block32[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block32[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block32[id.x * 32 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block32[id.x * 32 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block32[id.x * 32 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block32[id.x * 32 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block32[id.x * 32 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block32[id.x * 32 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block32[id.x * 32 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block32[id.x * 32 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block32[id.x * 32 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block32[id.x * 32 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block32[id.x * 32 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block32[id.x * 32 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block32[id.x * 32 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block32[id.x * 32 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block32[id.x * 32 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block32[id.x * 32 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block32[id.x * 32 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block32[id.x * 32 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block32[id.x * 32 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block32[id.x * 32 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block32[id.x * 32 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block32[id.x * 32 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block32[id.x * 32 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block32[id.x * 32 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block32[id.x * 32 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block32[id.x * 32 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block32[id.x * 32 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block32[id.x * 32 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block32[id.x * 32 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block32[id.x * 32 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block32[id.x * 32 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block32[id.x * 32 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr31;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg31;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb31;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr31 = celr31 * W + regr[(32 & 1) ^ 1];
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg31 = celg31 * W + regg[(32 & 1) ^ 1];
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb31 = celb31 * W + regb[(32 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block32[id.x * 32 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block32[id.x * 32 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block32[id.x * 32 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block32[id.x * 32 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block32[id.x * 32 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block32[id.x * 32 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block32[id.x * 32 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block32[id.x * 32 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block32[id.x * 32 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block32[id.x * 32 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block32[id.x * 32 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block32[id.x * 32 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block32[id.x * 32 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block32[id.x * 32 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block32[id.x * 32 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block32[id.x * 32 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block32[id.x * 32 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block32[id.x * 32 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block32[id.x * 32 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block32[id.x * 32 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block32[id.x * 32 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block32[id.x * 32 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block32[id.x * 32 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block32[id.x * 32 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block32[id.x * 32 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block32[id.x * 32 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block32[id.x * 32 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block32[id.x * 32 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block32[id.x * 32 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block32[id.x * 32 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block32[id.x * 32 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block32[id.x * 32 + 31] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block32[0 * TPB + id.x];
	STORE(0, i, 32);
	i = block32[1 * TPB + id.x];
	STORE(1, i, 32);
	i = block32[2 * TPB + id.x];
	STORE(2, i, 32);
	i = block32[3 * TPB + id.x];
	STORE(3, i, 32);
	i = block32[4 * TPB + id.x];
	STORE(4, i, 32);
	i = block32[5 * TPB + id.x];
	STORE(5, i, 32);
	i = block32[6 * TPB + id.x];
	STORE(6, i, 32);
	i = block32[7 * TPB + id.x];
	STORE(7, i, 32);
	i = block32[8 * TPB + id.x];
	STORE(8, i, 32);
	i = block32[9 * TPB + id.x];
	STORE(9, i, 32);
	i = block32[10 * TPB + id.x];
	STORE(10, i, 32);
	i = block32[11 * TPB + id.x];
	STORE(11, i, 32);
	i = block32[12 * TPB + id.x];
	STORE(12, i, 32);
	i = block32[13 * TPB + id.x];
	STORE(13, i, 32);
	i = block32[14 * TPB + id.x];
	STORE(14, i, 32);
	i = block32[15 * TPB + id.x];
	STORE(15, i, 32);
	i = block32[16 * TPB + id.x];
	STORE(16, i, 32);
	i = block32[17 * TPB + id.x];
	STORE(17, i, 32);
	i = block32[18 * TPB + id.x];
	STORE(18, i, 32);
	i = block32[19 * TPB + id.x];
	STORE(19, i, 32);
	i = block32[20 * TPB + id.x];
	STORE(20, i, 32);
	i = block32[21 * TPB + id.x];
	STORE(21, i, 32);
	i = block32[22 * TPB + id.x];
	STORE(22, i, 32);
	i = block32[23 * TPB + id.x];
	STORE(23, i, 32);
	i = block32[24 * TPB + id.x];
	STORE(24, i, 32);
	i = block32[25 * TPB + id.x];
	STORE(25, i, 32);
	i = block32[26 * TPB + id.x];
	STORE(26, i, 32);
	i = block32[27 * TPB + id.x];
	STORE(27, i, 32);
	i = block32[28 * TPB + id.x];
	STORE(28, i, 32);
	i = block32[29 * TPB + id.x];
	STORE(29, i, 32);
	i = block32[30 * TPB + id.x];
	STORE(30, i, 32);
	i = block32[31 * TPB + id.x];
	STORE(31, i, 32);;
} 
[numthreads(TPB, 1, 1)] void XBlur34(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block34[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block34[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block34[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block34[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block34[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block34[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block34[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block34[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block34[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block34[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block34[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block34[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block34[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block34[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block34[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block34[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block34[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block34[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block34[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block34[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block34[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block34[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block34[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block34[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block34[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block34[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block34[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block34[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block34[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block34[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block34[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block34[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block34[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block34[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block34[id.x * 34 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block34[id.x * 34 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block34[id.x * 34 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block34[id.x * 34 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block34[id.x * 34 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block34[id.x * 34 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block34[id.x * 34 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block34[id.x * 34 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block34[id.x * 34 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block34[id.x * 34 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block34[id.x * 34 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block34[id.x * 34 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block34[id.x * 34 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block34[id.x * 34 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block34[id.x * 34 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block34[id.x * 34 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block34[id.x * 34 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block34[id.x * 34 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block34[id.x * 34 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block34[id.x * 34 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block34[id.x * 34 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block34[id.x * 34 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block34[id.x * 34 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block34[id.x * 34 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block34[id.x * 34 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block34[id.x * 34 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block34[id.x * 34 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block34[id.x * 34 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block34[id.x * 34 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block34[id.x * 34 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block34[id.x * 34 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block34[id.x * 34 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block34[id.x * 34 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block34[id.x * 34 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr33;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg33;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb33;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr33 = celr33 * W + regr[(34 & 1) ^ 1];
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg33 = celg33 * W + regg[(34 & 1) ^ 1];
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb33 = celb33 * W + regb[(34 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block34[id.x * 34 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block34[id.x * 34 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block34[id.x * 34 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block34[id.x * 34 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block34[id.x * 34 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block34[id.x * 34 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block34[id.x * 34 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block34[id.x * 34 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block34[id.x * 34 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block34[id.x * 34 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block34[id.x * 34 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block34[id.x * 34 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block34[id.x * 34 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block34[id.x * 34 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block34[id.x * 34 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block34[id.x * 34 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block34[id.x * 34 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block34[id.x * 34 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block34[id.x * 34 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block34[id.x * 34 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block34[id.x * 34 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block34[id.x * 34 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block34[id.x * 34 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block34[id.x * 34 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block34[id.x * 34 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block34[id.x * 34 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block34[id.x * 34 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block34[id.x * 34 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block34[id.x * 34 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block34[id.x * 34 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block34[id.x * 34 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block34[id.x * 34 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block34[id.x * 34 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block34[id.x * 34 + 33] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block34[0 * TPB + id.x];
	STORE(0, i, 34);
	i = block34[1 * TPB + id.x];
	STORE(1, i, 34);
	i = block34[2 * TPB + id.x];
	STORE(2, i, 34);
	i = block34[3 * TPB + id.x];
	STORE(3, i, 34);
	i = block34[4 * TPB + id.x];
	STORE(4, i, 34);
	i = block34[5 * TPB + id.x];
	STORE(5, i, 34);
	i = block34[6 * TPB + id.x];
	STORE(6, i, 34);
	i = block34[7 * TPB + id.x];
	STORE(7, i, 34);
	i = block34[8 * TPB + id.x];
	STORE(8, i, 34);
	i = block34[9 * TPB + id.x];
	STORE(9, i, 34);
	i = block34[10 * TPB + id.x];
	STORE(10, i, 34);
	i = block34[11 * TPB + id.x];
	STORE(11, i, 34);
	i = block34[12 * TPB + id.x];
	STORE(12, i, 34);
	i = block34[13 * TPB + id.x];
	STORE(13, i, 34);
	i = block34[14 * TPB + id.x];
	STORE(14, i, 34);
	i = block34[15 * TPB + id.x];
	STORE(15, i, 34);
	i = block34[16 * TPB + id.x];
	STORE(16, i, 34);
	i = block34[17 * TPB + id.x];
	STORE(17, i, 34);
	i = block34[18 * TPB + id.x];
	STORE(18, i, 34);
	i = block34[19 * TPB + id.x];
	STORE(19, i, 34);
	i = block34[20 * TPB + id.x];
	STORE(20, i, 34);
	i = block34[21 * TPB + id.x];
	STORE(21, i, 34);
	i = block34[22 * TPB + id.x];
	STORE(22, i, 34);
	i = block34[23 * TPB + id.x];
	STORE(23, i, 34);
	i = block34[24 * TPB + id.x];
	STORE(24, i, 34);
	i = block34[25 * TPB + id.x];
	STORE(25, i, 34);
	i = block34[26 * TPB + id.x];
	STORE(26, i, 34);
	i = block34[27 * TPB + id.x];
	STORE(27, i, 34);
	i = block34[28 * TPB + id.x];
	STORE(28, i, 34);
	i = block34[29 * TPB + id.x];
	STORE(29, i, 34);
	i = block34[30 * TPB + id.x];
	STORE(30, i, 34);
	i = block34[31 * TPB + id.x];
	STORE(31, i, 34);
	i = block34[32 * TPB + id.x];
	STORE(32, i, 34);
	i = block34[33 * TPB + id.x];
	STORE(33, i, 34);;
} 
[numthreads(TPB, 1, 1)] void XBlur36(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block36[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block36[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block36[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block36[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block36[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block36[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block36[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block36[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block36[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block36[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block36[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block36[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block36[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block36[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block36[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block36[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block36[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block36[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block36[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block36[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block36[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block36[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block36[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block36[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block36[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block36[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block36[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block36[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block36[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block36[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block36[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block36[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block36[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block36[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block36[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block36[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block36[id.x * 36 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block36[id.x * 36 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block36[id.x * 36 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block36[id.x * 36 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block36[id.x * 36 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block36[id.x * 36 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block36[id.x * 36 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block36[id.x * 36 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block36[id.x * 36 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block36[id.x * 36 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block36[id.x * 36 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block36[id.x * 36 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block36[id.x * 36 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block36[id.x * 36 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block36[id.x * 36 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block36[id.x * 36 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block36[id.x * 36 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block36[id.x * 36 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block36[id.x * 36 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block36[id.x * 36 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block36[id.x * 36 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block36[id.x * 36 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block36[id.x * 36 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block36[id.x * 36 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block36[id.x * 36 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block36[id.x * 36 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block36[id.x * 36 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block36[id.x * 36 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block36[id.x * 36 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block36[id.x * 36 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block36[id.x * 36 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block36[id.x * 36 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block36[id.x * 36 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block36[id.x * 36 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block36[id.x * 36 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block36[id.x * 36 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr35;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg35;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb35;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr35 = celr35 * W + regr[(36 & 1) ^ 1];
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg35 = celg35 * W + regg[(36 & 1) ^ 1];
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb35 = celb35 * W + regb[(36 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block36[id.x * 36 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block36[id.x * 36 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block36[id.x * 36 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block36[id.x * 36 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block36[id.x * 36 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block36[id.x * 36 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block36[id.x * 36 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block36[id.x * 36 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block36[id.x * 36 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block36[id.x * 36 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block36[id.x * 36 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block36[id.x * 36 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block36[id.x * 36 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block36[id.x * 36 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block36[id.x * 36 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block36[id.x * 36 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block36[id.x * 36 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block36[id.x * 36 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block36[id.x * 36 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block36[id.x * 36 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block36[id.x * 36 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block36[id.x * 36 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block36[id.x * 36 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block36[id.x * 36 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block36[id.x * 36 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block36[id.x * 36 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block36[id.x * 36 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block36[id.x * 36 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block36[id.x * 36 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block36[id.x * 36 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block36[id.x * 36 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block36[id.x * 36 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block36[id.x * 36 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block36[id.x * 36 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block36[id.x * 36 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block36[id.x * 36 + 35] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block36[0 * TPB + id.x];
	STORE(0, i, 36);
	i = block36[1 * TPB + id.x];
	STORE(1, i, 36);
	i = block36[2 * TPB + id.x];
	STORE(2, i, 36);
	i = block36[3 * TPB + id.x];
	STORE(3, i, 36);
	i = block36[4 * TPB + id.x];
	STORE(4, i, 36);
	i = block36[5 * TPB + id.x];
	STORE(5, i, 36);
	i = block36[6 * TPB + id.x];
	STORE(6, i, 36);
	i = block36[7 * TPB + id.x];
	STORE(7, i, 36);
	i = block36[8 * TPB + id.x];
	STORE(8, i, 36);
	i = block36[9 * TPB + id.x];
	STORE(9, i, 36);
	i = block36[10 * TPB + id.x];
	STORE(10, i, 36);
	i = block36[11 * TPB + id.x];
	STORE(11, i, 36);
	i = block36[12 * TPB + id.x];
	STORE(12, i, 36);
	i = block36[13 * TPB + id.x];
	STORE(13, i, 36);
	i = block36[14 * TPB + id.x];
	STORE(14, i, 36);
	i = block36[15 * TPB + id.x];
	STORE(15, i, 36);
	i = block36[16 * TPB + id.x];
	STORE(16, i, 36);
	i = block36[17 * TPB + id.x];
	STORE(17, i, 36);
	i = block36[18 * TPB + id.x];
	STORE(18, i, 36);
	i = block36[19 * TPB + id.x];
	STORE(19, i, 36);
	i = block36[20 * TPB + id.x];
	STORE(20, i, 36);
	i = block36[21 * TPB + id.x];
	STORE(21, i, 36);
	i = block36[22 * TPB + id.x];
	STORE(22, i, 36);
	i = block36[23 * TPB + id.x];
	STORE(23, i, 36);
	i = block36[24 * TPB + id.x];
	STORE(24, i, 36);
	i = block36[25 * TPB + id.x];
	STORE(25, i, 36);
	i = block36[26 * TPB + id.x];
	STORE(26, i, 36);
	i = block36[27 * TPB + id.x];
	STORE(27, i, 36);
	i = block36[28 * TPB + id.x];
	STORE(28, i, 36);
	i = block36[29 * TPB + id.x];
	STORE(29, i, 36);
	i = block36[30 * TPB + id.x];
	STORE(30, i, 36);
	i = block36[31 * TPB + id.x];
	STORE(31, i, 36);
	i = block36[32 * TPB + id.x];
	STORE(32, i, 36);
	i = block36[33 * TPB + id.x];
	STORE(33, i, 36);
	i = block36[34 * TPB + id.x];
	STORE(34, i, 36);
	i = block36[35 * TPB + id.x];
	STORE(35, i, 36);;
} 
[numthreads(TPB, 1, 1)] void XBlur38(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;
	float celr36; float celg36; float celb36;
	float celr37; float celg37; float celb37;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block38[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block38[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block38[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block38[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block38[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block38[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block38[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block38[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block38[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block38[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block38[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block38[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block38[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block38[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block38[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block38[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block38[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block38[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block38[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block38[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block38[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block38[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block38[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block38[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block38[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block38[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block38[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block38[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block38[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block38[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block38[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block38[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block38[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block38[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block38[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block38[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block38[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block38[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block38[id.x * 38 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block38[id.x * 38 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block38[id.x * 38 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block38[id.x * 38 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block38[id.x * 38 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block38[id.x * 38 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block38[id.x * 38 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block38[id.x * 38 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block38[id.x * 38 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block38[id.x * 38 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block38[id.x * 38 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block38[id.x * 38 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block38[id.x * 38 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block38[id.x * 38 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block38[id.x * 38 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block38[id.x * 38 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block38[id.x * 38 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block38[id.x * 38 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block38[id.x * 38 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block38[id.x * 38 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block38[id.x * 38 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block38[id.x * 38 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block38[id.x * 38 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block38[id.x * 38 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block38[id.x * 38 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block38[id.x * 38 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block38[id.x * 38 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block38[id.x * 38 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block38[id.x * 38 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block38[id.x * 38 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block38[id.x * 38 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block38[id.x * 38 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block38[id.x * 38 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block38[id.x * 38 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block38[id.x * 38 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block38[id.x * 38 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);
	i = block38[id.x * 38 + 36]; celr36 = (i % 256); celg36 = (i / 256 % 256); celb36 = (i / 65536 % 256);
	i = block38[id.x * 38 + 37]; celr37 = (i % 256); celg37 = (i / 256 % 256); celb37 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr37;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg37;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb37;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR; regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR; celr35 = celr35 * W + regr[(34 & 1) ^ 1]; regg[34 & 1] = celg35 * WLR; regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR; celg35 = celg35 * W + regg[(34 & 1) ^ 1]; regb[34 & 1] = celb35 * WLR; regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR; celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR; regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR; celr36 = celr36 * W + regr[(35 & 1) ^ 1]; regg[35 & 1] = celg36 * WLR; regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR; celg36 = celg36 * W + regg[(35 & 1) ^ 1]; regb[35 & 1] = celb36 * WLR; regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR; celb36 = celb36 * W + regb[(35 & 1) ^ 1];;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr37 = celr37 * W + regr[(38 & 1) ^ 1];
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg37 = celg37 * W + regg[(38 & 1) ^ 1];
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb37 = celb37 * W + regb[(38 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block38[id.x * 38 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block38[id.x * 38 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block38[id.x * 38 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block38[id.x * 38 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block38[id.x * 38 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block38[id.x * 38 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block38[id.x * 38 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block38[id.x * 38 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block38[id.x * 38 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block38[id.x * 38 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block38[id.x * 38 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block38[id.x * 38 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block38[id.x * 38 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block38[id.x * 38 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block38[id.x * 38 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block38[id.x * 38 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block38[id.x * 38 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block38[id.x * 38 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block38[id.x * 38 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block38[id.x * 38 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block38[id.x * 38 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block38[id.x * 38 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block38[id.x * 38 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block38[id.x * 38 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block38[id.x * 38 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block38[id.x * 38 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block38[id.x * 38 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block38[id.x * 38 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block38[id.x * 38 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block38[id.x * 38 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block38[id.x * 38 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block38[id.x * 38 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block38[id.x * 38 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block38[id.x * 38 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block38[id.x * 38 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block38[id.x * 38 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36); block38[id.x * 38 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37); block38[id.x * 38 + 37] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block38[0 * TPB + id.x];
	STORE(0, i, 38);
	i = block38[1 * TPB + id.x];
	STORE(1, i, 38);
	i = block38[2 * TPB + id.x];
	STORE(2, i, 38);
	i = block38[3 * TPB + id.x];
	STORE(3, i, 38);
	i = block38[4 * TPB + id.x];
	STORE(4, i, 38);
	i = block38[5 * TPB + id.x];
	STORE(5, i, 38);
	i = block38[6 * TPB + id.x];
	STORE(6, i, 38);
	i = block38[7 * TPB + id.x];
	STORE(7, i, 38);
	i = block38[8 * TPB + id.x];
	STORE(8, i, 38);
	i = block38[9 * TPB + id.x];
	STORE(9, i, 38);
	i = block38[10 * TPB + id.x];
	STORE(10, i, 38);
	i = block38[11 * TPB + id.x];
	STORE(11, i, 38);
	i = block38[12 * TPB + id.x];
	STORE(12, i, 38);
	i = block38[13 * TPB + id.x];
	STORE(13, i, 38);
	i = block38[14 * TPB + id.x];
	STORE(14, i, 38);
	i = block38[15 * TPB + id.x];
	STORE(15, i, 38);
	i = block38[16 * TPB + id.x];
	STORE(16, i, 38);
	i = block38[17 * TPB + id.x];
	STORE(17, i, 38);
	i = block38[18 * TPB + id.x];
	STORE(18, i, 38);
	i = block38[19 * TPB + id.x];
	STORE(19, i, 38);
	i = block38[20 * TPB + id.x];
	STORE(20, i, 38);
	i = block38[21 * TPB + id.x];
	STORE(21, i, 38);
	i = block38[22 * TPB + id.x];
	STORE(22, i, 38);
	i = block38[23 * TPB + id.x];
	STORE(23, i, 38);
	i = block38[24 * TPB + id.x];
	STORE(24, i, 38);
	i = block38[25 * TPB + id.x];
	STORE(25, i, 38);
	i = block38[26 * TPB + id.x];
	STORE(26, i, 38);
	i = block38[27 * TPB + id.x];
	STORE(27, i, 38);
	i = block38[28 * TPB + id.x];
	STORE(28, i, 38);
	i = block38[29 * TPB + id.x];
	STORE(29, i, 38);
	i = block38[30 * TPB + id.x];
	STORE(30, i, 38);
	i = block38[31 * TPB + id.x];
	STORE(31, i, 38);
	i = block38[32 * TPB + id.x];
	STORE(32, i, 38);
	i = block38[33 * TPB + id.x];
	STORE(33, i, 38);
	i = block38[34 * TPB + id.x];
	STORE(34, i, 38);
	i = block38[35 * TPB + id.x];
	STORE(35, i, 38);
	i = block38[36 * TPB + id.x];
	STORE(36, i, 38);
	i = block38[37 * TPB + id.x];
	STORE(37, i, 38);;
} 
[numthreads(TPB, 1, 1)] void XBlur40(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;
	float celr36; float celg36; float celb36;
	float celr37; float celg37; float celb37;
	float celr38; float celg38; float celb38;
	float celr39; float celg39; float celb39;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block40[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block40[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block40[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block40[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block40[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block40[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block40[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block40[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block40[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block40[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block40[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block40[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block40[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block40[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block40[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block40[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block40[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block40[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block40[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block40[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block40[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block40[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block40[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block40[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block40[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block40[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block40[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block40[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block40[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block40[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block40[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block40[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block40[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block40[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block40[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block40[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block40[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block40[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block40[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block40[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block40[id.x * 40 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block40[id.x * 40 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block40[id.x * 40 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block40[id.x * 40 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block40[id.x * 40 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block40[id.x * 40 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block40[id.x * 40 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block40[id.x * 40 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block40[id.x * 40 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block40[id.x * 40 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block40[id.x * 40 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block40[id.x * 40 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block40[id.x * 40 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block40[id.x * 40 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block40[id.x * 40 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block40[id.x * 40 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block40[id.x * 40 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block40[id.x * 40 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block40[id.x * 40 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block40[id.x * 40 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block40[id.x * 40 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block40[id.x * 40 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block40[id.x * 40 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block40[id.x * 40 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block40[id.x * 40 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block40[id.x * 40 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block40[id.x * 40 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block40[id.x * 40 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block40[id.x * 40 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block40[id.x * 40 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block40[id.x * 40 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block40[id.x * 40 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block40[id.x * 40 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block40[id.x * 40 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block40[id.x * 40 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block40[id.x * 40 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);
	i = block40[id.x * 40 + 36]; celr36 = (i % 256); celg36 = (i / 256 % 256); celb36 = (i / 65536 % 256);
	i = block40[id.x * 40 + 37]; celr37 = (i % 256); celg37 = (i / 256 % 256); celb37 = (i / 65536 % 256);
	i = block40[id.x * 40 + 38]; celr38 = (i % 256); celg38 = (i / 256 % 256); celb38 = (i / 65536 % 256);
	i = block40[id.x * 40 + 39]; celr39 = (i % 256); celg39 = (i / 256 % 256); celb39 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr39;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg39;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb39;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR; regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR; celr35 = celr35 * W + regr[(34 & 1) ^ 1]; regg[34 & 1] = celg35 * WLR; regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR; celg35 = celg35 * W + regg[(34 & 1) ^ 1]; regb[34 & 1] = celb35 * WLR; regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR; celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR; regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR; celr36 = celr36 * W + regr[(35 & 1) ^ 1]; regg[35 & 1] = celg36 * WLR; regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR; celg36 = celg36 * W + regg[(35 & 1) ^ 1]; regb[35 & 1] = celb36 * WLR; regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR; celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR; regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR; celr37 = celr37 * W + regr[(36 & 1) ^ 1]; regg[36 & 1] = celg37 * WLR; regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR; celg37 = celg37 * W + regg[(36 & 1) ^ 1]; regb[36 & 1] = celb37 * WLR; regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR; celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR; regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR; celr38 = celr38 * W + regr[(37 & 1) ^ 1]; regg[37 & 1] = celg38 * WLR; regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR; celg38 = celg38 * W + regg[(37 & 1) ^ 1]; regb[37 & 1] = celb38 * WLR; regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR; celb38 = celb38 * W + regb[(37 & 1) ^ 1];;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr39 = celr39 * W + regr[(40 & 1) ^ 1];
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg39 = celg39 * W + regg[(40 & 1) ^ 1];
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb39 = celb39 * W + regb[(40 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block40[id.x * 40 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block40[id.x * 40 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block40[id.x * 40 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block40[id.x * 40 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block40[id.x * 40 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block40[id.x * 40 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block40[id.x * 40 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block40[id.x * 40 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block40[id.x * 40 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block40[id.x * 40 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block40[id.x * 40 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block40[id.x * 40 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block40[id.x * 40 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block40[id.x * 40 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block40[id.x * 40 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block40[id.x * 40 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block40[id.x * 40 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block40[id.x * 40 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block40[id.x * 40 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block40[id.x * 40 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block40[id.x * 40 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block40[id.x * 40 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block40[id.x * 40 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block40[id.x * 40 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block40[id.x * 40 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block40[id.x * 40 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block40[id.x * 40 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block40[id.x * 40 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block40[id.x * 40 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block40[id.x * 40 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block40[id.x * 40 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block40[id.x * 40 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block40[id.x * 40 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block40[id.x * 40 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block40[id.x * 40 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block40[id.x * 40 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36); block40[id.x * 40 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37); block40[id.x * 40 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38); block40[id.x * 40 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39); block40[id.x * 40 + 39] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block40[0 * TPB + id.x];
	STORE(0, i, 40);
	i = block40[1 * TPB + id.x];
	STORE(1, i, 40);
	i = block40[2 * TPB + id.x];
	STORE(2, i, 40);
	i = block40[3 * TPB + id.x];
	STORE(3, i, 40);
	i = block40[4 * TPB + id.x];
	STORE(4, i, 40);
	i = block40[5 * TPB + id.x];
	STORE(5, i, 40);
	i = block40[6 * TPB + id.x];
	STORE(6, i, 40);
	i = block40[7 * TPB + id.x];
	STORE(7, i, 40);
	i = block40[8 * TPB + id.x];
	STORE(8, i, 40);
	i = block40[9 * TPB + id.x];
	STORE(9, i, 40);
	i = block40[10 * TPB + id.x];
	STORE(10, i, 40);
	i = block40[11 * TPB + id.x];
	STORE(11, i, 40);
	i = block40[12 * TPB + id.x];
	STORE(12, i, 40);
	i = block40[13 * TPB + id.x];
	STORE(13, i, 40);
	i = block40[14 * TPB + id.x];
	STORE(14, i, 40);
	i = block40[15 * TPB + id.x];
	STORE(15, i, 40);
	i = block40[16 * TPB + id.x];
	STORE(16, i, 40);
	i = block40[17 * TPB + id.x];
	STORE(17, i, 40);
	i = block40[18 * TPB + id.x];
	STORE(18, i, 40);
	i = block40[19 * TPB + id.x];
	STORE(19, i, 40);
	i = block40[20 * TPB + id.x];
	STORE(20, i, 40);
	i = block40[21 * TPB + id.x];
	STORE(21, i, 40);
	i = block40[22 * TPB + id.x];
	STORE(22, i, 40);
	i = block40[23 * TPB + id.x];
	STORE(23, i, 40);
	i = block40[24 * TPB + id.x];
	STORE(24, i, 40);
	i = block40[25 * TPB + id.x];
	STORE(25, i, 40);
	i = block40[26 * TPB + id.x];
	STORE(26, i, 40);
	i = block40[27 * TPB + id.x];
	STORE(27, i, 40);
	i = block40[28 * TPB + id.x];
	STORE(28, i, 40);
	i = block40[29 * TPB + id.x];
	STORE(29, i, 40);
	i = block40[30 * TPB + id.x];
	STORE(30, i, 40);
	i = block40[31 * TPB + id.x];
	STORE(31, i, 40);
	i = block40[32 * TPB + id.x];
	STORE(32, i, 40);
	i = block40[33 * TPB + id.x];
	STORE(33, i, 40);
	i = block40[34 * TPB + id.x];
	STORE(34, i, 40);
	i = block40[35 * TPB + id.x];
	STORE(35, i, 40);
	i = block40[36 * TPB + id.x];
	STORE(36, i, 40);
	i = block40[37 * TPB + id.x];
	STORE(37, i, 40);
	i = block40[38 * TPB + id.x];
	STORE(38, i, 40);
	i = block40[39 * TPB + id.x];
	STORE(39, i, 40);;
} 
[numthreads(TPB, 1, 1)] void XBlur42(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;
	float celr36; float celg36; float celb36;
	float celr37; float celg37; float celb37;
	float celr38; float celg38; float celb38;
	float celr39; float celg39; float celb39;
	float celr40; float celg40; float celb40;
	float celr41; float celg41; float celb41;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block42[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block42[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block42[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block42[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block42[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block42[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block42[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block42[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block42[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block42[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block42[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block42[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block42[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block42[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block42[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block42[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block42[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block42[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block42[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block42[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block42[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block42[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block42[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block42[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block42[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block42[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block42[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block42[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block42[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block42[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block42[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block42[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block42[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block42[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block42[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block42[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block42[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block42[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block42[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block42[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block42[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block42[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block42[id.x * 42 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block42[id.x * 42 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block42[id.x * 42 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block42[id.x * 42 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block42[id.x * 42 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block42[id.x * 42 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block42[id.x * 42 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block42[id.x * 42 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block42[id.x * 42 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block42[id.x * 42 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block42[id.x * 42 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block42[id.x * 42 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block42[id.x * 42 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block42[id.x * 42 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block42[id.x * 42 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block42[id.x * 42 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block42[id.x * 42 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block42[id.x * 42 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block42[id.x * 42 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block42[id.x * 42 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block42[id.x * 42 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block42[id.x * 42 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block42[id.x * 42 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block42[id.x * 42 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block42[id.x * 42 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block42[id.x * 42 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block42[id.x * 42 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block42[id.x * 42 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block42[id.x * 42 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block42[id.x * 42 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block42[id.x * 42 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block42[id.x * 42 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block42[id.x * 42 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block42[id.x * 42 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block42[id.x * 42 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block42[id.x * 42 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);
	i = block42[id.x * 42 + 36]; celr36 = (i % 256); celg36 = (i / 256 % 256); celb36 = (i / 65536 % 256);
	i = block42[id.x * 42 + 37]; celr37 = (i % 256); celg37 = (i / 256 % 256); celb37 = (i / 65536 % 256);
	i = block42[id.x * 42 + 38]; celr38 = (i % 256); celg38 = (i / 256 % 256); celb38 = (i / 65536 % 256);
	i = block42[id.x * 42 + 39]; celr39 = (i % 256); celg39 = (i / 256 % 256); celb39 = (i / 65536 % 256);
	i = block42[id.x * 42 + 40]; celr40 = (i % 256); celg40 = (i / 256 % 256); celb40 = (i / 65536 % 256);
	i = block42[id.x * 42 + 41]; celr41 = (i % 256); celg41 = (i / 256 % 256); celb41 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr41;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg41;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb41;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR; regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR; celr35 = celr35 * W + regr[(34 & 1) ^ 1]; regg[34 & 1] = celg35 * WLR; regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR; celg35 = celg35 * W + regg[(34 & 1) ^ 1]; regb[34 & 1] = celb35 * WLR; regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR; celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR; regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR; celr36 = celr36 * W + regr[(35 & 1) ^ 1]; regg[35 & 1] = celg36 * WLR; regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR; celg36 = celg36 * W + regg[(35 & 1) ^ 1]; regb[35 & 1] = celb36 * WLR; regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR; celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR; regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR; celr37 = celr37 * W + regr[(36 & 1) ^ 1]; regg[36 & 1] = celg37 * WLR; regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR; celg37 = celg37 * W + regg[(36 & 1) ^ 1]; regb[36 & 1] = celb37 * WLR; regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR; celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR; regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR; celr38 = celr38 * W + regr[(37 & 1) ^ 1]; regg[37 & 1] = celg38 * WLR; regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR; celg38 = celg38 * W + regg[(37 & 1) ^ 1]; regb[37 & 1] = celb38 * WLR; regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR; celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR; regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR; celr39 = celr39 * W + regr[(38 & 1) ^ 1]; regg[38 & 1] = celg39 * WLR; regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR; celg39 = celg39 * W + regg[(38 & 1) ^ 1]; regb[38 & 1] = celb39 * WLR; regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR; celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR; regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR; celr40 = celr40 * W + regr[(39 & 1) ^ 1]; regg[39 & 1] = celg40 * WLR; regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR; celg40 = celg40 * W + regg[(39 & 1) ^ 1]; regb[39 & 1] = celb40 * WLR; regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR; celb40 = celb40 * W + regb[(39 & 1) ^ 1];;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr41 = celr41 * W + regr[(42 & 1) ^ 1];
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg41 = celg41 * W + regg[(42 & 1) ^ 1];
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb41 = celb41 * W + regb[(42 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block42[id.x * 42 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block42[id.x * 42 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block42[id.x * 42 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block42[id.x * 42 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block42[id.x * 42 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block42[id.x * 42 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block42[id.x * 42 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block42[id.x * 42 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block42[id.x * 42 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block42[id.x * 42 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block42[id.x * 42 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block42[id.x * 42 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block42[id.x * 42 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block42[id.x * 42 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block42[id.x * 42 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block42[id.x * 42 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block42[id.x * 42 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block42[id.x * 42 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block42[id.x * 42 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block42[id.x * 42 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block42[id.x * 42 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block42[id.x * 42 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block42[id.x * 42 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block42[id.x * 42 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block42[id.x * 42 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block42[id.x * 42 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block42[id.x * 42 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block42[id.x * 42 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block42[id.x * 42 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block42[id.x * 42 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block42[id.x * 42 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block42[id.x * 42 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block42[id.x * 42 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block42[id.x * 42 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block42[id.x * 42 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block42[id.x * 42 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36); block42[id.x * 42 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37); block42[id.x * 42 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38); block42[id.x * 42 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39); block42[id.x * 42 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40); block42[id.x * 42 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41); block42[id.x * 42 + 41] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block42[0 * TPB + id.x];
	STORE(0, i, 42);
	i = block42[1 * TPB + id.x];
	STORE(1, i, 42);
	i = block42[2 * TPB + id.x];
	STORE(2, i, 42);
	i = block42[3 * TPB + id.x];
	STORE(3, i, 42);
	i = block42[4 * TPB + id.x];
	STORE(4, i, 42);
	i = block42[5 * TPB + id.x];
	STORE(5, i, 42);
	i = block42[6 * TPB + id.x];
	STORE(6, i, 42);
	i = block42[7 * TPB + id.x];
	STORE(7, i, 42);
	i = block42[8 * TPB + id.x];
	STORE(8, i, 42);
	i = block42[9 * TPB + id.x];
	STORE(9, i, 42);
	i = block42[10 * TPB + id.x];
	STORE(10, i, 42);
	i = block42[11 * TPB + id.x];
	STORE(11, i, 42);
	i = block42[12 * TPB + id.x];
	STORE(12, i, 42);
	i = block42[13 * TPB + id.x];
	STORE(13, i, 42);
	i = block42[14 * TPB + id.x];
	STORE(14, i, 42);
	i = block42[15 * TPB + id.x];
	STORE(15, i, 42);
	i = block42[16 * TPB + id.x];
	STORE(16, i, 42);
	i = block42[17 * TPB + id.x];
	STORE(17, i, 42);
	i = block42[18 * TPB + id.x];
	STORE(18, i, 42);
	i = block42[19 * TPB + id.x];
	STORE(19, i, 42);
	i = block42[20 * TPB + id.x];
	STORE(20, i, 42);
	i = block42[21 * TPB + id.x];
	STORE(21, i, 42);
	i = block42[22 * TPB + id.x];
	STORE(22, i, 42);
	i = block42[23 * TPB + id.x];
	STORE(23, i, 42);
	i = block42[24 * TPB + id.x];
	STORE(24, i, 42);
	i = block42[25 * TPB + id.x];
	STORE(25, i, 42);
	i = block42[26 * TPB + id.x];
	STORE(26, i, 42);
	i = block42[27 * TPB + id.x];
	STORE(27, i, 42);
	i = block42[28 * TPB + id.x];
	STORE(28, i, 42);
	i = block42[29 * TPB + id.x];
	STORE(29, i, 42);
	i = block42[30 * TPB + id.x];
	STORE(30, i, 42);
	i = block42[31 * TPB + id.x];
	STORE(31, i, 42);
	i = block42[32 * TPB + id.x];
	STORE(32, i, 42);
	i = block42[33 * TPB + id.x];
	STORE(33, i, 42);
	i = block42[34 * TPB + id.x];
	STORE(34, i, 42);
	i = block42[35 * TPB + id.x];
	STORE(35, i, 42);
	i = block42[36 * TPB + id.x];
	STORE(36, i, 42);
	i = block42[37 * TPB + id.x];
	STORE(37, i, 42);
	i = block42[38 * TPB + id.x];
	STORE(38, i, 42);
	i = block42[39 * TPB + id.x];
	STORE(39, i, 42);
	i = block42[40 * TPB + id.x];
	STORE(40, i, 42);
	i = block42[41 * TPB + id.x];
	STORE(41, i, 42);;
}



[numthreads(TPB, 1, 1)] void XBlur44(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block44[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block44[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block44[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block44[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block44[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block44[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block44[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block44[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block44[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block44[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block44[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block44[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block44[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block44[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block44[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block44[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block44[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block44[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block44[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block44[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block44[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block44[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block44[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block44[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block44[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block44[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block44[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block44[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block44[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block44[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block44[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block44[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block44[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block44[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block44[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block44[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block44[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block44[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block44[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block44[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block44[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block44[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(42 * TPB + id.x, id.y)];
	block44[42 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(43 * TPB + id.x, id.y)];
	block44[43 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block44[id.x * 44 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block44[id.x * 44 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block44[id.x * 44 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block44[id.x * 44 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block44[id.x * 44 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block44[id.x * 44 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block44[id.x * 44 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block44[id.x * 44 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block44[id.x * 44 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block44[id.x * 44 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block44[id.x * 44 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block44[id.x * 44 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block44[id.x * 44 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block44[id.x * 44 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block44[id.x * 44 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block44[id.x * 44 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block44[id.x * 44 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block44[id.x * 44 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block44[id.x * 44 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block44[id.x * 44 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block44[id.x * 44 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block44[id.x * 44 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block44[id.x * 44 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block44[id.x * 44 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block44[id.x * 44 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block44[id.x * 44 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block44[id.x * 44 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block44[id.x * 44 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block44[id.x * 44 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block44[id.x * 44 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block44[id.x * 44 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block44[id.x * 44 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block44[id.x * 44 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block44[id.x * 44 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block44[id.x * 44 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block44[id.x * 44 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block44[id.x * 44 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block44[id.x * 44 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block44[id.x * 44 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block44[id.x * 44 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block44[id.x * 44 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block44[id.x * 44 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block44[id.x * 44 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block44[id.x * 44 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr43;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg43;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb43;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr43 = celr43 * W + regr[(44 & 1) ^ 1];
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg43 = celg43 * W + regg[(44 & 1) ^ 1];
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb43 = celb43 * W + regb[(44 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block44[id.x * 44 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block44[id.x * 44 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block44[id.x * 44 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block44[id.x * 44 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block44[id.x * 44 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block44[id.x * 44 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block44[id.x * 44 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block44[id.x * 44 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block44[id.x * 44 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block44[id.x * 44 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block44[id.x * 44 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block44[id.x * 44 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block44[id.x * 44 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block44[id.x * 44 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block44[id.x * 44 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block44[id.x * 44 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block44[id.x * 44 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block44[id.x * 44 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block44[id.x * 44 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block44[id.x * 44 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block44[id.x * 44 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block44[id.x * 44 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block44[id.x * 44 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block44[id.x * 44 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block44[id.x * 44 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block44[id.x * 44 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block44[id.x * 44 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block44[id.x * 44 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block44[id.x * 44 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block44[id.x * 44 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block44[id.x * 44 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block44[id.x * 44 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block44[id.x * 44 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block44[id.x * 44 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block44[id.x * 44 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block44[id.x * 44 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block44[id.x * 44 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block44[id.x * 44 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block44[id.x * 44 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block44[id.x * 44 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block44[id.x * 44 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block44[id.x * 44 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block44[id.x * 44 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block44[id.x * 44 + 43] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block44[0 * TPB + id.x];
	STORE(0, i, 44);
	i = block44[1 * TPB + id.x];
	STORE(1, i, 44);
	i = block44[2 * TPB + id.x];
	STORE(2, i, 44);
	i = block44[3 * TPB + id.x];
	STORE(3, i, 44);
	i = block44[4 * TPB + id.x];
	STORE(4, i, 44);
	i = block44[5 * TPB + id.x];
	STORE(5, i, 44);
	i = block44[6 * TPB + id.x];
	STORE(6, i, 44);
	i = block44[7 * TPB + id.x];
	STORE(7, i, 44);
	i = block44[8 * TPB + id.x];
	STORE(8, i, 44);
	i = block44[9 * TPB + id.x];
	STORE(9, i, 44);
	i = block44[10 * TPB + id.x];
	STORE(10, i, 44);
	i = block44[11 * TPB + id.x];
	STORE(11, i, 44);
	i = block44[12 * TPB + id.x];
	STORE(12, i, 44);
	i = block44[13 * TPB + id.x];
	STORE(13, i, 44);
	i = block44[14 * TPB + id.x];
	STORE(14, i, 44);
	i = block44[15 * TPB + id.x];
	STORE(15, i, 44);
	i = block44[16 * TPB + id.x];
	STORE(16, i, 44);
	i = block44[17 * TPB + id.x];
	STORE(17, i, 44);
	i = block44[18 * TPB + id.x];
	STORE(18, i, 44);
	i = block44[19 * TPB + id.x];
	STORE(19, i, 44);
	i = block44[20 * TPB + id.x];
	STORE(20, i, 44);
	i = block44[21 * TPB + id.x];
	STORE(21, i, 44);
	i = block44[22 * TPB + id.x];
	STORE(22, i, 44);
	i = block44[23 * TPB + id.x];
	STORE(23, i, 44);
	i = block44[24 * TPB + id.x];
	STORE(24, i, 44);
	i = block44[25 * TPB + id.x];
	STORE(25, i, 44);
	i = block44[26 * TPB + id.x];
	STORE(26, i, 44);
	i = block44[27 * TPB + id.x];
	STORE(27, i, 44);
	i = block44[28 * TPB + id.x];
	STORE(28, i, 44);
	i = block44[29 * TPB + id.x];
	STORE(29, i, 44);
	i = block44[30 * TPB + id.x];
	STORE(30, i, 44);
	i = block44[31 * TPB + id.x];
	STORE(31, i, 44);
	i = block44[32 * TPB + id.x];
	STORE(32, i, 44);
	i = block44[33 * TPB + id.x];
	STORE(33, i, 44);
	i = block44[34 * TPB + id.x];
	STORE(34, i, 44);
	i = block44[35 * TPB + id.x];
	STORE(35, i, 44);
	i = block44[36 * TPB + id.x];
	STORE(36, i, 44);
	i = block44[37 * TPB + id.x];
	STORE(37, i, 44);
	i = block44[38 * TPB + id.x];
	STORE(38, i, 44);
	i = block44[39 * TPB + id.x];
	STORE(39, i, 44);
	i = block44[40 * TPB + id.x];
	STORE(40, i, 44);
	i = block44[41 * TPB + id.x];
	STORE(41, i, 44);
	i = block44[42 * TPB + id.x];
	STORE(42, i, 44);
	i = block44[43 * TPB + id.x];
	STORE(43, i, 44);;
} 
[numthreads(TPB, 1, 1)] void XBlur46(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block46[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block46[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block46[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block46[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block46[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block46[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block46[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block46[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block46[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block46[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block46[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block46[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block46[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block46[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block46[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block46[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block46[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block46[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block46[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block46[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block46[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block46[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block46[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block46[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block46[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block46[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block46[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block46[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block46[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block46[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block46[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block46[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block46[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block46[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block46[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block46[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block46[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block46[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block46[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block46[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block46[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block46[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(42 * TPB + id.x, id.y)];
	block46[42 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(43 * TPB + id.x, id.y)];
	block46[43 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(44 * TPB + id.x, id.y)];
	block46[44 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(45 * TPB + id.x, id.y)];
	block46[45 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block46[id.x * 46 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block46[id.x * 46 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block46[id.x * 46 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block46[id.x * 46 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block46[id.x * 46 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block46[id.x * 46 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block46[id.x * 46 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block46[id.x * 46 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block46[id.x * 46 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block46[id.x * 46 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block46[id.x * 46 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block46[id.x * 46 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block46[id.x * 46 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block46[id.x * 46 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block46[id.x * 46 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block46[id.x * 46 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block46[id.x * 46 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block46[id.x * 46 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block46[id.x * 46 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block46[id.x * 46 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block46[id.x * 46 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block46[id.x * 46 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block46[id.x * 46 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block46[id.x * 46 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block46[id.x * 46 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block46[id.x * 46 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block46[id.x * 46 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block46[id.x * 46 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block46[id.x * 46 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block46[id.x * 46 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block46[id.x * 46 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block46[id.x * 46 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block46[id.x * 46 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block46[id.x * 46 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block46[id.x * 46 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block46[id.x * 46 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block46[id.x * 46 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block46[id.x * 46 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block46[id.x * 46 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block46[id.x * 46 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block46[id.x * 46 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block46[id.x * 46 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block46[id.x * 46 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block46[id.x * 46 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block46[id.x * 46 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block46[id.x * 46 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr45;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg45;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb45;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr45 = celr45 * W + regr[(46 & 1) ^ 1];
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg45 = celg45 * W + regg[(46 & 1) ^ 1];
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb45 = celb45 * W + regb[(46 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block46[id.x * 46 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block46[id.x * 46 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block46[id.x * 46 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block46[id.x * 46 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block46[id.x * 46 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block46[id.x * 46 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block46[id.x * 46 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block46[id.x * 46 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block46[id.x * 46 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block46[id.x * 46 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block46[id.x * 46 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block46[id.x * 46 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block46[id.x * 46 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block46[id.x * 46 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block46[id.x * 46 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block46[id.x * 46 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block46[id.x * 46 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block46[id.x * 46 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block46[id.x * 46 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block46[id.x * 46 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block46[id.x * 46 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block46[id.x * 46 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block46[id.x * 46 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block46[id.x * 46 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block46[id.x * 46 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block46[id.x * 46 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block46[id.x * 46 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block46[id.x * 46 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block46[id.x * 46 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block46[id.x * 46 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block46[id.x * 46 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block46[id.x * 46 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block46[id.x * 46 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block46[id.x * 46 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block46[id.x * 46 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block46[id.x * 46 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block46[id.x * 46 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block46[id.x * 46 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block46[id.x * 46 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block46[id.x * 46 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block46[id.x * 46 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block46[id.x * 46 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block46[id.x * 46 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block46[id.x * 46 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block46[id.x * 46 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block46[id.x * 46 + 45] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block46[0 * TPB + id.x];
	STORE(0, i, 46);
	i = block46[1 * TPB + id.x];
	STORE(1, i, 46);
	i = block46[2 * TPB + id.x];
	STORE(2, i, 46);
	i = block46[3 * TPB + id.x];
	STORE(3, i, 46);
	i = block46[4 * TPB + id.x];
	STORE(4, i, 46);
	i = block46[5 * TPB + id.x];
	STORE(5, i, 46);
	i = block46[6 * TPB + id.x];
	STORE(6, i, 46);
	i = block46[7 * TPB + id.x];
	STORE(7, i, 46);
	i = block46[8 * TPB + id.x];
	STORE(8, i, 46);
	i = block46[9 * TPB + id.x];
	STORE(9, i, 46);
	i = block46[10 * TPB + id.x];
	STORE(10, i, 46);
	i = block46[11 * TPB + id.x];
	STORE(11, i, 46);
	i = block46[12 * TPB + id.x];
	STORE(12, i, 46);
	i = block46[13 * TPB + id.x];
	STORE(13, i, 46);
	i = block46[14 * TPB + id.x];
	STORE(14, i, 46);
	i = block46[15 * TPB + id.x];
	STORE(15, i, 46);
	i = block46[16 * TPB + id.x];
	STORE(16, i, 46);
	i = block46[17 * TPB + id.x];
	STORE(17, i, 46);
	i = block46[18 * TPB + id.x];
	STORE(18, i, 46);
	i = block46[19 * TPB + id.x];
	STORE(19, i, 46);
	i = block46[20 * TPB + id.x];
	STORE(20, i, 46);
	i = block46[21 * TPB + id.x];
	STORE(21, i, 46);
	i = block46[22 * TPB + id.x];
	STORE(22, i, 46);
	i = block46[23 * TPB + id.x];
	STORE(23, i, 46);
	i = block46[24 * TPB + id.x];
	STORE(24, i, 46);
	i = block46[25 * TPB + id.x];
	STORE(25, i, 46);
	i = block46[26 * TPB + id.x];
	STORE(26, i, 46);
	i = block46[27 * TPB + id.x];
	STORE(27, i, 46);
	i = block46[28 * TPB + id.x];
	STORE(28, i, 46);
	i = block46[29 * TPB + id.x];
	STORE(29, i, 46);
	i = block46[30 * TPB + id.x];
	STORE(30, i, 46);
	i = block46[31 * TPB + id.x];
	STORE(31, i, 46);
	i = block46[32 * TPB + id.x];
	STORE(32, i, 46);
	i = block46[33 * TPB + id.x];
	STORE(33, i, 46);
	i = block46[34 * TPB + id.x];
	STORE(34, i, 46);
	i = block46[35 * TPB + id.x];
	STORE(35, i, 46);
	i = block46[36 * TPB + id.x];
	STORE(36, i, 46);
	i = block46[37 * TPB + id.x];
	STORE(37, i, 46);
	i = block46[38 * TPB + id.x];
	STORE(38, i, 46);
	i = block46[39 * TPB + id.x];
	STORE(39, i, 46);
	i = block46[40 * TPB + id.x];
	STORE(40, i, 46);
	i = block46[41 * TPB + id.x];
	STORE(41, i, 46);
	i = block46[42 * TPB + id.x];
	STORE(42, i, 46);
	i = block46[43 * TPB + id.x];
	STORE(43, i, 46);
	i = block46[44 * TPB + id.x];
	STORE(44, i, 46);
	i = block46[45 * TPB + id.x];
	STORE(45, i, 46);;
} 
[numthreads(TPB, 1, 1)] void XBlur48(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block48[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block48[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block48[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block48[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block48[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block48[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block48[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block48[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block48[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block48[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block48[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block48[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block48[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block48[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block48[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block48[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block48[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block48[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block48[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block48[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block48[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block48[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block48[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block48[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block48[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block48[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block48[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block48[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block48[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block48[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block48[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block48[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block48[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block48[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block48[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block48[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block48[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block48[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block48[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block48[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block48[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block48[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(42 * TPB + id.x, id.y)];
	block48[42 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(43 * TPB + id.x, id.y)];
	block48[43 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(44 * TPB + id.x, id.y)];
	block48[44 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(45 * TPB + id.x, id.y)];
	block48[45 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(46 * TPB + id.x, id.y)];
	block48[46 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(47 * TPB + id.x, id.y)];
	block48[47 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block48[id.x * 48 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block48[id.x * 48 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block48[id.x * 48 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block48[id.x * 48 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block48[id.x * 48 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block48[id.x * 48 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block48[id.x * 48 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block48[id.x * 48 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block48[id.x * 48 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block48[id.x * 48 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block48[id.x * 48 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block48[id.x * 48 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block48[id.x * 48 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block48[id.x * 48 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block48[id.x * 48 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block48[id.x * 48 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block48[id.x * 48 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block48[id.x * 48 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block48[id.x * 48 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block48[id.x * 48 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block48[id.x * 48 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block48[id.x * 48 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block48[id.x * 48 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block48[id.x * 48 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block48[id.x * 48 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block48[id.x * 48 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block48[id.x * 48 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block48[id.x * 48 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block48[id.x * 48 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block48[id.x * 48 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block48[id.x * 48 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block48[id.x * 48 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block48[id.x * 48 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block48[id.x * 48 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block48[id.x * 48 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block48[id.x * 48 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block48[id.x * 48 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block48[id.x * 48 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block48[id.x * 48 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block48[id.x * 48 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block48[id.x * 48 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block48[id.x * 48 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block48[id.x * 48 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block48[id.x * 48 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block48[id.x * 48 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block48[id.x * 48 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block48[id.x * 48 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block48[id.x * 48 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr47;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg47;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb47;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr47 = celr47 * W + regr[(48 & 1) ^ 1];
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg47 = celg47 * W + regg[(48 & 1) ^ 1];
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb47 = celb47 * W + regb[(48 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block48[id.x * 48 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block48[id.x * 48 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block48[id.x * 48 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block48[id.x * 48 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block48[id.x * 48 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block48[id.x * 48 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block48[id.x * 48 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block48[id.x * 48 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block48[id.x * 48 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block48[id.x * 48 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block48[id.x * 48 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block48[id.x * 48 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block48[id.x * 48 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block48[id.x * 48 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block48[id.x * 48 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block48[id.x * 48 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block48[id.x * 48 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block48[id.x * 48 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block48[id.x * 48 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block48[id.x * 48 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block48[id.x * 48 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block48[id.x * 48 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block48[id.x * 48 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block48[id.x * 48 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block48[id.x * 48 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block48[id.x * 48 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block48[id.x * 48 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block48[id.x * 48 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block48[id.x * 48 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block48[id.x * 48 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block48[id.x * 48 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block48[id.x * 48 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block48[id.x * 48 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block48[id.x * 48 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block48[id.x * 48 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block48[id.x * 48 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block48[id.x * 48 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block48[id.x * 48 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block48[id.x * 48 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block48[id.x * 48 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block48[id.x * 48 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block48[id.x * 48 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block48[id.x * 48 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block48[id.x * 48 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block48[id.x * 48 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block48[id.x * 48 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block48[id.x * 48 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block48[id.x * 48 + 47] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block48[0 * TPB + id.x];
	STORE(0, i, 48);
	i = block48[1 * TPB + id.x];
	STORE(1, i, 48);
	i = block48[2 * TPB + id.x];
	STORE(2, i, 48);
	i = block48[3 * TPB + id.x];
	STORE(3, i, 48);
	i = block48[4 * TPB + id.x];
	STORE(4, i, 48);
	i = block48[5 * TPB + id.x];
	STORE(5, i, 48);
	i = block48[6 * TPB + id.x];
	STORE(6, i, 48);
	i = block48[7 * TPB + id.x];
	STORE(7, i, 48);
	i = block48[8 * TPB + id.x];
	STORE(8, i, 48);
	i = block48[9 * TPB + id.x];
	STORE(9, i, 48);
	i = block48[10 * TPB + id.x];
	STORE(10, i, 48);
	i = block48[11 * TPB + id.x];
	STORE(11, i, 48);
	i = block48[12 * TPB + id.x];
	STORE(12, i, 48);
	i = block48[13 * TPB + id.x];
	STORE(13, i, 48);
	i = block48[14 * TPB + id.x];
	STORE(14, i, 48);
	i = block48[15 * TPB + id.x];
	STORE(15, i, 48);
	i = block48[16 * TPB + id.x];
	STORE(16, i, 48);
	i = block48[17 * TPB + id.x];
	STORE(17, i, 48);
	i = block48[18 * TPB + id.x];
	STORE(18, i, 48);
	i = block48[19 * TPB + id.x];
	STORE(19, i, 48);
	i = block48[20 * TPB + id.x];
	STORE(20, i, 48);
	i = block48[21 * TPB + id.x];
	STORE(21, i, 48);
	i = block48[22 * TPB + id.x];
	STORE(22, i, 48);
	i = block48[23 * TPB + id.x];
	STORE(23, i, 48);
	i = block48[24 * TPB + id.x];
	STORE(24, i, 48);
	i = block48[25 * TPB + id.x];
	STORE(25, i, 48);
	i = block48[26 * TPB + id.x];
	STORE(26, i, 48);
	i = block48[27 * TPB + id.x];
	STORE(27, i, 48);
	i = block48[28 * TPB + id.x];
	STORE(28, i, 48);
	i = block48[29 * TPB + id.x];
	STORE(29, i, 48);
	i = block48[30 * TPB + id.x];
	STORE(30, i, 48);
	i = block48[31 * TPB + id.x];
	STORE(31, i, 48);
	i = block48[32 * TPB + id.x];
	STORE(32, i, 48);
	i = block48[33 * TPB + id.x];
	STORE(33, i, 48);
	i = block48[34 * TPB + id.x];
	STORE(34, i, 48);
	i = block48[35 * TPB + id.x];
	STORE(35, i, 48);
	i = block48[36 * TPB + id.x];
	STORE(36, i, 48);
	i = block48[37 * TPB + id.x];
	STORE(37, i, 48);
	i = block48[38 * TPB + id.x];
	STORE(38, i, 48);
	i = block48[39 * TPB + id.x];
	STORE(39, i, 48);
	i = block48[40 * TPB + id.x];
	STORE(40, i, 48);
	i = block48[41 * TPB + id.x];
	STORE(41, i, 48);
	i = block48[42 * TPB + id.x];
	STORE(42, i, 48);
	i = block48[43 * TPB + id.x];
	STORE(43, i, 48);
	i = block48[44 * TPB + id.x];
	STORE(44, i, 48);
	i = block48[45 * TPB + id.x];
	STORE(45, i, 48);
	i = block48[46 * TPB + id.x];
	STORE(46, i, 48);
	i = block48[47 * TPB + id.x];
	STORE(47, i, 48);;
} 
[numthreads(TPB, 1, 1)] void XBlur50(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block50[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block50[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block50[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block50[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block50[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block50[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block50[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block50[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block50[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block50[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block50[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block50[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block50[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block50[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block50[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block50[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block50[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block50[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block50[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block50[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block50[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block50[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block50[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block50[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block50[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block50[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block50[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block50[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block50[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block50[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block50[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block50[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block50[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block50[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block50[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block50[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block50[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block50[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block50[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block50[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block50[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block50[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(42 * TPB + id.x, id.y)];
	block50[42 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(43 * TPB + id.x, id.y)];
	block50[43 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(44 * TPB + id.x, id.y)];
	block50[44 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(45 * TPB + id.x, id.y)];
	block50[45 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(46 * TPB + id.x, id.y)];
	block50[46 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(47 * TPB + id.x, id.y)];
	block50[47 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(48 * TPB + id.x, id.y)];
	block50[48 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(49 * TPB + id.x, id.y)];
	block50[49 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block50[id.x * 50 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block50[id.x * 50 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block50[id.x * 50 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block50[id.x * 50 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block50[id.x * 50 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block50[id.x * 50 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block50[id.x * 50 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block50[id.x * 50 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block50[id.x * 50 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block50[id.x * 50 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block50[id.x * 50 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block50[id.x * 50 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block50[id.x * 50 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block50[id.x * 50 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block50[id.x * 50 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block50[id.x * 50 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block50[id.x * 50 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block50[id.x * 50 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block50[id.x * 50 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block50[id.x * 50 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block50[id.x * 50 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block50[id.x * 50 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block50[id.x * 50 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block50[id.x * 50 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block50[id.x * 50 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block50[id.x * 50 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block50[id.x * 50 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block50[id.x * 50 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block50[id.x * 50 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block50[id.x * 50 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block50[id.x * 50 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block50[id.x * 50 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block50[id.x * 50 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block50[id.x * 50 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block50[id.x * 50 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block50[id.x * 50 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block50[id.x * 50 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block50[id.x * 50 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block50[id.x * 50 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block50[id.x * 50 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block50[id.x * 50 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block50[id.x * 50 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block50[id.x * 50 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block50[id.x * 50 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block50[id.x * 50 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block50[id.x * 50 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block50[id.x * 50 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block50[id.x * 50 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block50[id.x * 50 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block50[id.x * 50 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr49;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg49;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb49;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];;
		regr[(50 & 1) ^ 1] = regr[(50 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr49 = celr49 * W + regr[(50 & 1) ^ 1];
		regg[(50 & 1) ^ 1] = regg[(50 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg49 = celg49 * W + regg[(50 & 1) ^ 1];
		regb[(50 & 1) ^ 1] = regb[(50 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb49 = celb49 * W + regb[(50 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block50[id.x * 50 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block50[id.x * 50 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block50[id.x * 50 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block50[id.x * 50 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block50[id.x * 50 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block50[id.x * 50 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block50[id.x * 50 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block50[id.x * 50 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block50[id.x * 50 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block50[id.x * 50 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block50[id.x * 50 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block50[id.x * 50 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block50[id.x * 50 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block50[id.x * 50 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block50[id.x * 50 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block50[id.x * 50 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block50[id.x * 50 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block50[id.x * 50 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block50[id.x * 50 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block50[id.x * 50 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block50[id.x * 50 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block50[id.x * 50 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block50[id.x * 50 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block50[id.x * 50 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block50[id.x * 50 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block50[id.x * 50 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block50[id.x * 50 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block50[id.x * 50 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block50[id.x * 50 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block50[id.x * 50 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block50[id.x * 50 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block50[id.x * 50 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block50[id.x * 50 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block50[id.x * 50 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block50[id.x * 50 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block50[id.x * 50 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block50[id.x * 50 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block50[id.x * 50 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block50[id.x * 50 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block50[id.x * 50 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block50[id.x * 50 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block50[id.x * 50 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block50[id.x * 50 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block50[id.x * 50 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block50[id.x * 50 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block50[id.x * 50 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block50[id.x * 50 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block50[id.x * 50 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block50[id.x * 50 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block50[id.x * 50 + 49] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block50[0 * TPB + id.x];
	STORE(0, i, 50);
	i = block50[1 * TPB + id.x];
	STORE(1, i, 50);
	i = block50[2 * TPB + id.x];
	STORE(2, i, 50);
	i = block50[3 * TPB + id.x];
	STORE(3, i, 50);
	i = block50[4 * TPB + id.x];
	STORE(4, i, 50);
	i = block50[5 * TPB + id.x];
	STORE(5, i, 50);
	i = block50[6 * TPB + id.x];
	STORE(6, i, 50);
	i = block50[7 * TPB + id.x];
	STORE(7, i, 50);
	i = block50[8 * TPB + id.x];
	STORE(8, i, 50);
	i = block50[9 * TPB + id.x];
	STORE(9, i, 50);
	i = block50[10 * TPB + id.x];
	STORE(10, i, 50);
	i = block50[11 * TPB + id.x];
	STORE(11, i, 50);
	i = block50[12 * TPB + id.x];
	STORE(12, i, 50);
	i = block50[13 * TPB + id.x];
	STORE(13, i, 50);
	i = block50[14 * TPB + id.x];
	STORE(14, i, 50);
	i = block50[15 * TPB + id.x];
	STORE(15, i, 50);
	i = block50[16 * TPB + id.x];
	STORE(16, i, 50);
	i = block50[17 * TPB + id.x];
	STORE(17, i, 50);
	i = block50[18 * TPB + id.x];
	STORE(18, i, 50);
	i = block50[19 * TPB + id.x];
	STORE(19, i, 50);
	i = block50[20 * TPB + id.x];
	STORE(20, i, 50);
	i = block50[21 * TPB + id.x];
	STORE(21, i, 50);
	i = block50[22 * TPB + id.x];
	STORE(22, i, 50);
	i = block50[23 * TPB + id.x];
	STORE(23, i, 50);
	i = block50[24 * TPB + id.x];
	STORE(24, i, 50);
	i = block50[25 * TPB + id.x];
	STORE(25, i, 50);
	i = block50[26 * TPB + id.x];
	STORE(26, i, 50);
	i = block50[27 * TPB + id.x];
	STORE(27, i, 50);
	i = block50[28 * TPB + id.x];
	STORE(28, i, 50);
	i = block50[29 * TPB + id.x];
	STORE(29, i, 50);
	i = block50[30 * TPB + id.x];
	STORE(30, i, 50);
	i = block50[31 * TPB + id.x];
	STORE(31, i, 50);
	i = block50[32 * TPB + id.x];
	STORE(32, i, 50);
	i = block50[33 * TPB + id.x];
	STORE(33, i, 50);
	i = block50[34 * TPB + id.x];
	STORE(34, i, 50);
	i = block50[35 * TPB + id.x];
	STORE(35, i, 50);
	i = block50[36 * TPB + id.x];
	STORE(36, i, 50);
	i = block50[37 * TPB + id.x];
	STORE(37, i, 50);
	i = block50[38 * TPB + id.x];
	STORE(38, i, 50);
	i = block50[39 * TPB + id.x];
	STORE(39, i, 50);
	i = block50[40 * TPB + id.x];
	STORE(40, i, 50);
	i = block50[41 * TPB + id.x];
	STORE(41, i, 50);
	i = block50[42 * TPB + id.x];
	STORE(42, i, 50);
	i = block50[43 * TPB + id.x];
	STORE(43, i, 50);
	i = block50[44 * TPB + id.x];
	STORE(44, i, 50);
	i = block50[45 * TPB + id.x];
	STORE(45, i, 50);
	i = block50[46 * TPB + id.x];
	STORE(46, i, 50);
	i = block50[47 * TPB + id.x];
	STORE(47, i, 50);
	i = block50[48 * TPB + id.x];
	STORE(48, i, 50);
	i = block50[49 * TPB + id.x];
	STORE(49, i, 50);;
} 
[numthreads(TPB, 1, 1)] void XBlur52(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;
	float celr50;
	float celg50;
	float celb50;
	float celr51;
	float celg51;
	float celb51;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block52[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block52[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block52[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block52[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block52[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block52[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block52[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block52[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block52[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block52[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block52[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block52[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block52[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block52[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block52[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block52[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block52[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block52[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block52[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block52[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block52[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block52[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block52[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block52[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block52[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block52[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block52[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block52[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block52[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block52[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block52[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block52[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block52[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block52[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block52[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block52[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block52[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block52[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block52[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block52[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block52[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block52[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(42 * TPB + id.x, id.y)];
	block52[42 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(43 * TPB + id.x, id.y)];
	block52[43 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(44 * TPB + id.x, id.y)];
	block52[44 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(45 * TPB + id.x, id.y)];
	block52[45 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(46 * TPB + id.x, id.y)];
	block52[46 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(47 * TPB + id.x, id.y)];
	block52[47 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(48 * TPB + id.x, id.y)];
	block52[48 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(49 * TPB + id.x, id.y)];
	block52[49 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(50 * TPB + id.x, id.y)];
	block52[50 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(51 * TPB + id.x, id.y)];
	block52[51 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block52[id.x * 52 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block52[id.x * 52 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block52[id.x * 52 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block52[id.x * 52 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block52[id.x * 52 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block52[id.x * 52 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block52[id.x * 52 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block52[id.x * 52 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block52[id.x * 52 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block52[id.x * 52 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block52[id.x * 52 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block52[id.x * 52 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block52[id.x * 52 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block52[id.x * 52 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block52[id.x * 52 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block52[id.x * 52 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block52[id.x * 52 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block52[id.x * 52 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block52[id.x * 52 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block52[id.x * 52 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block52[id.x * 52 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block52[id.x * 52 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block52[id.x * 52 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block52[id.x * 52 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block52[id.x * 52 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block52[id.x * 52 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block52[id.x * 52 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block52[id.x * 52 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block52[id.x * 52 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block52[id.x * 52 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block52[id.x * 52 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block52[id.x * 52 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block52[id.x * 52 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block52[id.x * 52 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block52[id.x * 52 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block52[id.x * 52 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block52[id.x * 52 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block52[id.x * 52 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block52[id.x * 52 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block52[id.x * 52 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block52[id.x * 52 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block52[id.x * 52 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block52[id.x * 52 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block52[id.x * 52 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block52[id.x * 52 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block52[id.x * 52 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block52[id.x * 52 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block52[id.x * 52 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block52[id.x * 52 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block52[id.x * 52 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);
	i = block52[id.x * 52 + 50];
	celr50 = (i % 256);
	celg50 = (i / 256 % 256);
	celb50 = (i / 65536 % 256);
	i = block52[id.x * 52 + 51];
	celr51 = (i % 256);
	celg51 = (i / 256 % 256);
	celb51 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr51;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg51;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb51;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];
		regr[48 & 1] = celr49 * WLR;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + celr50 * WLR;
		celr49 = celr49 * W + regr[(48 & 1) ^ 1];
		regg[48 & 1] = celg49 * WLR;
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + celg50 * WLR;
		celg49 = celg49 * W + regg[(48 & 1) ^ 1];
		regb[48 & 1] = celb49 * WLR;
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + celb50 * WLR;
		celb49 = celb49 * W + regb[(48 & 1) ^ 1];
		regr[49 & 1] = celr50 * WLR;
		regr[(49 & 1) ^ 1] = regr[(49 & 1) ^ 1] + celr51 * WLR;
		celr50 = celr50 * W + regr[(49 & 1) ^ 1];
		regg[49 & 1] = celg50 * WLR;
		regg[(49 & 1) ^ 1] = regg[(49 & 1) ^ 1] + celg51 * WLR;
		celg50 = celg50 * W + regg[(49 & 1) ^ 1];
		regb[49 & 1] = celb50 * WLR;
		regb[(49 & 1) ^ 1] = regb[(49 & 1) ^ 1] + celb51 * WLR;
		celb50 = celb50 * W + regb[(49 & 1) ^ 1];;
		regr[(52 & 1) ^ 1] = regr[(52 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr51 = celr51 * W + regr[(52 & 1) ^ 1];
		regg[(52 & 1) ^ 1] = regg[(52 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg51 = celg51 * W + regg[(52 & 1) ^ 1];
		regb[(52 & 1) ^ 1] = regb[(52 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb51 = celb51 * W + regb[(52 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block52[id.x * 52 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block52[id.x * 52 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block52[id.x * 52 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block52[id.x * 52 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block52[id.x * 52 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block52[id.x * 52 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block52[id.x * 52 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block52[id.x * 52 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block52[id.x * 52 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block52[id.x * 52 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block52[id.x * 52 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block52[id.x * 52 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block52[id.x * 52 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block52[id.x * 52 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block52[id.x * 52 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block52[id.x * 52 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block52[id.x * 52 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block52[id.x * 52 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block52[id.x * 52 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block52[id.x * 52 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block52[id.x * 52 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block52[id.x * 52 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block52[id.x * 52 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block52[id.x * 52 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block52[id.x * 52 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block52[id.x * 52 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block52[id.x * 52 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block52[id.x * 52 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block52[id.x * 52 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block52[id.x * 52 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block52[id.x * 52 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block52[id.x * 52 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block52[id.x * 52 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block52[id.x * 52 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block52[id.x * 52 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block52[id.x * 52 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block52[id.x * 52 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block52[id.x * 52 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block52[id.x * 52 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block52[id.x * 52 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block52[id.x * 52 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block52[id.x * 52 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block52[id.x * 52 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block52[id.x * 52 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block52[id.x * 52 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block52[id.x * 52 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block52[id.x * 52 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block52[id.x * 52 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block52[id.x * 52 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block52[id.x * 52 + 49] = i;
	i = ((uint)celr50) + 256 * ((uint)celg50) + 65536 * ((uint)celb50);
	block52[id.x * 52 + 50] = i;
	i = ((uint)celr51) + 256 * ((uint)celg51) + 65536 * ((uint)celb51);
	block52[id.x * 52 + 51] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block52[0 * TPB + id.x];
	STORE(0, i, 52);
	i = block52[1 * TPB + id.x];
	STORE(1, i, 52);
	i = block52[2 * TPB + id.x];
	STORE(2, i, 52);
	i = block52[3 * TPB + id.x];
	STORE(3, i, 52);
	i = block52[4 * TPB + id.x];
	STORE(4, i, 52);
	i = block52[5 * TPB + id.x];
	STORE(5, i, 52);
	i = block52[6 * TPB + id.x];
	STORE(6, i, 52);
	i = block52[7 * TPB + id.x];
	STORE(7, i, 52);
	i = block52[8 * TPB + id.x];
	STORE(8, i, 52);
	i = block52[9 * TPB + id.x];
	STORE(9, i, 52);
	i = block52[10 * TPB + id.x];
	STORE(10, i, 52);
	i = block52[11 * TPB + id.x];
	STORE(11, i, 52);
	i = block52[12 * TPB + id.x];
	STORE(12, i, 52);
	i = block52[13 * TPB + id.x];
	STORE(13, i, 52);
	i = block52[14 * TPB + id.x];
	STORE(14, i, 52);
	i = block52[15 * TPB + id.x];
	STORE(15, i, 52);
	i = block52[16 * TPB + id.x];
	STORE(16, i, 52);
	i = block52[17 * TPB + id.x];
	STORE(17, i, 52);
	i = block52[18 * TPB + id.x];
	STORE(18, i, 52);
	i = block52[19 * TPB + id.x];
	STORE(19, i, 52);
	i = block52[20 * TPB + id.x];
	STORE(20, i, 52);
	i = block52[21 * TPB + id.x];
	STORE(21, i, 52);
	i = block52[22 * TPB + id.x];
	STORE(22, i, 52);
	i = block52[23 * TPB + id.x];
	STORE(23, i, 52);
	i = block52[24 * TPB + id.x];
	STORE(24, i, 52);
	i = block52[25 * TPB + id.x];
	STORE(25, i, 52);
	i = block52[26 * TPB + id.x];
	STORE(26, i, 52);
	i = block52[27 * TPB + id.x];
	STORE(27, i, 52);
	i = block52[28 * TPB + id.x];
	STORE(28, i, 52);
	i = block52[29 * TPB + id.x];
	STORE(29, i, 52);
	i = block52[30 * TPB + id.x];
	STORE(30, i, 52);
	i = block52[31 * TPB + id.x];
	STORE(31, i, 52);
	i = block52[32 * TPB + id.x];
	STORE(32, i, 52);
	i = block52[33 * TPB + id.x];
	STORE(33, i, 52);
	i = block52[34 * TPB + id.x];
	STORE(34, i, 52);
	i = block52[35 * TPB + id.x];
	STORE(35, i, 52);
	i = block52[36 * TPB + id.x];
	STORE(36, i, 52);
	i = block52[37 * TPB + id.x];
	STORE(37, i, 52);
	i = block52[38 * TPB + id.x];
	STORE(38, i, 52);
	i = block52[39 * TPB + id.x];
	STORE(39, i, 52);
	i = block52[40 * TPB + id.x];
	STORE(40, i, 52);
	i = block52[41 * TPB + id.x];
	STORE(41, i, 52);
	i = block52[42 * TPB + id.x];
	STORE(42, i, 52);
	i = block52[43 * TPB + id.x];
	STORE(43, i, 52);
	i = block52[44 * TPB + id.x];
	STORE(44, i, 52);
	i = block52[45 * TPB + id.x];
	STORE(45, i, 52);
	i = block52[46 * TPB + id.x];
	STORE(46, i, 52);
	i = block52[47 * TPB + id.x];
	STORE(47, i, 52);
	i = block52[48 * TPB + id.x];
	STORE(48, i, 52);
	i = block52[49 * TPB + id.x];
	STORE(49, i, 52);
	i = block52[50 * TPB + id.x];
	STORE(50, i, 52);
	i = block52[51 * TPB + id.x];
	STORE(51, i, 52);;
} 
[numthreads(TPB, 1, 1)] void XBlur54(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;
	float celr50;
	float celg50;
	float celb50;
	float celr51;
	float celg51;
	float celb51;
	float celr52;
	float celg52;
	float celb52;
	float celr53;
	float celg53;
	float celb53;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block54[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block54[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block54[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block54[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block54[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block54[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block54[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block54[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block54[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block54[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block54[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block54[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block54[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block54[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block54[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block54[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block54[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block54[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block54[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block54[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block54[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block54[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block54[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block54[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block54[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block54[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block54[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block54[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block54[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block54[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block54[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block54[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block54[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block54[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block54[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block54[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block54[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block54[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block54[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block54[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block54[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block54[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(42 * TPB + id.x, id.y)];
	block54[42 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(43 * TPB + id.x, id.y)];
	block54[43 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(44 * TPB + id.x, id.y)];
	block54[44 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(45 * TPB + id.x, id.y)];
	block54[45 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(46 * TPB + id.x, id.y)];
	block54[46 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(47 * TPB + id.x, id.y)];
	block54[47 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(48 * TPB + id.x, id.y)];
	block54[48 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(49 * TPB + id.x, id.y)];
	block54[49 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(50 * TPB + id.x, id.y)];
	block54[50 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(51 * TPB + id.x, id.y)];
	block54[51 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(52 * TPB + id.x, id.y)];
	block54[52 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(53 * TPB + id.x, id.y)];
	block54[53 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block54[id.x * 54 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block54[id.x * 54 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block54[id.x * 54 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block54[id.x * 54 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block54[id.x * 54 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block54[id.x * 54 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block54[id.x * 54 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block54[id.x * 54 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block54[id.x * 54 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block54[id.x * 54 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block54[id.x * 54 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block54[id.x * 54 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block54[id.x * 54 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block54[id.x * 54 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block54[id.x * 54 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block54[id.x * 54 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block54[id.x * 54 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block54[id.x * 54 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block54[id.x * 54 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block54[id.x * 54 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block54[id.x * 54 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block54[id.x * 54 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block54[id.x * 54 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block54[id.x * 54 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block54[id.x * 54 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block54[id.x * 54 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block54[id.x * 54 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block54[id.x * 54 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block54[id.x * 54 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block54[id.x * 54 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block54[id.x * 54 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block54[id.x * 54 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block54[id.x * 54 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block54[id.x * 54 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block54[id.x * 54 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block54[id.x * 54 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block54[id.x * 54 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block54[id.x * 54 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block54[id.x * 54 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block54[id.x * 54 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block54[id.x * 54 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block54[id.x * 54 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block54[id.x * 54 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block54[id.x * 54 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block54[id.x * 54 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block54[id.x * 54 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block54[id.x * 54 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block54[id.x * 54 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block54[id.x * 54 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block54[id.x * 54 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);
	i = block54[id.x * 54 + 50];
	celr50 = (i % 256);
	celg50 = (i / 256 % 256);
	celb50 = (i / 65536 % 256);
	i = block54[id.x * 54 + 51];
	celr51 = (i % 256);
	celg51 = (i / 256 % 256);
	celb51 = (i / 65536 % 256);
	i = block54[id.x * 54 + 52];
	celr52 = (i % 256);
	celg52 = (i / 256 % 256);
	celb52 = (i / 65536 % 256);
	i = block54[id.x * 54 + 53];
	celr53 = (i % 256);
	celg53 = (i / 256 % 256);
	celb53 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr53;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg53;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb53;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];
		regr[48 & 1] = celr49 * WLR;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + celr50 * WLR;
		celr49 = celr49 * W + regr[(48 & 1) ^ 1];
		regg[48 & 1] = celg49 * WLR;
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + celg50 * WLR;
		celg49 = celg49 * W + regg[(48 & 1) ^ 1];
		regb[48 & 1] = celb49 * WLR;
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + celb50 * WLR;
		celb49 = celb49 * W + regb[(48 & 1) ^ 1];
		regr[49 & 1] = celr50 * WLR;
		regr[(49 & 1) ^ 1] = regr[(49 & 1) ^ 1] + celr51 * WLR;
		celr50 = celr50 * W + regr[(49 & 1) ^ 1];
		regg[49 & 1] = celg50 * WLR;
		regg[(49 & 1) ^ 1] = regg[(49 & 1) ^ 1] + celg51 * WLR;
		celg50 = celg50 * W + regg[(49 & 1) ^ 1];
		regb[49 & 1] = celb50 * WLR;
		regb[(49 & 1) ^ 1] = regb[(49 & 1) ^ 1] + celb51 * WLR;
		celb50 = celb50 * W + regb[(49 & 1) ^ 1];
		regr[50 & 1] = celr51 * WLR;
		regr[(50 & 1) ^ 1] = regr[(50 & 1) ^ 1] + celr52 * WLR;
		celr51 = celr51 * W + regr[(50 & 1) ^ 1];
		regg[50 & 1] = celg51 * WLR;
		regg[(50 & 1) ^ 1] = regg[(50 & 1) ^ 1] + celg52 * WLR;
		celg51 = celg51 * W + regg[(50 & 1) ^ 1];
		regb[50 & 1] = celb51 * WLR;
		regb[(50 & 1) ^ 1] = regb[(50 & 1) ^ 1] + celb52 * WLR;
		celb51 = celb51 * W + regb[(50 & 1) ^ 1];
		regr[51 & 1] = celr52 * WLR;
		regr[(51 & 1) ^ 1] = regr[(51 & 1) ^ 1] + celr53 * WLR;
		celr52 = celr52 * W + regr[(51 & 1) ^ 1];
		regg[51 & 1] = celg52 * WLR;
		regg[(51 & 1) ^ 1] = regg[(51 & 1) ^ 1] + celg53 * WLR;
		celg52 = celg52 * W + regg[(51 & 1) ^ 1];
		regb[51 & 1] = celb52 * WLR;
		regb[(51 & 1) ^ 1] = regb[(51 & 1) ^ 1] + celb53 * WLR;
		celb52 = celb52 * W + regb[(51 & 1) ^ 1];;
		regr[(54 & 1) ^ 1] = regr[(54 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr53 = celr53 * W + regr[(54 & 1) ^ 1];
		regg[(54 & 1) ^ 1] = regg[(54 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg53 = celg53 * W + regg[(54 & 1) ^ 1];
		regb[(54 & 1) ^ 1] = regb[(54 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb53 = celb53 * W + regb[(54 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block54[id.x * 54 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block54[id.x * 54 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block54[id.x * 54 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block54[id.x * 54 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block54[id.x * 54 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block54[id.x * 54 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block54[id.x * 54 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block54[id.x * 54 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block54[id.x * 54 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block54[id.x * 54 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block54[id.x * 54 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block54[id.x * 54 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block54[id.x * 54 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block54[id.x * 54 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block54[id.x * 54 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block54[id.x * 54 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block54[id.x * 54 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block54[id.x * 54 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block54[id.x * 54 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block54[id.x * 54 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block54[id.x * 54 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block54[id.x * 54 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block54[id.x * 54 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block54[id.x * 54 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block54[id.x * 54 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block54[id.x * 54 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block54[id.x * 54 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block54[id.x * 54 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block54[id.x * 54 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block54[id.x * 54 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block54[id.x * 54 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block54[id.x * 54 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block54[id.x * 54 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block54[id.x * 54 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block54[id.x * 54 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block54[id.x * 54 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block54[id.x * 54 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block54[id.x * 54 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block54[id.x * 54 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block54[id.x * 54 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block54[id.x * 54 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block54[id.x * 54 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block54[id.x * 54 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block54[id.x * 54 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block54[id.x * 54 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block54[id.x * 54 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block54[id.x * 54 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block54[id.x * 54 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block54[id.x * 54 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block54[id.x * 54 + 49] = i;
	i = ((uint)celr50) + 256 * ((uint)celg50) + 65536 * ((uint)celb50);
	block54[id.x * 54 + 50] = i;
	i = ((uint)celr51) + 256 * ((uint)celg51) + 65536 * ((uint)celb51);
	block54[id.x * 54 + 51] = i;
	i = ((uint)celr52) + 256 * ((uint)celg52) + 65536 * ((uint)celb52);
	block54[id.x * 54 + 52] = i;
	i = ((uint)celr53) + 256 * ((uint)celg53) + 65536 * ((uint)celb53);
	block54[id.x * 54 + 53] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block54[0 * TPB + id.x];
	STORE(0, i, 54);
	i = block54[1 * TPB + id.x];
	STORE(1, i, 54);
	i = block54[2 * TPB + id.x];
	STORE(2, i, 54);
	i = block54[3 * TPB + id.x];
	STORE(3, i, 54);
	i = block54[4 * TPB + id.x];
	STORE(4, i, 54);
	i = block54[5 * TPB + id.x];
	STORE(5, i, 54);
	i = block54[6 * TPB + id.x];
	STORE(6, i, 54);
	i = block54[7 * TPB + id.x];
	STORE(7, i, 54);
	i = block54[8 * TPB + id.x];
	STORE(8, i, 54);
	i = block54[9 * TPB + id.x];
	STORE(9, i, 54);
	i = block54[10 * TPB + id.x];
	STORE(10, i, 54);
	i = block54[11 * TPB + id.x];
	STORE(11, i, 54);
	i = block54[12 * TPB + id.x];
	STORE(12, i, 54);
	i = block54[13 * TPB + id.x];
	STORE(13, i, 54);
	i = block54[14 * TPB + id.x];
	STORE(14, i, 54);
	i = block54[15 * TPB + id.x];
	STORE(15, i, 54);
	i = block54[16 * TPB + id.x];
	STORE(16, i, 54);
	i = block54[17 * TPB + id.x];
	STORE(17, i, 54);
	i = block54[18 * TPB + id.x];
	STORE(18, i, 54);
	i = block54[19 * TPB + id.x];
	STORE(19, i, 54);
	i = block54[20 * TPB + id.x];
	STORE(20, i, 54);
	i = block54[21 * TPB + id.x];
	STORE(21, i, 54);
	i = block54[22 * TPB + id.x];
	STORE(22, i, 54);
	i = block54[23 * TPB + id.x];
	STORE(23, i, 54);
	i = block54[24 * TPB + id.x];
	STORE(24, i, 54);
	i = block54[25 * TPB + id.x];
	STORE(25, i, 54);
	i = block54[26 * TPB + id.x];
	STORE(26, i, 54);
	i = block54[27 * TPB + id.x];
	STORE(27, i, 54);
	i = block54[28 * TPB + id.x];
	STORE(28, i, 54);
	i = block54[29 * TPB + id.x];
	STORE(29, i, 54);
	i = block54[30 * TPB + id.x];
	STORE(30, i, 54);
	i = block54[31 * TPB + id.x];
	STORE(31, i, 54);
	i = block54[32 * TPB + id.x];
	STORE(32, i, 54);
	i = block54[33 * TPB + id.x];
	STORE(33, i, 54);
	i = block54[34 * TPB + id.x];
	STORE(34, i, 54);
	i = block54[35 * TPB + id.x];
	STORE(35, i, 54);
	i = block54[36 * TPB + id.x];
	STORE(36, i, 54);
	i = block54[37 * TPB + id.x];
	STORE(37, i, 54);
	i = block54[38 * TPB + id.x];
	STORE(38, i, 54);
	i = block54[39 * TPB + id.x];
	STORE(39, i, 54);
	i = block54[40 * TPB + id.x];
	STORE(40, i, 54);
	i = block54[41 * TPB + id.x];
	STORE(41, i, 54);
	i = block54[42 * TPB + id.x];
	STORE(42, i, 54);
	i = block54[43 * TPB + id.x];
	STORE(43, i, 54);
	i = block54[44 * TPB + id.x];
	STORE(44, i, 54);
	i = block54[45 * TPB + id.x];
	STORE(45, i, 54);
	i = block54[46 * TPB + id.x];
	STORE(46, i, 54);
	i = block54[47 * TPB + id.x];
	STORE(47, i, 54);
	i = block54[48 * TPB + id.x];
	STORE(48, i, 54);
	i = block54[49 * TPB + id.x];
	STORE(49, i, 54);
	i = block54[50 * TPB + id.x];
	STORE(50, i, 54);
	i = block54[51 * TPB + id.x];
	STORE(51, i, 54);
	i = block54[52 * TPB + id.x];
	STORE(52, i, 54);
	i = block54[53 * TPB + id.x];
	STORE(53, i, 54);;
} 
[numthreads(TPB, 1, 1)] void XBlur56(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;
	float celr50;
	float celg50;
	float celb50;
	float celr51;
	float celg51;
	float celb51;
	float celr52;
	float celg52;
	float celb52;
	float celr53;
	float celg53;
	float celb53;
	float celr54;
	float celg54;
	float celb54;
	float celr55;
	float celg55;
	float celb55;;
	f4 = Tex_ro[float2(0 * TPB + id.x, id.y)];
	block56[0 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(1 * TPB + id.x, id.y)];
	block56[1 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(2 * TPB + id.x, id.y)];
	block56[2 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(3 * TPB + id.x, id.y)];
	block56[3 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(4 * TPB + id.x, id.y)];
	block56[4 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(5 * TPB + id.x, id.y)];
	block56[5 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(6 * TPB + id.x, id.y)];
	block56[6 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(7 * TPB + id.x, id.y)];
	block56[7 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(8 * TPB + id.x, id.y)];
	block56[8 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(9 * TPB + id.x, id.y)];
	block56[9 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(10 * TPB + id.x, id.y)];
	block56[10 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(11 * TPB + id.x, id.y)];
	block56[11 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(12 * TPB + id.x, id.y)];
	block56[12 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(13 * TPB + id.x, id.y)];
	block56[13 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(14 * TPB + id.x, id.y)];
	block56[14 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(15 * TPB + id.x, id.y)];
	block56[15 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(16 * TPB + id.x, id.y)];
	block56[16 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(17 * TPB + id.x, id.y)];
	block56[17 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(18 * TPB + id.x, id.y)];
	block56[18 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(19 * TPB + id.x, id.y)];
	block56[19 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(20 * TPB + id.x, id.y)];
	block56[20 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(21 * TPB + id.x, id.y)];
	block56[21 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(22 * TPB + id.x, id.y)];
	block56[22 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(23 * TPB + id.x, id.y)];
	block56[23 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(24 * TPB + id.x, id.y)];
	block56[24 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(25 * TPB + id.x, id.y)];
	block56[25 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(26 * TPB + id.x, id.y)];
	block56[26 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(27 * TPB + id.x, id.y)];
	block56[27 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(28 * TPB + id.x, id.y)];
	block56[28 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(29 * TPB + id.x, id.y)];
	block56[29 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(30 * TPB + id.x, id.y)];
	block56[30 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(31 * TPB + id.x, id.y)];
	block56[31 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(32 * TPB + id.x, id.y)];
	block56[32 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(33 * TPB + id.x, id.y)];
	block56[33 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(34 * TPB + id.x, id.y)];
	block56[34 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(35 * TPB + id.x, id.y)];
	block56[35 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(36 * TPB + id.x, id.y)];
	block56[36 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(37 * TPB + id.x, id.y)];
	block56[37 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(38 * TPB + id.x, id.y)];
	block56[38 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(39 * TPB + id.x, id.y)];
	block56[39 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(40 * TPB + id.x, id.y)];
	block56[40 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(41 * TPB + id.x, id.y)];
	block56[41 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(42 * TPB + id.x, id.y)];
	block56[42 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(43 * TPB + id.x, id.y)];
	block56[43 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(44 * TPB + id.x, id.y)];
	block56[44 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(45 * TPB + id.x, id.y)];
	block56[45 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(46 * TPB + id.x, id.y)];
	block56[46 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(47 * TPB + id.x, id.y)];
	block56[47 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(48 * TPB + id.x, id.y)];
	block56[48 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(49 * TPB + id.x, id.y)];
	block56[49 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(50 * TPB + id.x, id.y)];
	block56[50 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(51 * TPB + id.x, id.y)];
	block56[51 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(52 * TPB + id.x, id.y)];
	block56[52 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(53 * TPB + id.x, id.y)];
	block56[53 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(54 * TPB + id.x, id.y)];
	block56[54 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;
	f4 = Tex_ro[float2(55 * TPB + id.x, id.y)];
	block56[55 * TPB + id.x] = ((uint)(f4.x * FTOI)) + ((uint)(f4.y * FTOI)) * 256 + ((uint)(f4.z * FTOI)) * 65536;;
	GroupMemoryBarrierWithGroupSync();
	i = block56[id.x * 56 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block56[id.x * 56 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block56[id.x * 56 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block56[id.x * 56 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block56[id.x * 56 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block56[id.x * 56 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block56[id.x * 56 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block56[id.x * 56 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block56[id.x * 56 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block56[id.x * 56 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block56[id.x * 56 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block56[id.x * 56 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block56[id.x * 56 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block56[id.x * 56 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block56[id.x * 56 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block56[id.x * 56 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block56[id.x * 56 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block56[id.x * 56 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block56[id.x * 56 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block56[id.x * 56 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block56[id.x * 56 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block56[id.x * 56 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block56[id.x * 56 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block56[id.x * 56 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block56[id.x * 56 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block56[id.x * 56 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block56[id.x * 56 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block56[id.x * 56 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block56[id.x * 56 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block56[id.x * 56 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block56[id.x * 56 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block56[id.x * 56 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block56[id.x * 56 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block56[id.x * 56 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block56[id.x * 56 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block56[id.x * 56 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block56[id.x * 56 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block56[id.x * 56 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block56[id.x * 56 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block56[id.x * 56 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block56[id.x * 56 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block56[id.x * 56 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block56[id.x * 56 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block56[id.x * 56 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block56[id.x * 56 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block56[id.x * 56 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block56[id.x * 56 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block56[id.x * 56 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block56[id.x * 56 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block56[id.x * 56 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);
	i = block56[id.x * 56 + 50];
	celr50 = (i % 256);
	celg50 = (i / 256 % 256);
	celb50 = (i / 65536 % 256);
	i = block56[id.x * 56 + 51];
	celr51 = (i % 256);
	celg51 = (i / 256 % 256);
	celb51 = (i / 65536 % 256);
	i = block56[id.x * 56 + 52];
	celr52 = (i % 256);
	celg52 = (i / 256 % 256);
	celb52 = (i / 65536 % 256);
	i = block56[id.x * 56 + 53];
	celr53 = (i % 256);
	celg53 = (i / 256 % 256);
	celb53 = (i / 65536 % 256);
	i = block56[id.x * 56 + 54];
	celr54 = (i % 256);
	celg54 = (i / 256 % 256);
	celb54 = (i / 65536 % 256);
	i = block56[id.x * 56 + 55];
	celr55 = (i % 256);
	celg55 = (i / 256 % 256);
	celb55 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr55;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg55;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb55;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];
		regr[48 & 1] = celr49 * WLR;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + celr50 * WLR;
		celr49 = celr49 * W + regr[(48 & 1) ^ 1];
		regg[48 & 1] = celg49 * WLR;
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + celg50 * WLR;
		celg49 = celg49 * W + regg[(48 & 1) ^ 1];
		regb[48 & 1] = celb49 * WLR;
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + celb50 * WLR;
		celb49 = celb49 * W + regb[(48 & 1) ^ 1];
		regr[49 & 1] = celr50 * WLR;
		regr[(49 & 1) ^ 1] = regr[(49 & 1) ^ 1] + celr51 * WLR;
		celr50 = celr50 * W + regr[(49 & 1) ^ 1];
		regg[49 & 1] = celg50 * WLR;
		regg[(49 & 1) ^ 1] = regg[(49 & 1) ^ 1] + celg51 * WLR;
		celg50 = celg50 * W + regg[(49 & 1) ^ 1];
		regb[49 & 1] = celb50 * WLR;
		regb[(49 & 1) ^ 1] = regb[(49 & 1) ^ 1] + celb51 * WLR;
		celb50 = celb50 * W + regb[(49 & 1) ^ 1];
		regr[50 & 1] = celr51 * WLR;
		regr[(50 & 1) ^ 1] = regr[(50 & 1) ^ 1] + celr52 * WLR;
		celr51 = celr51 * W + regr[(50 & 1) ^ 1];
		regg[50 & 1] = celg51 * WLR;
		regg[(50 & 1) ^ 1] = regg[(50 & 1) ^ 1] + celg52 * WLR;
		celg51 = celg51 * W + regg[(50 & 1) ^ 1];
		regb[50 & 1] = celb51 * WLR;
		regb[(50 & 1) ^ 1] = regb[(50 & 1) ^ 1] + celb52 * WLR;
		celb51 = celb51 * W + regb[(50 & 1) ^ 1];
		regr[51 & 1] = celr52 * WLR;
		regr[(51 & 1) ^ 1] = regr[(51 & 1) ^ 1] + celr53 * WLR;
		celr52 = celr52 * W + regr[(51 & 1) ^ 1];
		regg[51 & 1] = celg52 * WLR;
		regg[(51 & 1) ^ 1] = regg[(51 & 1) ^ 1] + celg53 * WLR;
		celg52 = celg52 * W + regg[(51 & 1) ^ 1];
		regb[51 & 1] = celb52 * WLR;
		regb[(51 & 1) ^ 1] = regb[(51 & 1) ^ 1] + celb53 * WLR;
		celb52 = celb52 * W + regb[(51 & 1) ^ 1];
		regr[52 & 1] = celr53 * WLR;
		regr[(52 & 1) ^ 1] = regr[(52 & 1) ^ 1] + celr54 * WLR;
		celr53 = celr53 * W + regr[(52 & 1) ^ 1];
		regg[52 & 1] = celg53 * WLR;
		regg[(52 & 1) ^ 1] = regg[(52 & 1) ^ 1] + celg54 * WLR;
		celg53 = celg53 * W + regg[(52 & 1) ^ 1];
		regb[52 & 1] = celb53 * WLR;
		regb[(52 & 1) ^ 1] = regb[(52 & 1) ^ 1] + celb54 * WLR;
		celb53 = celb53 * W + regb[(52 & 1) ^ 1];
		regr[53 & 1] = celr54 * WLR;
		regr[(53 & 1) ^ 1] = regr[(53 & 1) ^ 1] + celr55 * WLR;
		celr54 = celr54 * W + regr[(53 & 1) ^ 1];
		regg[53 & 1] = celg54 * WLR;
		regg[(53 & 1) ^ 1] = regg[(53 & 1) ^ 1] + celg55 * WLR;
		celg54 = celg54 * W + regg[(53 & 1) ^ 1];
		regb[53 & 1] = celb54 * WLR;
		regb[(53 & 1) ^ 1] = regb[(53 & 1) ^ 1] + celb55 * WLR;
		celb54 = celb54 * W + regb[(53 & 1) ^ 1];;
		regr[(56 & 1) ^ 1] = regr[(56 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr55 = celr55 * W + regr[(56 & 1) ^ 1];
		regg[(56 & 1) ^ 1] = regg[(56 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg55 = celg55 * W + regg[(56 & 1) ^ 1];
		regb[(56 & 1) ^ 1] = regb[(56 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb55 = celb55 * W + regb[(56 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block56[id.x * 56 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block56[id.x * 56 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block56[id.x * 56 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block56[id.x * 56 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block56[id.x * 56 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block56[id.x * 56 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block56[id.x * 56 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block56[id.x * 56 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block56[id.x * 56 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block56[id.x * 56 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block56[id.x * 56 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block56[id.x * 56 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block56[id.x * 56 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block56[id.x * 56 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block56[id.x * 56 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block56[id.x * 56 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block56[id.x * 56 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block56[id.x * 56 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block56[id.x * 56 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block56[id.x * 56 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block56[id.x * 56 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block56[id.x * 56 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block56[id.x * 56 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block56[id.x * 56 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block56[id.x * 56 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block56[id.x * 56 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block56[id.x * 56 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block56[id.x * 56 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block56[id.x * 56 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block56[id.x * 56 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block56[id.x * 56 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block56[id.x * 56 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block56[id.x * 56 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block56[id.x * 56 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block56[id.x * 56 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block56[id.x * 56 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block56[id.x * 56 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block56[id.x * 56 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block56[id.x * 56 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block56[id.x * 56 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block56[id.x * 56 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block56[id.x * 56 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block56[id.x * 56 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block56[id.x * 56 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block56[id.x * 56 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block56[id.x * 56 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block56[id.x * 56 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block56[id.x * 56 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block56[id.x * 56 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block56[id.x * 56 + 49] = i;
	i = ((uint)celr50) + 256 * ((uint)celg50) + 65536 * ((uint)celb50);
	block56[id.x * 56 + 50] = i;
	i = ((uint)celr51) + 256 * ((uint)celg51) + 65536 * ((uint)celb51);
	block56[id.x * 56 + 51] = i;
	i = ((uint)celr52) + 256 * ((uint)celg52) + 65536 * ((uint)celb52);
	block56[id.x * 56 + 52] = i;
	i = ((uint)celr53) + 256 * ((uint)celg53) + 65536 * ((uint)celb53);
	block56[id.x * 56 + 53] = i;
	i = ((uint)celr54) + 256 * ((uint)celg54) + 65536 * ((uint)celb54);
	block56[id.x * 56 + 54] = i;
	i = ((uint)celr55) + 256 * ((uint)celg55) + 65536 * ((uint)celb55);
	block56[id.x * 56 + 55] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block56[0 * TPB + id.x];
	STORE(0, i, 56);
	i = block56[1 * TPB + id.x];
	STORE(1, i, 56);
	i = block56[2 * TPB + id.x];
	STORE(2, i, 56);
	i = block56[3 * TPB + id.x];
	STORE(3, i, 56);
	i = block56[4 * TPB + id.x];
	STORE(4, i, 56);
	i = block56[5 * TPB + id.x];
	STORE(5, i, 56);
	i = block56[6 * TPB + id.x];
	STORE(6, i, 56);
	i = block56[7 * TPB + id.x];
	STORE(7, i, 56);
	i = block56[8 * TPB + id.x];
	STORE(8, i, 56);
	i = block56[9 * TPB + id.x];
	STORE(9, i, 56);
	i = block56[10 * TPB + id.x];
	STORE(10, i, 56);
	i = block56[11 * TPB + id.x];
	STORE(11, i, 56);
	i = block56[12 * TPB + id.x];
	STORE(12, i, 56);
	i = block56[13 * TPB + id.x];
	STORE(13, i, 56);
	i = block56[14 * TPB + id.x];
	STORE(14, i, 56);
	i = block56[15 * TPB + id.x];
	STORE(15, i, 56);
	i = block56[16 * TPB + id.x];
	STORE(16, i, 56);
	i = block56[17 * TPB + id.x];
	STORE(17, i, 56);
	i = block56[18 * TPB + id.x];
	STORE(18, i, 56);
	i = block56[19 * TPB + id.x];
	STORE(19, i, 56);
	i = block56[20 * TPB + id.x];
	STORE(20, i, 56);
	i = block56[21 * TPB + id.x];
	STORE(21, i, 56);
	i = block56[22 * TPB + id.x];
	STORE(22, i, 56);
	i = block56[23 * TPB + id.x];
	STORE(23, i, 56);
	i = block56[24 * TPB + id.x];
	STORE(24, i, 56);
	i = block56[25 * TPB + id.x];
	STORE(25, i, 56);
	i = block56[26 * TPB + id.x];
	STORE(26, i, 56);
	i = block56[27 * TPB + id.x];
	STORE(27, i, 56);
	i = block56[28 * TPB + id.x];
	STORE(28, i, 56);
	i = block56[29 * TPB + id.x];
	STORE(29, i, 56);
	i = block56[30 * TPB + id.x];
	STORE(30, i, 56);
	i = block56[31 * TPB + id.x];
	STORE(31, i, 56);
	i = block56[32 * TPB + id.x];
	STORE(32, i, 56);
	i = block56[33 * TPB + id.x];
	STORE(33, i, 56);
	i = block56[34 * TPB + id.x];
	STORE(34, i, 56);
	i = block56[35 * TPB + id.x];
	STORE(35, i, 56);
	i = block56[36 * TPB + id.x];
	STORE(36, i, 56);
	i = block56[37 * TPB + id.x];
	STORE(37, i, 56);
	i = block56[38 * TPB + id.x];
	STORE(38, i, 56);
	i = block56[39 * TPB + id.x];
	STORE(39, i, 56);
	i = block56[40 * TPB + id.x];
	STORE(40, i, 56);
	i = block56[41 * TPB + id.x];
	STORE(41, i, 56);
	i = block56[42 * TPB + id.x];
	STORE(42, i, 56);
	i = block56[43 * TPB + id.x];
	STORE(43, i, 56);
	i = block56[44 * TPB + id.x];
	STORE(44, i, 56);
	i = block56[45 * TPB + id.x];
	STORE(45, i, 56);
	i = block56[46 * TPB + id.x];
	STORE(46, i, 56);
	i = block56[47 * TPB + id.x];
	STORE(47, i, 56);
	i = block56[48 * TPB + id.x];
	STORE(48, i, 56);
	i = block56[49 * TPB + id.x];
	STORE(49, i, 56);
	i = block56[50 * TPB + id.x];
	STORE(50, i, 56);
	i = block56[51 * TPB + id.x];
	STORE(51, i, 56);
	i = block56[52 * TPB + id.x];
	STORE(52, i, 56);
	i = block56[53 * TPB + id.x];
	STORE(53, i, 56);
	i = block56[54 * TPB + id.x];
	STORE(54, i, 56);
	i = block56[55 * TPB + id.x];
	STORE(55, i, 56);;
}


























































































































































































































































































































































































































































































[numthreads(TPB, 1, 1)]void YBlur4(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;;
	LOAD(0, i, 4);
	block4[0 * TPB + id.x] = i;
	LOAD(1, i, 4);
	block4[1 * TPB + id.x] = i;
	LOAD(2, i, 4);
	block4[2 * TPB + id.x] = i;
	LOAD(3, i, 4);
	block4[3 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block4[id.x * 4 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block4[id.x * 4 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block4[id.x * 4 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block4[id.x * 4 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr3;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg3;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb3;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr3 = celr3 * W + regr[(4 & 1) ^ 1];
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg3 = celg3 * W + regg[(4 & 1) ^ 1];
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb3 = celb3 * W + regb[(4 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block4[id.x * 4 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block4[id.x * 4 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block4[id.x * 4 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block4[id.x * 4 + 3] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block4[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block4[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block4[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block4[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur6(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;;
	LOAD(0, i, 6);
	block6[0 * TPB + id.x] = i;
	LOAD(1, i, 6);
	block6[1 * TPB + id.x] = i;
	LOAD(2, i, 6);
	block6[2 * TPB + id.x] = i;
	LOAD(3, i, 6);
	block6[3 * TPB + id.x] = i;
	LOAD(4, i, 6);
	block6[4 * TPB + id.x] = i;
	LOAD(5, i, 6);
	block6[5 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block6[id.x * 6 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block6[id.x * 6 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block6[id.x * 6 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block6[id.x * 6 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block6[id.x * 6 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block6[id.x * 6 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr5;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg5;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb5;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr5 = celr5 * W + regr[(6 & 1) ^ 1];
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg5 = celg5 * W + regg[(6 & 1) ^ 1];
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb5 = celb5 * W + regb[(6 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block6[id.x * 6 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block6[id.x * 6 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block6[id.x * 6 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block6[id.x * 6 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block6[id.x * 6 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block6[id.x * 6 + 5] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block6[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block6[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block6[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block6[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block6[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block6[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur8(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;;
	LOAD(0, i, 8);
	block8[0 * TPB + id.x] = i;
	LOAD(1, i, 8);
	block8[1 * TPB + id.x] = i;
	LOAD(2, i, 8);
	block8[2 * TPB + id.x] = i;
	LOAD(3, i, 8);
	block8[3 * TPB + id.x] = i;
	LOAD(4, i, 8);
	block8[4 * TPB + id.x] = i;
	LOAD(5, i, 8);
	block8[5 * TPB + id.x] = i;
	LOAD(6, i, 8);
	block8[6 * TPB + id.x] = i;
	LOAD(7, i, 8);
	block8[7 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block8[id.x * 8 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block8[id.x * 8 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block8[id.x * 8 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block8[id.x * 8 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block8[id.x * 8 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block8[id.x * 8 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block8[id.x * 8 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block8[id.x * 8 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr7;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg7;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb7;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr7 = celr7 * W + regr[(8 & 1) ^ 1];
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg7 = celg7 * W + regg[(8 & 1) ^ 1];
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb7 = celb7 * W + regb[(8 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block8[id.x * 8 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block8[id.x * 8 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block8[id.x * 8 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block8[id.x * 8 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block8[id.x * 8 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block8[id.x * 8 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block8[id.x * 8 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block8[id.x * 8 + 7] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block8[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block8[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block8[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block8[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block8[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block8[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block8[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block8[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur10(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;;
	LOAD(0, i, 10);
	block10[0 * TPB + id.x] = i;
	LOAD(1, i, 10);
	block10[1 * TPB + id.x] = i;
	LOAD(2, i, 10);
	block10[2 * TPB + id.x] = i;
	LOAD(3, i, 10);
	block10[3 * TPB + id.x] = i;
	LOAD(4, i, 10);
	block10[4 * TPB + id.x] = i;
	LOAD(5, i, 10);
	block10[5 * TPB + id.x] = i;
	LOAD(6, i, 10);
	block10[6 * TPB + id.x] = i;
	LOAD(7, i, 10);
	block10[7 * TPB + id.x] = i;
	LOAD(8, i, 10);
	block10[8 * TPB + id.x] = i;
	LOAD(9, i, 10);
	block10[9 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block10[id.x * 10 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block10[id.x * 10 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block10[id.x * 10 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block10[id.x * 10 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block10[id.x * 10 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block10[id.x * 10 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block10[id.x * 10 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block10[id.x * 10 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block10[id.x * 10 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block10[id.x * 10 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr9;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg9;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb9;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr9 = celr9 * W + regr[(10 & 1) ^ 1];
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg9 = celg9 * W + regg[(10 & 1) ^ 1];
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb9 = celb9 * W + regb[(10 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block10[id.x * 10 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block10[id.x * 10 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block10[id.x * 10 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block10[id.x * 10 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block10[id.x * 10 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block10[id.x * 10 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block10[id.x * 10 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block10[id.x * 10 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block10[id.x * 10 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block10[id.x * 10 + 9] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block10[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block10[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur12(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;;
	LOAD(0, i, 12);
	block12[0 * TPB + id.x] = i;
	LOAD(1, i, 12);
	block12[1 * TPB + id.x] = i;
	LOAD(2, i, 12);
	block12[2 * TPB + id.x] = i;
	LOAD(3, i, 12);
	block12[3 * TPB + id.x] = i;
	LOAD(4, i, 12);
	block12[4 * TPB + id.x] = i;
	LOAD(5, i, 12);
	block12[5 * TPB + id.x] = i;
	LOAD(6, i, 12);
	block12[6 * TPB + id.x] = i;
	LOAD(7, i, 12);
	block12[7 * TPB + id.x] = i;
	LOAD(8, i, 12);
	block12[8 * TPB + id.x] = i;
	LOAD(9, i, 12);
	block12[9 * TPB + id.x] = i;
	LOAD(10, i, 12);
	block12[10 * TPB + id.x] = i;
	LOAD(11, i, 12);
	block12[11 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block12[id.x * 12 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block12[id.x * 12 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block12[id.x * 12 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block12[id.x * 12 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block12[id.x * 12 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block12[id.x * 12 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block12[id.x * 12 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block12[id.x * 12 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block12[id.x * 12 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block12[id.x * 12 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block12[id.x * 12 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block12[id.x * 12 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr11;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg11;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb11;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr11 = celr11 * W + regr[(12 & 1) ^ 1];
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg11 = celg11 * W + regg[(12 & 1) ^ 1];
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb11 = celb11 * W + regb[(12 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block12[id.x * 12 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block12[id.x * 12 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block12[id.x * 12 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block12[id.x * 12 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block12[id.x * 12 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block12[id.x * 12 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block12[id.x * 12 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block12[id.x * 12 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block12[id.x * 12 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block12[id.x * 12 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block12[id.x * 12 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block12[id.x * 12 + 11] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block12[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block12[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur14(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;;
	LOAD(0, i, 14);
	block14[0 * TPB + id.x] = i;
	LOAD(1, i, 14);
	block14[1 * TPB + id.x] = i;
	LOAD(2, i, 14);
	block14[2 * TPB + id.x] = i;
	LOAD(3, i, 14);
	block14[3 * TPB + id.x] = i;
	LOAD(4, i, 14);
	block14[4 * TPB + id.x] = i;
	LOAD(5, i, 14);
	block14[5 * TPB + id.x] = i;
	LOAD(6, i, 14);
	block14[6 * TPB + id.x] = i;
	LOAD(7, i, 14);
	block14[7 * TPB + id.x] = i;
	LOAD(8, i, 14);
	block14[8 * TPB + id.x] = i;
	LOAD(9, i, 14);
	block14[9 * TPB + id.x] = i;
	LOAD(10, i, 14);
	block14[10 * TPB + id.x] = i;
	LOAD(11, i, 14);
	block14[11 * TPB + id.x] = i;
	LOAD(12, i, 14);
	block14[12 * TPB + id.x] = i;
	LOAD(13, i, 14);
	block14[13 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block14[id.x * 14 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block14[id.x * 14 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block14[id.x * 14 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block14[id.x * 14 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block14[id.x * 14 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block14[id.x * 14 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block14[id.x * 14 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block14[id.x * 14 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block14[id.x * 14 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block14[id.x * 14 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block14[id.x * 14 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block14[id.x * 14 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block14[id.x * 14 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block14[id.x * 14 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr13;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg13;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb13;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr13 = celr13 * W + regr[(14 & 1) ^ 1];
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg13 = celg13 * W + regg[(14 & 1) ^ 1];
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb13 = celb13 * W + regb[(14 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block14[id.x * 14 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block14[id.x * 14 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block14[id.x * 14 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block14[id.x * 14 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block14[id.x * 14 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block14[id.x * 14 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block14[id.x * 14 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block14[id.x * 14 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block14[id.x * 14 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block14[id.x * 14 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block14[id.x * 14 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block14[id.x * 14 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block14[id.x * 14 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block14[id.x * 14 + 13] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block14[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block14[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur16(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;;
	LOAD(0, i, 16);
	block16[0 * TPB + id.x] = i;
	LOAD(1, i, 16);
	block16[1 * TPB + id.x] = i;
	LOAD(2, i, 16);
	block16[2 * TPB + id.x] = i;
	LOAD(3, i, 16);
	block16[3 * TPB + id.x] = i;
	LOAD(4, i, 16);
	block16[4 * TPB + id.x] = i;
	LOAD(5, i, 16);
	block16[5 * TPB + id.x] = i;
	LOAD(6, i, 16);
	block16[6 * TPB + id.x] = i;
	LOAD(7, i, 16);
	block16[7 * TPB + id.x] = i;
	LOAD(8, i, 16);
	block16[8 * TPB + id.x] = i;
	LOAD(9, i, 16);
	block16[9 * TPB + id.x] = i;
	LOAD(10, i, 16);
	block16[10 * TPB + id.x] = i;
	LOAD(11, i, 16);
	block16[11 * TPB + id.x] = i;
	LOAD(12, i, 16);
	block16[12 * TPB + id.x] = i;
	LOAD(13, i, 16);
	block16[13 * TPB + id.x] = i;
	LOAD(14, i, 16);
	block16[14 * TPB + id.x] = i;
	LOAD(15, i, 16);
	block16[15 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block16[id.x * 16 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block16[id.x * 16 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block16[id.x * 16 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block16[id.x * 16 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block16[id.x * 16 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block16[id.x * 16 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block16[id.x * 16 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block16[id.x * 16 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block16[id.x * 16 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block16[id.x * 16 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block16[id.x * 16 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block16[id.x * 16 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block16[id.x * 16 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block16[id.x * 16 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block16[id.x * 16 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block16[id.x * 16 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr15;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg15;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb15;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr15 = celr15 * W + regr[(16 & 1) ^ 1];
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg15 = celg15 * W + regg[(16 & 1) ^ 1];
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb15 = celb15 * W + regb[(16 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block16[id.x * 16 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block16[id.x * 16 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block16[id.x * 16 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block16[id.x * 16 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block16[id.x * 16 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block16[id.x * 16 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block16[id.x * 16 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block16[id.x * 16 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block16[id.x * 16 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block16[id.x * 16 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block16[id.x * 16 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block16[id.x * 16 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block16[id.x * 16 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block16[id.x * 16 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block16[id.x * 16 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block16[id.x * 16 + 15] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block16[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block16[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur18(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;;
	LOAD(0, i, 18);
	block18[0 * TPB + id.x] = i;
	LOAD(1, i, 18);
	block18[1 * TPB + id.x] = i;
	LOAD(2, i, 18);
	block18[2 * TPB + id.x] = i;
	LOAD(3, i, 18);
	block18[3 * TPB + id.x] = i;
	LOAD(4, i, 18);
	block18[4 * TPB + id.x] = i;
	LOAD(5, i, 18);
	block18[5 * TPB + id.x] = i;
	LOAD(6, i, 18);
	block18[6 * TPB + id.x] = i;
	LOAD(7, i, 18);
	block18[7 * TPB + id.x] = i;
	LOAD(8, i, 18);
	block18[8 * TPB + id.x] = i;
	LOAD(9, i, 18);
	block18[9 * TPB + id.x] = i;
	LOAD(10, i, 18);
	block18[10 * TPB + id.x] = i;
	LOAD(11, i, 18);
	block18[11 * TPB + id.x] = i;
	LOAD(12, i, 18);
	block18[12 * TPB + id.x] = i;
	LOAD(13, i, 18);
	block18[13 * TPB + id.x] = i;
	LOAD(14, i, 18);
	block18[14 * TPB + id.x] = i;
	LOAD(15, i, 18);
	block18[15 * TPB + id.x] = i;
	LOAD(16, i, 18);
	block18[16 * TPB + id.x] = i;
	LOAD(17, i, 18);
	block18[17 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block18[id.x * 18 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block18[id.x * 18 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block18[id.x * 18 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block18[id.x * 18 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block18[id.x * 18 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block18[id.x * 18 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block18[id.x * 18 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block18[id.x * 18 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block18[id.x * 18 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block18[id.x * 18 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block18[id.x * 18 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block18[id.x * 18 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block18[id.x * 18 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block18[id.x * 18 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block18[id.x * 18 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block18[id.x * 18 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block18[id.x * 18 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block18[id.x * 18 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr17;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg17;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb17;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr17 = celr17 * W + regr[(18 & 1) ^ 1];
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg17 = celg17 * W + regg[(18 & 1) ^ 1];
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb17 = celb17 * W + regb[(18 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block18[id.x * 18 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block18[id.x * 18 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block18[id.x * 18 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block18[id.x * 18 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block18[id.x * 18 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block18[id.x * 18 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block18[id.x * 18 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block18[id.x * 18 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block18[id.x * 18 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block18[id.x * 18 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block18[id.x * 18 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block18[id.x * 18 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block18[id.x * 18 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block18[id.x * 18 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block18[id.x * 18 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block18[id.x * 18 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block18[id.x * 18 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block18[id.x * 18 + 17] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block18[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block18[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur20(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;;
	LOAD(0, i, 20);
	block20[0 * TPB + id.x] = i;
	LOAD(1, i, 20);
	block20[1 * TPB + id.x] = i;
	LOAD(2, i, 20);
	block20[2 * TPB + id.x] = i;
	LOAD(3, i, 20);
	block20[3 * TPB + id.x] = i;
	LOAD(4, i, 20);
	block20[4 * TPB + id.x] = i;
	LOAD(5, i, 20);
	block20[5 * TPB + id.x] = i;
	LOAD(6, i, 20);
	block20[6 * TPB + id.x] = i;
	LOAD(7, i, 20);
	block20[7 * TPB + id.x] = i;
	LOAD(8, i, 20);
	block20[8 * TPB + id.x] = i;
	LOAD(9, i, 20);
	block20[9 * TPB + id.x] = i;
	LOAD(10, i, 20);
	block20[10 * TPB + id.x] = i;
	LOAD(11, i, 20);
	block20[11 * TPB + id.x] = i;
	LOAD(12, i, 20);
	block20[12 * TPB + id.x] = i;
	LOAD(13, i, 20);
	block20[13 * TPB + id.x] = i;
	LOAD(14, i, 20);
	block20[14 * TPB + id.x] = i;
	LOAD(15, i, 20);
	block20[15 * TPB + id.x] = i;
	LOAD(16, i, 20);
	block20[16 * TPB + id.x] = i;
	LOAD(17, i, 20);
	block20[17 * TPB + id.x] = i;
	LOAD(18, i, 20);
	block20[18 * TPB + id.x] = i;
	LOAD(19, i, 20);
	block20[19 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block20[id.x * 20 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block20[id.x * 20 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block20[id.x * 20 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block20[id.x * 20 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block20[id.x * 20 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block20[id.x * 20 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block20[id.x * 20 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block20[id.x * 20 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block20[id.x * 20 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block20[id.x * 20 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block20[id.x * 20 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block20[id.x * 20 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block20[id.x * 20 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block20[id.x * 20 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block20[id.x * 20 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block20[id.x * 20 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block20[id.x * 20 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block20[id.x * 20 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block20[id.x * 20 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block20[id.x * 20 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr19;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg19;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb19;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr19 = celr19 * W + regr[(20 & 1) ^ 1];
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg19 = celg19 * W + regg[(20 & 1) ^ 1];
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb19 = celb19 * W + regb[(20 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block20[id.x * 20 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block20[id.x * 20 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block20[id.x * 20 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block20[id.x * 20 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block20[id.x * 20 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block20[id.x * 20 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block20[id.x * 20 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block20[id.x * 20 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block20[id.x * 20 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block20[id.x * 20 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block20[id.x * 20 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block20[id.x * 20 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block20[id.x * 20 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block20[id.x * 20 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block20[id.x * 20 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block20[id.x * 20 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block20[id.x * 20 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block20[id.x * 20 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block20[id.x * 20 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block20[id.x * 20 + 19] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block20[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block20[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur22(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;;
	LOAD(0, i, 22);
	block22[0 * TPB + id.x] = i;
	LOAD(1, i, 22);
	block22[1 * TPB + id.x] = i;
	LOAD(2, i, 22);
	block22[2 * TPB + id.x] = i;
	LOAD(3, i, 22);
	block22[3 * TPB + id.x] = i;
	LOAD(4, i, 22);
	block22[4 * TPB + id.x] = i;
	LOAD(5, i, 22);
	block22[5 * TPB + id.x] = i;
	LOAD(6, i, 22);
	block22[6 * TPB + id.x] = i;
	LOAD(7, i, 22);
	block22[7 * TPB + id.x] = i;
	LOAD(8, i, 22);
	block22[8 * TPB + id.x] = i;
	LOAD(9, i, 22);
	block22[9 * TPB + id.x] = i;
	LOAD(10, i, 22);
	block22[10 * TPB + id.x] = i;
	LOAD(11, i, 22);
	block22[11 * TPB + id.x] = i;
	LOAD(12, i, 22);
	block22[12 * TPB + id.x] = i;
	LOAD(13, i, 22);
	block22[13 * TPB + id.x] = i;
	LOAD(14, i, 22);
	block22[14 * TPB + id.x] = i;
	LOAD(15, i, 22);
	block22[15 * TPB + id.x] = i;
	LOAD(16, i, 22);
	block22[16 * TPB + id.x] = i;
	LOAD(17, i, 22);
	block22[17 * TPB + id.x] = i;
	LOAD(18, i, 22);
	block22[18 * TPB + id.x] = i;
	LOAD(19, i, 22);
	block22[19 * TPB + id.x] = i;
	LOAD(20, i, 22);
	block22[20 * TPB + id.x] = i;
	LOAD(21, i, 22);
	block22[21 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block22[id.x * 22 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block22[id.x * 22 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block22[id.x * 22 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block22[id.x * 22 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block22[id.x * 22 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block22[id.x * 22 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block22[id.x * 22 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block22[id.x * 22 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block22[id.x * 22 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block22[id.x * 22 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block22[id.x * 22 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block22[id.x * 22 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block22[id.x * 22 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block22[id.x * 22 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block22[id.x * 22 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block22[id.x * 22 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block22[id.x * 22 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block22[id.x * 22 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block22[id.x * 22 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block22[id.x * 22 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block22[id.x * 22 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block22[id.x * 22 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr21;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg21;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb21;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr21 = celr21 * W + regr[(22 & 1) ^ 1];
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg21 = celg21 * W + regg[(22 & 1) ^ 1];
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb21 = celb21 * W + regb[(22 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block22[id.x * 22 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block22[id.x * 22 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block22[id.x * 22 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block22[id.x * 22 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block22[id.x * 22 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block22[id.x * 22 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block22[id.x * 22 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block22[id.x * 22 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block22[id.x * 22 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block22[id.x * 22 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block22[id.x * 22 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block22[id.x * 22 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block22[id.x * 22 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block22[id.x * 22 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block22[id.x * 22 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block22[id.x * 22 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block22[id.x * 22 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block22[id.x * 22 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block22[id.x * 22 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block22[id.x * 22 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block22[id.x * 22 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block22[id.x * 22 + 21] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block22[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block22[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur24(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;;
	LOAD(0, i, 24);
	block24[0 * TPB + id.x] = i;
	LOAD(1, i, 24);
	block24[1 * TPB + id.x] = i;
	LOAD(2, i, 24);
	block24[2 * TPB + id.x] = i;
	LOAD(3, i, 24);
	block24[3 * TPB + id.x] = i;
	LOAD(4, i, 24);
	block24[4 * TPB + id.x] = i;
	LOAD(5, i, 24);
	block24[5 * TPB + id.x] = i;
	LOAD(6, i, 24);
	block24[6 * TPB + id.x] = i;
	LOAD(7, i, 24);
	block24[7 * TPB + id.x] = i;
	LOAD(8, i, 24);
	block24[8 * TPB + id.x] = i;
	LOAD(9, i, 24);
	block24[9 * TPB + id.x] = i;
	LOAD(10, i, 24);
	block24[10 * TPB + id.x] = i;
	LOAD(11, i, 24);
	block24[11 * TPB + id.x] = i;
	LOAD(12, i, 24);
	block24[12 * TPB + id.x] = i;
	LOAD(13, i, 24);
	block24[13 * TPB + id.x] = i;
	LOAD(14, i, 24);
	block24[14 * TPB + id.x] = i;
	LOAD(15, i, 24);
	block24[15 * TPB + id.x] = i;
	LOAD(16, i, 24);
	block24[16 * TPB + id.x] = i;
	LOAD(17, i, 24);
	block24[17 * TPB + id.x] = i;
	LOAD(18, i, 24);
	block24[18 * TPB + id.x] = i;
	LOAD(19, i, 24);
	block24[19 * TPB + id.x] = i;
	LOAD(20, i, 24);
	block24[20 * TPB + id.x] = i;
	LOAD(21, i, 24);
	block24[21 * TPB + id.x] = i;
	LOAD(22, i, 24);
	block24[22 * TPB + id.x] = i;
	LOAD(23, i, 24);
	block24[23 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block24[id.x * 24 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block24[id.x * 24 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block24[id.x * 24 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block24[id.x * 24 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block24[id.x * 24 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block24[id.x * 24 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block24[id.x * 24 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block24[id.x * 24 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block24[id.x * 24 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block24[id.x * 24 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block24[id.x * 24 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block24[id.x * 24 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block24[id.x * 24 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block24[id.x * 24 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block24[id.x * 24 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block24[id.x * 24 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block24[id.x * 24 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block24[id.x * 24 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block24[id.x * 24 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block24[id.x * 24 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block24[id.x * 24 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block24[id.x * 24 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block24[id.x * 24 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block24[id.x * 24 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr23;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg23;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb23;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr23 = celr23 * W + regr[(24 & 1) ^ 1];
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg23 = celg23 * W + regg[(24 & 1) ^ 1];
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb23 = celb23 * W + regb[(24 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block24[id.x * 24 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block24[id.x * 24 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block24[id.x * 24 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block24[id.x * 24 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block24[id.x * 24 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block24[id.x * 24 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block24[id.x * 24 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block24[id.x * 24 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block24[id.x * 24 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block24[id.x * 24 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block24[id.x * 24 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block24[id.x * 24 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block24[id.x * 24 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block24[id.x * 24 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block24[id.x * 24 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block24[id.x * 24 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block24[id.x * 24 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block24[id.x * 24 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block24[id.x * 24 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block24[id.x * 24 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block24[id.x * 24 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block24[id.x * 24 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block24[id.x * 24 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block24[id.x * 24 + 23] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block24[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block24[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur26(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;;
	LOAD(0, i, 26);
	block26[0 * TPB + id.x] = i;
	LOAD(1, i, 26);
	block26[1 * TPB + id.x] = i;
	LOAD(2, i, 26);
	block26[2 * TPB + id.x] = i;
	LOAD(3, i, 26);
	block26[3 * TPB + id.x] = i;
	LOAD(4, i, 26);
	block26[4 * TPB + id.x] = i;
	LOAD(5, i, 26);
	block26[5 * TPB + id.x] = i;
	LOAD(6, i, 26);
	block26[6 * TPB + id.x] = i;
	LOAD(7, i, 26);
	block26[7 * TPB + id.x] = i;
	LOAD(8, i, 26);
	block26[8 * TPB + id.x] = i;
	LOAD(9, i, 26);
	block26[9 * TPB + id.x] = i;
	LOAD(10, i, 26);
	block26[10 * TPB + id.x] = i;
	LOAD(11, i, 26);
	block26[11 * TPB + id.x] = i;
	LOAD(12, i, 26);
	block26[12 * TPB + id.x] = i;
	LOAD(13, i, 26);
	block26[13 * TPB + id.x] = i;
	LOAD(14, i, 26);
	block26[14 * TPB + id.x] = i;
	LOAD(15, i, 26);
	block26[15 * TPB + id.x] = i;
	LOAD(16, i, 26);
	block26[16 * TPB + id.x] = i;
	LOAD(17, i, 26);
	block26[17 * TPB + id.x] = i;
	LOAD(18, i, 26);
	block26[18 * TPB + id.x] = i;
	LOAD(19, i, 26);
	block26[19 * TPB + id.x] = i;
	LOAD(20, i, 26);
	block26[20 * TPB + id.x] = i;
	LOAD(21, i, 26);
	block26[21 * TPB + id.x] = i;
	LOAD(22, i, 26);
	block26[22 * TPB + id.x] = i;
	LOAD(23, i, 26);
	block26[23 * TPB + id.x] = i;
	LOAD(24, i, 26);
	block26[24 * TPB + id.x] = i;
	LOAD(25, i, 26);
	block26[25 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block26[id.x * 26 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block26[id.x * 26 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block26[id.x * 26 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block26[id.x * 26 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block26[id.x * 26 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block26[id.x * 26 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block26[id.x * 26 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block26[id.x * 26 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block26[id.x * 26 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block26[id.x * 26 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block26[id.x * 26 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block26[id.x * 26 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block26[id.x * 26 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block26[id.x * 26 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block26[id.x * 26 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block26[id.x * 26 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block26[id.x * 26 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block26[id.x * 26 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block26[id.x * 26 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block26[id.x * 26 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block26[id.x * 26 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block26[id.x * 26 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block26[id.x * 26 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block26[id.x * 26 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block26[id.x * 26 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block26[id.x * 26 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr25;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg25;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb25;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr25 = celr25 * W + regr[(26 & 1) ^ 1];
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg25 = celg25 * W + regg[(26 & 1) ^ 1];
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb25 = celb25 * W + regb[(26 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block26[id.x * 26 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block26[id.x * 26 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block26[id.x * 26 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block26[id.x * 26 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block26[id.x * 26 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block26[id.x * 26 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block26[id.x * 26 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block26[id.x * 26 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block26[id.x * 26 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block26[id.x * 26 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block26[id.x * 26 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block26[id.x * 26 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block26[id.x * 26 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block26[id.x * 26 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block26[id.x * 26 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block26[id.x * 26 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block26[id.x * 26 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block26[id.x * 26 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block26[id.x * 26 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block26[id.x * 26 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block26[id.x * 26 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block26[id.x * 26 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block26[id.x * 26 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block26[id.x * 26 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block26[id.x * 26 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block26[id.x * 26 + 25] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block26[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block26[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur28(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;;
	LOAD(0, i, 28);
	block28[0 * TPB + id.x] = i;
	LOAD(1, i, 28);
	block28[1 * TPB + id.x] = i;
	LOAD(2, i, 28);
	block28[2 * TPB + id.x] = i;
	LOAD(3, i, 28);
	block28[3 * TPB + id.x] = i;
	LOAD(4, i, 28);
	block28[4 * TPB + id.x] = i;
	LOAD(5, i, 28);
	block28[5 * TPB + id.x] = i;
	LOAD(6, i, 28);
	block28[6 * TPB + id.x] = i;
	LOAD(7, i, 28);
	block28[7 * TPB + id.x] = i;
	LOAD(8, i, 28);
	block28[8 * TPB + id.x] = i;
	LOAD(9, i, 28);
	block28[9 * TPB + id.x] = i;
	LOAD(10, i, 28);
	block28[10 * TPB + id.x] = i;
	LOAD(11, i, 28);
	block28[11 * TPB + id.x] = i;
	LOAD(12, i, 28);
	block28[12 * TPB + id.x] = i;
	LOAD(13, i, 28);
	block28[13 * TPB + id.x] = i;
	LOAD(14, i, 28);
	block28[14 * TPB + id.x] = i;
	LOAD(15, i, 28);
	block28[15 * TPB + id.x] = i;
	LOAD(16, i, 28);
	block28[16 * TPB + id.x] = i;
	LOAD(17, i, 28);
	block28[17 * TPB + id.x] = i;
	LOAD(18, i, 28);
	block28[18 * TPB + id.x] = i;
	LOAD(19, i, 28);
	block28[19 * TPB + id.x] = i;
	LOAD(20, i, 28);
	block28[20 * TPB + id.x] = i;
	LOAD(21, i, 28);
	block28[21 * TPB + id.x] = i;
	LOAD(22, i, 28);
	block28[22 * TPB + id.x] = i;
	LOAD(23, i, 28);
	block28[23 * TPB + id.x] = i;
	LOAD(24, i, 28);
	block28[24 * TPB + id.x] = i;
	LOAD(25, i, 28);
	block28[25 * TPB + id.x] = i;
	LOAD(26, i, 28);
	block28[26 * TPB + id.x] = i;
	LOAD(27, i, 28);
	block28[27 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block28[id.x * 28 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block28[id.x * 28 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block28[id.x * 28 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block28[id.x * 28 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block28[id.x * 28 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block28[id.x * 28 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block28[id.x * 28 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block28[id.x * 28 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block28[id.x * 28 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block28[id.x * 28 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block28[id.x * 28 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block28[id.x * 28 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block28[id.x * 28 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block28[id.x * 28 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block28[id.x * 28 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block28[id.x * 28 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block28[id.x * 28 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block28[id.x * 28 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block28[id.x * 28 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block28[id.x * 28 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block28[id.x * 28 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block28[id.x * 28 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block28[id.x * 28 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block28[id.x * 28 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block28[id.x * 28 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block28[id.x * 28 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block28[id.x * 28 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block28[id.x * 28 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr27;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg27;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb27;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr27 = celr27 * W + regr[(28 & 1) ^ 1];
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg27 = celg27 * W + regg[(28 & 1) ^ 1];
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb27 = celb27 * W + regb[(28 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block28[id.x * 28 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block28[id.x * 28 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block28[id.x * 28 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block28[id.x * 28 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block28[id.x * 28 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block28[id.x * 28 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block28[id.x * 28 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block28[id.x * 28 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block28[id.x * 28 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block28[id.x * 28 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block28[id.x * 28 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block28[id.x * 28 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block28[id.x * 28 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block28[id.x * 28 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block28[id.x * 28 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block28[id.x * 28 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block28[id.x * 28 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block28[id.x * 28 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block28[id.x * 28 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block28[id.x * 28 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block28[id.x * 28 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block28[id.x * 28 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block28[id.x * 28 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block28[id.x * 28 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block28[id.x * 28 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block28[id.x * 28 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block28[id.x * 28 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block28[id.x * 28 + 27] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block28[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block28[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur30(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;;
	LOAD(0, i, 30);
	block30[0 * TPB + id.x] = i;
	LOAD(1, i, 30);
	block30[1 * TPB + id.x] = i;
	LOAD(2, i, 30);
	block30[2 * TPB + id.x] = i;
	LOAD(3, i, 30);
	block30[3 * TPB + id.x] = i;
	LOAD(4, i, 30);
	block30[4 * TPB + id.x] = i;
	LOAD(5, i, 30);
	block30[5 * TPB + id.x] = i;
	LOAD(6, i, 30);
	block30[6 * TPB + id.x] = i;
	LOAD(7, i, 30);
	block30[7 * TPB + id.x] = i;
	LOAD(8, i, 30);
	block30[8 * TPB + id.x] = i;
	LOAD(9, i, 30);
	block30[9 * TPB + id.x] = i;
	LOAD(10, i, 30);
	block30[10 * TPB + id.x] = i;
	LOAD(11, i, 30);
	block30[11 * TPB + id.x] = i;
	LOAD(12, i, 30);
	block30[12 * TPB + id.x] = i;
	LOAD(13, i, 30);
	block30[13 * TPB + id.x] = i;
	LOAD(14, i, 30);
	block30[14 * TPB + id.x] = i;
	LOAD(15, i, 30);
	block30[15 * TPB + id.x] = i;
	LOAD(16, i, 30);
	block30[16 * TPB + id.x] = i;
	LOAD(17, i, 30);
	block30[17 * TPB + id.x] = i;
	LOAD(18, i, 30);
	block30[18 * TPB + id.x] = i;
	LOAD(19, i, 30);
	block30[19 * TPB + id.x] = i;
	LOAD(20, i, 30);
	block30[20 * TPB + id.x] = i;
	LOAD(21, i, 30);
	block30[21 * TPB + id.x] = i;
	LOAD(22, i, 30);
	block30[22 * TPB + id.x] = i;
	LOAD(23, i, 30);
	block30[23 * TPB + id.x] = i;
	LOAD(24, i, 30);
	block30[24 * TPB + id.x] = i;
	LOAD(25, i, 30);
	block30[25 * TPB + id.x] = i;
	LOAD(26, i, 30);
	block30[26 * TPB + id.x] = i;
	LOAD(27, i, 30);
	block30[27 * TPB + id.x] = i;
	LOAD(28, i, 30);
	block30[28 * TPB + id.x] = i;
	LOAD(29, i, 30);
	block30[29 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block30[id.x * 30 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block30[id.x * 30 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block30[id.x * 30 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block30[id.x * 30 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block30[id.x * 30 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block30[id.x * 30 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block30[id.x * 30 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block30[id.x * 30 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block30[id.x * 30 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block30[id.x * 30 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block30[id.x * 30 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block30[id.x * 30 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block30[id.x * 30 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block30[id.x * 30 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block30[id.x * 30 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block30[id.x * 30 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block30[id.x * 30 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block30[id.x * 30 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block30[id.x * 30 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block30[id.x * 30 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block30[id.x * 30 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block30[id.x * 30 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block30[id.x * 30 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block30[id.x * 30 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block30[id.x * 30 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block30[id.x * 30 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block30[id.x * 30 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block30[id.x * 30 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block30[id.x * 30 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block30[id.x * 30 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr29;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg29;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb29;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr29 = celr29 * W + regr[(30 & 1) ^ 1];
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg29 = celg29 * W + regg[(30 & 1) ^ 1];
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb29 = celb29 * W + regb[(30 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block30[id.x * 30 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block30[id.x * 30 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block30[id.x * 30 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block30[id.x * 30 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block30[id.x * 30 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block30[id.x * 30 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block30[id.x * 30 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block30[id.x * 30 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block30[id.x * 30 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block30[id.x * 30 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block30[id.x * 30 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block30[id.x * 30 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block30[id.x * 30 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block30[id.x * 30 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block30[id.x * 30 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block30[id.x * 30 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block30[id.x * 30 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block30[id.x * 30 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block30[id.x * 30 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block30[id.x * 30 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block30[id.x * 30 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block30[id.x * 30 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block30[id.x * 30 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block30[id.x * 30 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block30[id.x * 30 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block30[id.x * 30 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block30[id.x * 30 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block30[id.x * 30 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block30[id.x * 30 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block30[id.x * 30 + 29] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block30[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block30[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur32(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;;
	LOAD(0, i, 32);
	block32[0 * TPB + id.x] = i;
	LOAD(1, i, 32);
	block32[1 * TPB + id.x] = i;
	LOAD(2, i, 32);
	block32[2 * TPB + id.x] = i;
	LOAD(3, i, 32);
	block32[3 * TPB + id.x] = i;
	LOAD(4, i, 32);
	block32[4 * TPB + id.x] = i;
	LOAD(5, i, 32);
	block32[5 * TPB + id.x] = i;
	LOAD(6, i, 32);
	block32[6 * TPB + id.x] = i;
	LOAD(7, i, 32);
	block32[7 * TPB + id.x] = i;
	LOAD(8, i, 32);
	block32[8 * TPB + id.x] = i;
	LOAD(9, i, 32);
	block32[9 * TPB + id.x] = i;
	LOAD(10, i, 32);
	block32[10 * TPB + id.x] = i;
	LOAD(11, i, 32);
	block32[11 * TPB + id.x] = i;
	LOAD(12, i, 32);
	block32[12 * TPB + id.x] = i;
	LOAD(13, i, 32);
	block32[13 * TPB + id.x] = i;
	LOAD(14, i, 32);
	block32[14 * TPB + id.x] = i;
	LOAD(15, i, 32);
	block32[15 * TPB + id.x] = i;
	LOAD(16, i, 32);
	block32[16 * TPB + id.x] = i;
	LOAD(17, i, 32);
	block32[17 * TPB + id.x] = i;
	LOAD(18, i, 32);
	block32[18 * TPB + id.x] = i;
	LOAD(19, i, 32);
	block32[19 * TPB + id.x] = i;
	LOAD(20, i, 32);
	block32[20 * TPB + id.x] = i;
	LOAD(21, i, 32);
	block32[21 * TPB + id.x] = i;
	LOAD(22, i, 32);
	block32[22 * TPB + id.x] = i;
	LOAD(23, i, 32);
	block32[23 * TPB + id.x] = i;
	LOAD(24, i, 32);
	block32[24 * TPB + id.x] = i;
	LOAD(25, i, 32);
	block32[25 * TPB + id.x] = i;
	LOAD(26, i, 32);
	block32[26 * TPB + id.x] = i;
	LOAD(27, i, 32);
	block32[27 * TPB + id.x] = i;
	LOAD(28, i, 32);
	block32[28 * TPB + id.x] = i;
	LOAD(29, i, 32);
	block32[29 * TPB + id.x] = i;
	LOAD(30, i, 32);
	block32[30 * TPB + id.x] = i;
	LOAD(31, i, 32);
	block32[31 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block32[id.x * 32 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block32[id.x * 32 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block32[id.x * 32 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block32[id.x * 32 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block32[id.x * 32 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block32[id.x * 32 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block32[id.x * 32 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block32[id.x * 32 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block32[id.x * 32 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block32[id.x * 32 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block32[id.x * 32 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block32[id.x * 32 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block32[id.x * 32 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block32[id.x * 32 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block32[id.x * 32 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block32[id.x * 32 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block32[id.x * 32 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block32[id.x * 32 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block32[id.x * 32 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block32[id.x * 32 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block32[id.x * 32 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block32[id.x * 32 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block32[id.x * 32 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block32[id.x * 32 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block32[id.x * 32 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block32[id.x * 32 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block32[id.x * 32 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block32[id.x * 32 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block32[id.x * 32 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block32[id.x * 32 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block32[id.x * 32 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block32[id.x * 32 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr31;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg31;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb31;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr31 = celr31 * W + regr[(32 & 1) ^ 1];
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg31 = celg31 * W + regg[(32 & 1) ^ 1];
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb31 = celb31 * W + regb[(32 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block32[id.x * 32 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block32[id.x * 32 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block32[id.x * 32 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block32[id.x * 32 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block32[id.x * 32 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block32[id.x * 32 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block32[id.x * 32 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block32[id.x * 32 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block32[id.x * 32 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block32[id.x * 32 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block32[id.x * 32 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block32[id.x * 32 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block32[id.x * 32 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block32[id.x * 32 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block32[id.x * 32 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block32[id.x * 32 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block32[id.x * 32 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block32[id.x * 32 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block32[id.x * 32 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block32[id.x * 32 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block32[id.x * 32 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block32[id.x * 32 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block32[id.x * 32 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block32[id.x * 32 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block32[id.x * 32 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block32[id.x * 32 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block32[id.x * 32 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block32[id.x * 32 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block32[id.x * 32 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block32[id.x * 32 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block32[id.x * 32 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block32[id.x * 32 + 31] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block32[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block32[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur34(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;;
	LOAD(0, i, 34);
	block34[0 * TPB + id.x] = i;
	LOAD(1, i, 34);
	block34[1 * TPB + id.x] = i;
	LOAD(2, i, 34);
	block34[2 * TPB + id.x] = i;
	LOAD(3, i, 34);
	block34[3 * TPB + id.x] = i;
	LOAD(4, i, 34);
	block34[4 * TPB + id.x] = i;
	LOAD(5, i, 34);
	block34[5 * TPB + id.x] = i;
	LOAD(6, i, 34);
	block34[6 * TPB + id.x] = i;
	LOAD(7, i, 34);
	block34[7 * TPB + id.x] = i;
	LOAD(8, i, 34);
	block34[8 * TPB + id.x] = i;
	LOAD(9, i, 34);
	block34[9 * TPB + id.x] = i;
	LOAD(10, i, 34);
	block34[10 * TPB + id.x] = i;
	LOAD(11, i, 34);
	block34[11 * TPB + id.x] = i;
	LOAD(12, i, 34);
	block34[12 * TPB + id.x] = i;
	LOAD(13, i, 34);
	block34[13 * TPB + id.x] = i;
	LOAD(14, i, 34);
	block34[14 * TPB + id.x] = i;
	LOAD(15, i, 34);
	block34[15 * TPB + id.x] = i;
	LOAD(16, i, 34);
	block34[16 * TPB + id.x] = i;
	LOAD(17, i, 34);
	block34[17 * TPB + id.x] = i;
	LOAD(18, i, 34);
	block34[18 * TPB + id.x] = i;
	LOAD(19, i, 34);
	block34[19 * TPB + id.x] = i;
	LOAD(20, i, 34);
	block34[20 * TPB + id.x] = i;
	LOAD(21, i, 34);
	block34[21 * TPB + id.x] = i;
	LOAD(22, i, 34);
	block34[22 * TPB + id.x] = i;
	LOAD(23, i, 34);
	block34[23 * TPB + id.x] = i;
	LOAD(24, i, 34);
	block34[24 * TPB + id.x] = i;
	LOAD(25, i, 34);
	block34[25 * TPB + id.x] = i;
	LOAD(26, i, 34);
	block34[26 * TPB + id.x] = i;
	LOAD(27, i, 34);
	block34[27 * TPB + id.x] = i;
	LOAD(28, i, 34);
	block34[28 * TPB + id.x] = i;
	LOAD(29, i, 34);
	block34[29 * TPB + id.x] = i;
	LOAD(30, i, 34);
	block34[30 * TPB + id.x] = i;
	LOAD(31, i, 34);
	block34[31 * TPB + id.x] = i;
	LOAD(32, i, 34);
	block34[32 * TPB + id.x] = i;
	LOAD(33, i, 34);
	block34[33 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block34[id.x * 34 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block34[id.x * 34 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block34[id.x * 34 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block34[id.x * 34 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block34[id.x * 34 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block34[id.x * 34 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block34[id.x * 34 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block34[id.x * 34 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block34[id.x * 34 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block34[id.x * 34 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block34[id.x * 34 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block34[id.x * 34 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block34[id.x * 34 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block34[id.x * 34 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block34[id.x * 34 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block34[id.x * 34 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block34[id.x * 34 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block34[id.x * 34 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block34[id.x * 34 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block34[id.x * 34 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block34[id.x * 34 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block34[id.x * 34 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block34[id.x * 34 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block34[id.x * 34 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block34[id.x * 34 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block34[id.x * 34 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block34[id.x * 34 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block34[id.x * 34 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block34[id.x * 34 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block34[id.x * 34 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block34[id.x * 34 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block34[id.x * 34 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block34[id.x * 34 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block34[id.x * 34 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr33;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg33;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb33;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr33 = celr33 * W + regr[(34 & 1) ^ 1];
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg33 = celg33 * W + regg[(34 & 1) ^ 1];
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb33 = celb33 * W + regb[(34 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block34[id.x * 34 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block34[id.x * 34 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block34[id.x * 34 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block34[id.x * 34 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block34[id.x * 34 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block34[id.x * 34 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block34[id.x * 34 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block34[id.x * 34 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block34[id.x * 34 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block34[id.x * 34 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block34[id.x * 34 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block34[id.x * 34 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block34[id.x * 34 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block34[id.x * 34 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block34[id.x * 34 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block34[id.x * 34 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block34[id.x * 34 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block34[id.x * 34 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block34[id.x * 34 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block34[id.x * 34 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block34[id.x * 34 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block34[id.x * 34 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block34[id.x * 34 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block34[id.x * 34 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block34[id.x * 34 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block34[id.x * 34 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block34[id.x * 34 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block34[id.x * 34 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block34[id.x * 34 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block34[id.x * 34 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block34[id.x * 34 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block34[id.x * 34 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block34[id.x * 34 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block34[id.x * 34 + 33] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block34[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block34[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur36(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;;
	LOAD(0, i, 36);
	block36[0 * TPB + id.x] = i;
	LOAD(1, i, 36);
	block36[1 * TPB + id.x] = i;
	LOAD(2, i, 36);
	block36[2 * TPB + id.x] = i;
	LOAD(3, i, 36);
	block36[3 * TPB + id.x] = i;
	LOAD(4, i, 36);
	block36[4 * TPB + id.x] = i;
	LOAD(5, i, 36);
	block36[5 * TPB + id.x] = i;
	LOAD(6, i, 36);
	block36[6 * TPB + id.x] = i;
	LOAD(7, i, 36);
	block36[7 * TPB + id.x] = i;
	LOAD(8, i, 36);
	block36[8 * TPB + id.x] = i;
	LOAD(9, i, 36);
	block36[9 * TPB + id.x] = i;
	LOAD(10, i, 36);
	block36[10 * TPB + id.x] = i;
	LOAD(11, i, 36);
	block36[11 * TPB + id.x] = i;
	LOAD(12, i, 36);
	block36[12 * TPB + id.x] = i;
	LOAD(13, i, 36);
	block36[13 * TPB + id.x] = i;
	LOAD(14, i, 36);
	block36[14 * TPB + id.x] = i;
	LOAD(15, i, 36);
	block36[15 * TPB + id.x] = i;
	LOAD(16, i, 36);
	block36[16 * TPB + id.x] = i;
	LOAD(17, i, 36);
	block36[17 * TPB + id.x] = i;
	LOAD(18, i, 36);
	block36[18 * TPB + id.x] = i;
	LOAD(19, i, 36);
	block36[19 * TPB + id.x] = i;
	LOAD(20, i, 36);
	block36[20 * TPB + id.x] = i;
	LOAD(21, i, 36);
	block36[21 * TPB + id.x] = i;
	LOAD(22, i, 36);
	block36[22 * TPB + id.x] = i;
	LOAD(23, i, 36);
	block36[23 * TPB + id.x] = i;
	LOAD(24, i, 36);
	block36[24 * TPB + id.x] = i;
	LOAD(25, i, 36);
	block36[25 * TPB + id.x] = i;
	LOAD(26, i, 36);
	block36[26 * TPB + id.x] = i;
	LOAD(27, i, 36);
	block36[27 * TPB + id.x] = i;
	LOAD(28, i, 36);
	block36[28 * TPB + id.x] = i;
	LOAD(29, i, 36);
	block36[29 * TPB + id.x] = i;
	LOAD(30, i, 36);
	block36[30 * TPB + id.x] = i;
	LOAD(31, i, 36);
	block36[31 * TPB + id.x] = i;
	LOAD(32, i, 36);
	block36[32 * TPB + id.x] = i;
	LOAD(33, i, 36);
	block36[33 * TPB + id.x] = i;
	LOAD(34, i, 36);
	block36[34 * TPB + id.x] = i;
	LOAD(35, i, 36);
	block36[35 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block36[id.x * 36 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block36[id.x * 36 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block36[id.x * 36 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block36[id.x * 36 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block36[id.x * 36 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block36[id.x * 36 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block36[id.x * 36 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block36[id.x * 36 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block36[id.x * 36 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block36[id.x * 36 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block36[id.x * 36 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block36[id.x * 36 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block36[id.x * 36 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block36[id.x * 36 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block36[id.x * 36 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block36[id.x * 36 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block36[id.x * 36 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block36[id.x * 36 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block36[id.x * 36 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block36[id.x * 36 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block36[id.x * 36 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block36[id.x * 36 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block36[id.x * 36 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block36[id.x * 36 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block36[id.x * 36 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block36[id.x * 36 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block36[id.x * 36 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block36[id.x * 36 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block36[id.x * 36 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block36[id.x * 36 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block36[id.x * 36 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block36[id.x * 36 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block36[id.x * 36 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block36[id.x * 36 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block36[id.x * 36 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block36[id.x * 36 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr35;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg35;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb35;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr35 = celr35 * W + regr[(36 & 1) ^ 1];
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg35 = celg35 * W + regg[(36 & 1) ^ 1];
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb35 = celb35 * W + regb[(36 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block36[id.x * 36 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block36[id.x * 36 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block36[id.x * 36 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block36[id.x * 36 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block36[id.x * 36 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block36[id.x * 36 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block36[id.x * 36 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block36[id.x * 36 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block36[id.x * 36 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block36[id.x * 36 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block36[id.x * 36 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block36[id.x * 36 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block36[id.x * 36 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block36[id.x * 36 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block36[id.x * 36 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block36[id.x * 36 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block36[id.x * 36 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block36[id.x * 36 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block36[id.x * 36 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block36[id.x * 36 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block36[id.x * 36 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block36[id.x * 36 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block36[id.x * 36 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block36[id.x * 36 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block36[id.x * 36 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block36[id.x * 36 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block36[id.x * 36 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block36[id.x * 36 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block36[id.x * 36 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block36[id.x * 36 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block36[id.x * 36 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block36[id.x * 36 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block36[id.x * 36 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block36[id.x * 36 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block36[id.x * 36 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block36[id.x * 36 + 35] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block36[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block36[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur38(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;
	float celr36; float celg36; float celb36;
	float celr37; float celg37; float celb37;;
	LOAD(0, i, 38);
	block38[0 * TPB + id.x] = i;
	LOAD(1, i, 38);
	block38[1 * TPB + id.x] = i;
	LOAD(2, i, 38);
	block38[2 * TPB + id.x] = i;
	LOAD(3, i, 38);
	block38[3 * TPB + id.x] = i;
	LOAD(4, i, 38);
	block38[4 * TPB + id.x] = i;
	LOAD(5, i, 38);
	block38[5 * TPB + id.x] = i;
	LOAD(6, i, 38);
	block38[6 * TPB + id.x] = i;
	LOAD(7, i, 38);
	block38[7 * TPB + id.x] = i;
	LOAD(8, i, 38);
	block38[8 * TPB + id.x] = i;
	LOAD(9, i, 38);
	block38[9 * TPB + id.x] = i;
	LOAD(10, i, 38);
	block38[10 * TPB + id.x] = i;
	LOAD(11, i, 38);
	block38[11 * TPB + id.x] = i;
	LOAD(12, i, 38);
	block38[12 * TPB + id.x] = i;
	LOAD(13, i, 38);
	block38[13 * TPB + id.x] = i;
	LOAD(14, i, 38);
	block38[14 * TPB + id.x] = i;
	LOAD(15, i, 38);
	block38[15 * TPB + id.x] = i;
	LOAD(16, i, 38);
	block38[16 * TPB + id.x] = i;
	LOAD(17, i, 38);
	block38[17 * TPB + id.x] = i;
	LOAD(18, i, 38);
	block38[18 * TPB + id.x] = i;
	LOAD(19, i, 38);
	block38[19 * TPB + id.x] = i;
	LOAD(20, i, 38);
	block38[20 * TPB + id.x] = i;
	LOAD(21, i, 38);
	block38[21 * TPB + id.x] = i;
	LOAD(22, i, 38);
	block38[22 * TPB + id.x] = i;
	LOAD(23, i, 38);
	block38[23 * TPB + id.x] = i;
	LOAD(24, i, 38);
	block38[24 * TPB + id.x] = i;
	LOAD(25, i, 38);
	block38[25 * TPB + id.x] = i;
	LOAD(26, i, 38);
	block38[26 * TPB + id.x] = i;
	LOAD(27, i, 38);
	block38[27 * TPB + id.x] = i;
	LOAD(28, i, 38);
	block38[28 * TPB + id.x] = i;
	LOAD(29, i, 38);
	block38[29 * TPB + id.x] = i;
	LOAD(30, i, 38);
	block38[30 * TPB + id.x] = i;
	LOAD(31, i, 38);
	block38[31 * TPB + id.x] = i;
	LOAD(32, i, 38);
	block38[32 * TPB + id.x] = i;
	LOAD(33, i, 38);
	block38[33 * TPB + id.x] = i;
	LOAD(34, i, 38);
	block38[34 * TPB + id.x] = i;
	LOAD(35, i, 38);
	block38[35 * TPB + id.x] = i;
	LOAD(36, i, 38);
	block38[36 * TPB + id.x] = i;
	LOAD(37, i, 38);
	block38[37 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block38[id.x * 38 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block38[id.x * 38 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block38[id.x * 38 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block38[id.x * 38 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block38[id.x * 38 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block38[id.x * 38 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block38[id.x * 38 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block38[id.x * 38 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block38[id.x * 38 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block38[id.x * 38 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block38[id.x * 38 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block38[id.x * 38 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block38[id.x * 38 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block38[id.x * 38 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block38[id.x * 38 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block38[id.x * 38 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block38[id.x * 38 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block38[id.x * 38 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block38[id.x * 38 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block38[id.x * 38 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block38[id.x * 38 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block38[id.x * 38 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block38[id.x * 38 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block38[id.x * 38 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block38[id.x * 38 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block38[id.x * 38 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block38[id.x * 38 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block38[id.x * 38 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block38[id.x * 38 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block38[id.x * 38 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block38[id.x * 38 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block38[id.x * 38 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block38[id.x * 38 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block38[id.x * 38 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block38[id.x * 38 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block38[id.x * 38 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);
	i = block38[id.x * 38 + 36]; celr36 = (i % 256); celg36 = (i / 256 % 256); celb36 = (i / 65536 % 256);
	i = block38[id.x * 38 + 37]; celr37 = (i % 256); celg37 = (i / 256 % 256); celb37 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr37;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg37;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb37;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR; regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR; celr35 = celr35 * W + regr[(34 & 1) ^ 1]; regg[34 & 1] = celg35 * WLR; regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR; celg35 = celg35 * W + regg[(34 & 1) ^ 1]; regb[34 & 1] = celb35 * WLR; regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR; celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR; regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR; celr36 = celr36 * W + regr[(35 & 1) ^ 1]; regg[35 & 1] = celg36 * WLR; regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR; celg36 = celg36 * W + regg[(35 & 1) ^ 1]; regb[35 & 1] = celb36 * WLR; regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR; celb36 = celb36 * W + regb[(35 & 1) ^ 1];;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr37 = celr37 * W + regr[(38 & 1) ^ 1];
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg37 = celg37 * W + regg[(38 & 1) ^ 1];
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb37 = celb37 * W + regb[(38 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block38[id.x * 38 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block38[id.x * 38 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block38[id.x * 38 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block38[id.x * 38 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block38[id.x * 38 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block38[id.x * 38 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block38[id.x * 38 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block38[id.x * 38 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block38[id.x * 38 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block38[id.x * 38 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block38[id.x * 38 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block38[id.x * 38 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block38[id.x * 38 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block38[id.x * 38 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block38[id.x * 38 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block38[id.x * 38 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block38[id.x * 38 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block38[id.x * 38 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block38[id.x * 38 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block38[id.x * 38 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block38[id.x * 38 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block38[id.x * 38 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block38[id.x * 38 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block38[id.x * 38 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block38[id.x * 38 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block38[id.x * 38 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block38[id.x * 38 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block38[id.x * 38 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block38[id.x * 38 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block38[id.x * 38 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block38[id.x * 38 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block38[id.x * 38 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block38[id.x * 38 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block38[id.x * 38 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block38[id.x * 38 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block38[id.x * 38 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36); block38[id.x * 38 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37); block38[id.x * 38 + 37] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block38[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block38[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur40(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;
	float celr36; float celg36; float celb36;
	float celr37; float celg37; float celb37;
	float celr38; float celg38; float celb38;
	float celr39; float celg39; float celb39;;
	LOAD(0, i, 40);
	block40[0 * TPB + id.x] = i;
	LOAD(1, i, 40);
	block40[1 * TPB + id.x] = i;
	LOAD(2, i, 40);
	block40[2 * TPB + id.x] = i;
	LOAD(3, i, 40);
	block40[3 * TPB + id.x] = i;
	LOAD(4, i, 40);
	block40[4 * TPB + id.x] = i;
	LOAD(5, i, 40);
	block40[5 * TPB + id.x] = i;
	LOAD(6, i, 40);
	block40[6 * TPB + id.x] = i;
	LOAD(7, i, 40);
	block40[7 * TPB + id.x] = i;
	LOAD(8, i, 40);
	block40[8 * TPB + id.x] = i;
	LOAD(9, i, 40);
	block40[9 * TPB + id.x] = i;
	LOAD(10, i, 40);
	block40[10 * TPB + id.x] = i;
	LOAD(11, i, 40);
	block40[11 * TPB + id.x] = i;
	LOAD(12, i, 40);
	block40[12 * TPB + id.x] = i;
	LOAD(13, i, 40);
	block40[13 * TPB + id.x] = i;
	LOAD(14, i, 40);
	block40[14 * TPB + id.x] = i;
	LOAD(15, i, 40);
	block40[15 * TPB + id.x] = i;
	LOAD(16, i, 40);
	block40[16 * TPB + id.x] = i;
	LOAD(17, i, 40);
	block40[17 * TPB + id.x] = i;
	LOAD(18, i, 40);
	block40[18 * TPB + id.x] = i;
	LOAD(19, i, 40);
	block40[19 * TPB + id.x] = i;
	LOAD(20, i, 40);
	block40[20 * TPB + id.x] = i;
	LOAD(21, i, 40);
	block40[21 * TPB + id.x] = i;
	LOAD(22, i, 40);
	block40[22 * TPB + id.x] = i;
	LOAD(23, i, 40);
	block40[23 * TPB + id.x] = i;
	LOAD(24, i, 40);
	block40[24 * TPB + id.x] = i;
	LOAD(25, i, 40);
	block40[25 * TPB + id.x] = i;
	LOAD(26, i, 40);
	block40[26 * TPB + id.x] = i;
	LOAD(27, i, 40);
	block40[27 * TPB + id.x] = i;
	LOAD(28, i, 40);
	block40[28 * TPB + id.x] = i;
	LOAD(29, i, 40);
	block40[29 * TPB + id.x] = i;
	LOAD(30, i, 40);
	block40[30 * TPB + id.x] = i;
	LOAD(31, i, 40);
	block40[31 * TPB + id.x] = i;
	LOAD(32, i, 40);
	block40[32 * TPB + id.x] = i;
	LOAD(33, i, 40);
	block40[33 * TPB + id.x] = i;
	LOAD(34, i, 40);
	block40[34 * TPB + id.x] = i;
	LOAD(35, i, 40);
	block40[35 * TPB + id.x] = i;
	LOAD(36, i, 40);
	block40[36 * TPB + id.x] = i;
	LOAD(37, i, 40);
	block40[37 * TPB + id.x] = i;
	LOAD(38, i, 40);
	block40[38 * TPB + id.x] = i;
	LOAD(39, i, 40);
	block40[39 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block40[id.x * 40 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block40[id.x * 40 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block40[id.x * 40 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block40[id.x * 40 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block40[id.x * 40 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block40[id.x * 40 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block40[id.x * 40 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block40[id.x * 40 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block40[id.x * 40 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block40[id.x * 40 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block40[id.x * 40 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block40[id.x * 40 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block40[id.x * 40 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block40[id.x * 40 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block40[id.x * 40 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block40[id.x * 40 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block40[id.x * 40 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block40[id.x * 40 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block40[id.x * 40 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block40[id.x * 40 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block40[id.x * 40 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block40[id.x * 40 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block40[id.x * 40 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block40[id.x * 40 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block40[id.x * 40 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block40[id.x * 40 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block40[id.x * 40 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block40[id.x * 40 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block40[id.x * 40 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block40[id.x * 40 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block40[id.x * 40 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block40[id.x * 40 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block40[id.x * 40 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block40[id.x * 40 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block40[id.x * 40 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block40[id.x * 40 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);
	i = block40[id.x * 40 + 36]; celr36 = (i % 256); celg36 = (i / 256 % 256); celb36 = (i / 65536 % 256);
	i = block40[id.x * 40 + 37]; celr37 = (i % 256); celg37 = (i / 256 % 256); celb37 = (i / 65536 % 256);
	i = block40[id.x * 40 + 38]; celr38 = (i % 256); celg38 = (i / 256 % 256); celb38 = (i / 65536 % 256);
	i = block40[id.x * 40 + 39]; celr39 = (i % 256); celg39 = (i / 256 % 256); celb39 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr39;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg39;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb39;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR; regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR; celr35 = celr35 * W + regr[(34 & 1) ^ 1]; regg[34 & 1] = celg35 * WLR; regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR; celg35 = celg35 * W + regg[(34 & 1) ^ 1]; regb[34 & 1] = celb35 * WLR; regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR; celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR; regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR; celr36 = celr36 * W + regr[(35 & 1) ^ 1]; regg[35 & 1] = celg36 * WLR; regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR; celg36 = celg36 * W + regg[(35 & 1) ^ 1]; regb[35 & 1] = celb36 * WLR; regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR; celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR; regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR; celr37 = celr37 * W + regr[(36 & 1) ^ 1]; regg[36 & 1] = celg37 * WLR; regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR; celg37 = celg37 * W + regg[(36 & 1) ^ 1]; regb[36 & 1] = celb37 * WLR; regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR; celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR; regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR; celr38 = celr38 * W + regr[(37 & 1) ^ 1]; regg[37 & 1] = celg38 * WLR; regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR; celg38 = celg38 * W + regg[(37 & 1) ^ 1]; regb[37 & 1] = celb38 * WLR; regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR; celb38 = celb38 * W + regb[(37 & 1) ^ 1];;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr39 = celr39 * W + regr[(40 & 1) ^ 1];
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg39 = celg39 * W + regg[(40 & 1) ^ 1];
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb39 = celb39 * W + regb[(40 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block40[id.x * 40 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block40[id.x * 40 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block40[id.x * 40 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block40[id.x * 40 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block40[id.x * 40 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block40[id.x * 40 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block40[id.x * 40 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block40[id.x * 40 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block40[id.x * 40 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block40[id.x * 40 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block40[id.x * 40 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block40[id.x * 40 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block40[id.x * 40 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block40[id.x * 40 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block40[id.x * 40 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block40[id.x * 40 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block40[id.x * 40 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block40[id.x * 40 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block40[id.x * 40 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block40[id.x * 40 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block40[id.x * 40 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block40[id.x * 40 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block40[id.x * 40 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block40[id.x * 40 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block40[id.x * 40 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block40[id.x * 40 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block40[id.x * 40 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block40[id.x * 40 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block40[id.x * 40 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block40[id.x * 40 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block40[id.x * 40 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block40[id.x * 40 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block40[id.x * 40 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block40[id.x * 40 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block40[id.x * 40 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block40[id.x * 40 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36); block40[id.x * 40 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37); block40[id.x * 40 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38); block40[id.x * 40 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39); block40[id.x * 40 + 39] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block40[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block40[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)]void YBlur42(uint2 id : SV_DispatchThreadID) {
	float4 f4; uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0; float celg0; float celb0;
	float celr1; float celg1; float celb1;
	float celr2; float celg2; float celb2;
	float celr3; float celg3; float celb3;
	float celr4; float celg4; float celb4;
	float celr5; float celg5; float celb5;
	float celr6; float celg6; float celb6;
	float celr7; float celg7; float celb7;
	float celr8; float celg8; float celb8;
	float celr9; float celg9; float celb9;
	float celr10; float celg10; float celb10;
	float celr11; float celg11; float celb11;
	float celr12; float celg12; float celb12;
	float celr13; float celg13; float celb13;
	float celr14; float celg14; float celb14;
	float celr15; float celg15; float celb15;
	float celr16; float celg16; float celb16;
	float celr17; float celg17; float celb17;
	float celr18; float celg18; float celb18;
	float celr19; float celg19; float celb19;
	float celr20; float celg20; float celb20;
	float celr21; float celg21; float celb21;
	float celr22; float celg22; float celb22;
	float celr23; float celg23; float celb23;
	float celr24; float celg24; float celb24;
	float celr25; float celg25; float celb25;
	float celr26; float celg26; float celb26;
	float celr27; float celg27; float celb27;
	float celr28; float celg28; float celb28;
	float celr29; float celg29; float celb29;
	float celr30; float celg30; float celb30;
	float celr31; float celg31; float celb31;
	float celr32; float celg32; float celb32;
	float celr33; float celg33; float celb33;
	float celr34; float celg34; float celb34;
	float celr35; float celg35; float celb35;
	float celr36; float celg36; float celb36;
	float celr37; float celg37; float celb37;
	float celr38; float celg38; float celb38;
	float celr39; float celg39; float celb39;
	float celr40; float celg40; float celb40;
	float celr41; float celg41; float celb41;;
	LOAD(0, i, 42);
	block42[0 * TPB + id.x] = i;
	LOAD(1, i, 42);
	block42[1 * TPB + id.x] = i;
	LOAD(2, i, 42);
	block42[2 * TPB + id.x] = i;
	LOAD(3, i, 42);
	block42[3 * TPB + id.x] = i;
	LOAD(4, i, 42);
	block42[4 * TPB + id.x] = i;
	LOAD(5, i, 42);
	block42[5 * TPB + id.x] = i;
	LOAD(6, i, 42);
	block42[6 * TPB + id.x] = i;
	LOAD(7, i, 42);
	block42[7 * TPB + id.x] = i;
	LOAD(8, i, 42);
	block42[8 * TPB + id.x] = i;
	LOAD(9, i, 42);
	block42[9 * TPB + id.x] = i;
	LOAD(10, i, 42);
	block42[10 * TPB + id.x] = i;
	LOAD(11, i, 42);
	block42[11 * TPB + id.x] = i;
	LOAD(12, i, 42);
	block42[12 * TPB + id.x] = i;
	LOAD(13, i, 42);
	block42[13 * TPB + id.x] = i;
	LOAD(14, i, 42);
	block42[14 * TPB + id.x] = i;
	LOAD(15, i, 42);
	block42[15 * TPB + id.x] = i;
	LOAD(16, i, 42);
	block42[16 * TPB + id.x] = i;
	LOAD(17, i, 42);
	block42[17 * TPB + id.x] = i;
	LOAD(18, i, 42);
	block42[18 * TPB + id.x] = i;
	LOAD(19, i, 42);
	block42[19 * TPB + id.x] = i;
	LOAD(20, i, 42);
	block42[20 * TPB + id.x] = i;
	LOAD(21, i, 42);
	block42[21 * TPB + id.x] = i;
	LOAD(22, i, 42);
	block42[22 * TPB + id.x] = i;
	LOAD(23, i, 42);
	block42[23 * TPB + id.x] = i;
	LOAD(24, i, 42);
	block42[24 * TPB + id.x] = i;
	LOAD(25, i, 42);
	block42[25 * TPB + id.x] = i;
	LOAD(26, i, 42);
	block42[26 * TPB + id.x] = i;
	LOAD(27, i, 42);
	block42[27 * TPB + id.x] = i;
	LOAD(28, i, 42);
	block42[28 * TPB + id.x] = i;
	LOAD(29, i, 42);
	block42[29 * TPB + id.x] = i;
	LOAD(30, i, 42);
	block42[30 * TPB + id.x] = i;
	LOAD(31, i, 42);
	block42[31 * TPB + id.x] = i;
	LOAD(32, i, 42);
	block42[32 * TPB + id.x] = i;
	LOAD(33, i, 42);
	block42[33 * TPB + id.x] = i;
	LOAD(34, i, 42);
	block42[34 * TPB + id.x] = i;
	LOAD(35, i, 42);
	block42[35 * TPB + id.x] = i;
	LOAD(36, i, 42);
	block42[36 * TPB + id.x] = i;
	LOAD(37, i, 42);
	block42[37 * TPB + id.x] = i;
	LOAD(38, i, 42);
	block42[38 * TPB + id.x] = i;
	LOAD(39, i, 42);
	block42[39 * TPB + id.x] = i;
	LOAD(40, i, 42);
	block42[40 * TPB + id.x] = i;
	LOAD(41, i, 42);
	block42[41 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block42[id.x * 42 + 0]; celr0 = (i % 256); celg0 = (i / 256 % 256); celb0 = (i / 65536 % 256);
	i = block42[id.x * 42 + 1]; celr1 = (i % 256); celg1 = (i / 256 % 256); celb1 = (i / 65536 % 256);
	i = block42[id.x * 42 + 2]; celr2 = (i % 256); celg2 = (i / 256 % 256); celb2 = (i / 65536 % 256);
	i = block42[id.x * 42 + 3]; celr3 = (i % 256); celg3 = (i / 256 % 256); celb3 = (i / 65536 % 256);
	i = block42[id.x * 42 + 4]; celr4 = (i % 256); celg4 = (i / 256 % 256); celb4 = (i / 65536 % 256);
	i = block42[id.x * 42 + 5]; celr5 = (i % 256); celg5 = (i / 256 % 256); celb5 = (i / 65536 % 256);
	i = block42[id.x * 42 + 6]; celr6 = (i % 256); celg6 = (i / 256 % 256); celb6 = (i / 65536 % 256);
	i = block42[id.x * 42 + 7]; celr7 = (i % 256); celg7 = (i / 256 % 256); celb7 = (i / 65536 % 256);
	i = block42[id.x * 42 + 8]; celr8 = (i % 256); celg8 = (i / 256 % 256); celb8 = (i / 65536 % 256);
	i = block42[id.x * 42 + 9]; celr9 = (i % 256); celg9 = (i / 256 % 256); celb9 = (i / 65536 % 256);
	i = block42[id.x * 42 + 10]; celr10 = (i % 256); celg10 = (i / 256 % 256); celb10 = (i / 65536 % 256);
	i = block42[id.x * 42 + 11]; celr11 = (i % 256); celg11 = (i / 256 % 256); celb11 = (i / 65536 % 256);
	i = block42[id.x * 42 + 12]; celr12 = (i % 256); celg12 = (i / 256 % 256); celb12 = (i / 65536 % 256);
	i = block42[id.x * 42 + 13]; celr13 = (i % 256); celg13 = (i / 256 % 256); celb13 = (i / 65536 % 256);
	i = block42[id.x * 42 + 14]; celr14 = (i % 256); celg14 = (i / 256 % 256); celb14 = (i / 65536 % 256);
	i = block42[id.x * 42 + 15]; celr15 = (i % 256); celg15 = (i / 256 % 256); celb15 = (i / 65536 % 256);
	i = block42[id.x * 42 + 16]; celr16 = (i % 256); celg16 = (i / 256 % 256); celb16 = (i / 65536 % 256);
	i = block42[id.x * 42 + 17]; celr17 = (i % 256); celg17 = (i / 256 % 256); celb17 = (i / 65536 % 256);
	i = block42[id.x * 42 + 18]; celr18 = (i % 256); celg18 = (i / 256 % 256); celb18 = (i / 65536 % 256);
	i = block42[id.x * 42 + 19]; celr19 = (i % 256); celg19 = (i / 256 % 256); celb19 = (i / 65536 % 256);
	i = block42[id.x * 42 + 20]; celr20 = (i % 256); celg20 = (i / 256 % 256); celb20 = (i / 65536 % 256);
	i = block42[id.x * 42 + 21]; celr21 = (i % 256); celg21 = (i / 256 % 256); celb21 = (i / 65536 % 256);
	i = block42[id.x * 42 + 22]; celr22 = (i % 256); celg22 = (i / 256 % 256); celb22 = (i / 65536 % 256);
	i = block42[id.x * 42 + 23]; celr23 = (i % 256); celg23 = (i / 256 % 256); celb23 = (i / 65536 % 256);
	i = block42[id.x * 42 + 24]; celr24 = (i % 256); celg24 = (i / 256 % 256); celb24 = (i / 65536 % 256);
	i = block42[id.x * 42 + 25]; celr25 = (i % 256); celg25 = (i / 256 % 256); celb25 = (i / 65536 % 256);
	i = block42[id.x * 42 + 26]; celr26 = (i % 256); celg26 = (i / 256 % 256); celb26 = (i / 65536 % 256);
	i = block42[id.x * 42 + 27]; celr27 = (i % 256); celg27 = (i / 256 % 256); celb27 = (i / 65536 % 256);
	i = block42[id.x * 42 + 28]; celr28 = (i % 256); celg28 = (i / 256 % 256); celb28 = (i / 65536 % 256);
	i = block42[id.x * 42 + 29]; celr29 = (i % 256); celg29 = (i / 256 % 256); celb29 = (i / 65536 % 256);
	i = block42[id.x * 42 + 30]; celr30 = (i % 256); celg30 = (i / 256 % 256); celb30 = (i / 65536 % 256);
	i = block42[id.x * 42 + 31]; celr31 = (i % 256); celg31 = (i / 256 % 256); celb31 = (i / 65536 % 256);
	i = block42[id.x * 42 + 32]; celr32 = (i % 256); celg32 = (i / 256 % 256); celb32 = (i / 65536 % 256);
	i = block42[id.x * 42 + 33]; celr33 = (i % 256); celg33 = (i / 256 % 256); celb33 = (i / 65536 % 256);
	i = block42[id.x * 42 + 34]; celr34 = (i % 256); celg34 = (i / 256 % 256); celb34 = (i / 65536 % 256);
	i = block42[id.x * 42 + 35]; celr35 = (i % 256); celg35 = (i / 256 % 256); celb35 = (i / 65536 % 256);
	i = block42[id.x * 42 + 36]; celr36 = (i % 256); celg36 = (i / 256 % 256); celb36 = (i / 65536 % 256);
	i = block42[id.x * 42 + 37]; celr37 = (i % 256); celg37 = (i / 256 % 256); celb37 = (i / 65536 % 256);
	i = block42[id.x * 42 + 38]; celr38 = (i % 256); celg38 = (i / 256 % 256); celb38 = (i / 65536 % 256);
	i = block42[id.x * 42 + 39]; celr39 = (i % 256); celg39 = (i / 256 % 256); celb39 = (i / 65536 % 256);
	i = block42[id.x * 42 + 40]; celr40 = (i % 256); celg40 = (i / 256 % 256); celb40 = (i / 65536 % 256);
	i = block42[id.x * 42 + 41]; celr41 = (i % 256); celg41 = (i / 256 % 256); celb41 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr41;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg41;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb41;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR; regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR; celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR; regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR; celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR; regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR; celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR; regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR; celr1 = celr1 * W + regr[(0 & 1) ^ 1]; regg[0 & 1] = celg1 * WLR; regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR; celg1 = celg1 * W + regg[(0 & 1) ^ 1]; regb[0 & 1] = celb1 * WLR; regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR; celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR; regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR; celr2 = celr2 * W + regr[(1 & 1) ^ 1]; regg[1 & 1] = celg2 * WLR; regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR; celg2 = celg2 * W + regg[(1 & 1) ^ 1]; regb[1 & 1] = celb2 * WLR; regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR; celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR; regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR; celr3 = celr3 * W + regr[(2 & 1) ^ 1]; regg[2 & 1] = celg3 * WLR; regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR; celg3 = celg3 * W + regg[(2 & 1) ^ 1]; regb[2 & 1] = celb3 * WLR; regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR; celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR; regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR; celr4 = celr4 * W + regr[(3 & 1) ^ 1]; regg[3 & 1] = celg4 * WLR; regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR; celg4 = celg4 * W + regg[(3 & 1) ^ 1]; regb[3 & 1] = celb4 * WLR; regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR; celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR; regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR; celr5 = celr5 * W + regr[(4 & 1) ^ 1]; regg[4 & 1] = celg5 * WLR; regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR; celg5 = celg5 * W + regg[(4 & 1) ^ 1]; regb[4 & 1] = celb5 * WLR; regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR; celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR; regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR; celr6 = celr6 * W + regr[(5 & 1) ^ 1]; regg[5 & 1] = celg6 * WLR; regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR; celg6 = celg6 * W + regg[(5 & 1) ^ 1]; regb[5 & 1] = celb6 * WLR; regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR; celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR; regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR; celr7 = celr7 * W + regr[(6 & 1) ^ 1]; regg[6 & 1] = celg7 * WLR; regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR; celg7 = celg7 * W + regg[(6 & 1) ^ 1]; regb[6 & 1] = celb7 * WLR; regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR; celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR; regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR; celr8 = celr8 * W + regr[(7 & 1) ^ 1]; regg[7 & 1] = celg8 * WLR; regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR; celg8 = celg8 * W + regg[(7 & 1) ^ 1]; regb[7 & 1] = celb8 * WLR; regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR; celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR; regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR; celr9 = celr9 * W + regr[(8 & 1) ^ 1]; regg[8 & 1] = celg9 * WLR; regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR; celg9 = celg9 * W + regg[(8 & 1) ^ 1]; regb[8 & 1] = celb9 * WLR; regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR; celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR; regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR; celr10 = celr10 * W + regr[(9 & 1) ^ 1]; regg[9 & 1] = celg10 * WLR; regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR; celg10 = celg10 * W + regg[(9 & 1) ^ 1]; regb[9 & 1] = celb10 * WLR; regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR; celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR; regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR; celr11 = celr11 * W + regr[(10 & 1) ^ 1]; regg[10 & 1] = celg11 * WLR; regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR; celg11 = celg11 * W + regg[(10 & 1) ^ 1]; regb[10 & 1] = celb11 * WLR; regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR; celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR; regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR; celr12 = celr12 * W + regr[(11 & 1) ^ 1]; regg[11 & 1] = celg12 * WLR; regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR; celg12 = celg12 * W + regg[(11 & 1) ^ 1]; regb[11 & 1] = celb12 * WLR; regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR; celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR; regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR; celr13 = celr13 * W + regr[(12 & 1) ^ 1]; regg[12 & 1] = celg13 * WLR; regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR; celg13 = celg13 * W + regg[(12 & 1) ^ 1]; regb[12 & 1] = celb13 * WLR; regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR; celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR; regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR; celr14 = celr14 * W + regr[(13 & 1) ^ 1]; regg[13 & 1] = celg14 * WLR; regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR; celg14 = celg14 * W + regg[(13 & 1) ^ 1]; regb[13 & 1] = celb14 * WLR; regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR; celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR; regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR; celr15 = celr15 * W + regr[(14 & 1) ^ 1]; regg[14 & 1] = celg15 * WLR; regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR; celg15 = celg15 * W + regg[(14 & 1) ^ 1]; regb[14 & 1] = celb15 * WLR; regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR; celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR; regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR; celr16 = celr16 * W + regr[(15 & 1) ^ 1]; regg[15 & 1] = celg16 * WLR; regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR; celg16 = celg16 * W + regg[(15 & 1) ^ 1]; regb[15 & 1] = celb16 * WLR; regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR; celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR; regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR; celr17 = celr17 * W + regr[(16 & 1) ^ 1]; regg[16 & 1] = celg17 * WLR; regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR; celg17 = celg17 * W + regg[(16 & 1) ^ 1]; regb[16 & 1] = celb17 * WLR; regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR; celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR; regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR; celr18 = celr18 * W + regr[(17 & 1) ^ 1]; regg[17 & 1] = celg18 * WLR; regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR; celg18 = celg18 * W + regg[(17 & 1) ^ 1]; regb[17 & 1] = celb18 * WLR; regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR; celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR; regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR; celr19 = celr19 * W + regr[(18 & 1) ^ 1]; regg[18 & 1] = celg19 * WLR; regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR; celg19 = celg19 * W + regg[(18 & 1) ^ 1]; regb[18 & 1] = celb19 * WLR; regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR; celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR; regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR; celr20 = celr20 * W + regr[(19 & 1) ^ 1]; regg[19 & 1] = celg20 * WLR; regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR; celg20 = celg20 * W + regg[(19 & 1) ^ 1]; regb[19 & 1] = celb20 * WLR; regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR; celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR; regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR; celr21 = celr21 * W + regr[(20 & 1) ^ 1]; regg[20 & 1] = celg21 * WLR; regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR; celg21 = celg21 * W + regg[(20 & 1) ^ 1]; regb[20 & 1] = celb21 * WLR; regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR; celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR; regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR; celr22 = celr22 * W + regr[(21 & 1) ^ 1]; regg[21 & 1] = celg22 * WLR; regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR; celg22 = celg22 * W + regg[(21 & 1) ^ 1]; regb[21 & 1] = celb22 * WLR; regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR; celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR; regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR; celr23 = celr23 * W + regr[(22 & 1) ^ 1]; regg[22 & 1] = celg23 * WLR; regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR; celg23 = celg23 * W + regg[(22 & 1) ^ 1]; regb[22 & 1] = celb23 * WLR; regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR; celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR; regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR; celr24 = celr24 * W + regr[(23 & 1) ^ 1]; regg[23 & 1] = celg24 * WLR; regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR; celg24 = celg24 * W + regg[(23 & 1) ^ 1]; regb[23 & 1] = celb24 * WLR; regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR; celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR; regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR; celr25 = celr25 * W + regr[(24 & 1) ^ 1]; regg[24 & 1] = celg25 * WLR; regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR; celg25 = celg25 * W + regg[(24 & 1) ^ 1]; regb[24 & 1] = celb25 * WLR; regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR; celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR; regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR; celr26 = celr26 * W + regr[(25 & 1) ^ 1]; regg[25 & 1] = celg26 * WLR; regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR; celg26 = celg26 * W + regg[(25 & 1) ^ 1]; regb[25 & 1] = celb26 * WLR; regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR; celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR; regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR; celr27 = celr27 * W + regr[(26 & 1) ^ 1]; regg[26 & 1] = celg27 * WLR; regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR; celg27 = celg27 * W + regg[(26 & 1) ^ 1]; regb[26 & 1] = celb27 * WLR; regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR; celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR; regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR; celr28 = celr28 * W + regr[(27 & 1) ^ 1]; regg[27 & 1] = celg28 * WLR; regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR; celg28 = celg28 * W + regg[(27 & 1) ^ 1]; regb[27 & 1] = celb28 * WLR; regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR; celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR; regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR; celr29 = celr29 * W + regr[(28 & 1) ^ 1]; regg[28 & 1] = celg29 * WLR; regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR; celg29 = celg29 * W + regg[(28 & 1) ^ 1]; regb[28 & 1] = celb29 * WLR; regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR; celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR; regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR; celr30 = celr30 * W + regr[(29 & 1) ^ 1]; regg[29 & 1] = celg30 * WLR; regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR; celg30 = celg30 * W + regg[(29 & 1) ^ 1]; regb[29 & 1] = celb30 * WLR; regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR; celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR; regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR; celr31 = celr31 * W + regr[(30 & 1) ^ 1]; regg[30 & 1] = celg31 * WLR; regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR; celg31 = celg31 * W + regg[(30 & 1) ^ 1]; regb[30 & 1] = celb31 * WLR; regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR; celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR; regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR; celr32 = celr32 * W + regr[(31 & 1) ^ 1]; regg[31 & 1] = celg32 * WLR; regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR; celg32 = celg32 * W + regg[(31 & 1) ^ 1]; regb[31 & 1] = celb32 * WLR; regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR; celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR; regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR; celr33 = celr33 * W + regr[(32 & 1) ^ 1]; regg[32 & 1] = celg33 * WLR; regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR; celg33 = celg33 * W + regg[(32 & 1) ^ 1]; regb[32 & 1] = celb33 * WLR; regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR; celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR; regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR; celr34 = celr34 * W + regr[(33 & 1) ^ 1]; regg[33 & 1] = celg34 * WLR; regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR; celg34 = celg34 * W + regg[(33 & 1) ^ 1]; regb[33 & 1] = celb34 * WLR; regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR; celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR; regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR; celr35 = celr35 * W + regr[(34 & 1) ^ 1]; regg[34 & 1] = celg35 * WLR; regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR; celg35 = celg35 * W + regg[(34 & 1) ^ 1]; regb[34 & 1] = celb35 * WLR; regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR; celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR; regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR; celr36 = celr36 * W + regr[(35 & 1) ^ 1]; regg[35 & 1] = celg36 * WLR; regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR; celg36 = celg36 * W + regg[(35 & 1) ^ 1]; regb[35 & 1] = celb36 * WLR; regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR; celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR; regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR; celr37 = celr37 * W + regr[(36 & 1) ^ 1]; regg[36 & 1] = celg37 * WLR; regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR; celg37 = celg37 * W + regg[(36 & 1) ^ 1]; regb[36 & 1] = celb37 * WLR; regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR; celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR; regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR; celr38 = celr38 * W + regr[(37 & 1) ^ 1]; regg[37 & 1] = celg38 * WLR; regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR; celg38 = celg38 * W + regg[(37 & 1) ^ 1]; regb[37 & 1] = celb38 * WLR; regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR; celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR; regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR; celr39 = celr39 * W + regr[(38 & 1) ^ 1]; regg[38 & 1] = celg39 * WLR; regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR; celg39 = celg39 * W + regg[(38 & 1) ^ 1]; regb[38 & 1] = celb39 * WLR; regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR; celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR; regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR; celr40 = celr40 * W + regr[(39 & 1) ^ 1]; regg[39 & 1] = celg40 * WLR; regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR; celg40 = celg40 * W + regg[(39 & 1) ^ 1]; regb[39 & 1] = celb40 * WLR; regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR; celb40 = celb40 * W + regb[(39 & 1) ^ 1];;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr41 = celr41 * W + regr[(42 & 1) ^ 1];
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg41 = celg41 * W + regg[(42 & 1) ^ 1];
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb41 = celb41 * W + regb[(42 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0); block42[id.x * 42 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1); block42[id.x * 42 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2); block42[id.x * 42 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3); block42[id.x * 42 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4); block42[id.x * 42 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5); block42[id.x * 42 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6); block42[id.x * 42 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7); block42[id.x * 42 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8); block42[id.x * 42 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9); block42[id.x * 42 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10); block42[id.x * 42 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11); block42[id.x * 42 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12); block42[id.x * 42 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13); block42[id.x * 42 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14); block42[id.x * 42 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15); block42[id.x * 42 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16); block42[id.x * 42 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17); block42[id.x * 42 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18); block42[id.x * 42 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19); block42[id.x * 42 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20); block42[id.x * 42 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21); block42[id.x * 42 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22); block42[id.x * 42 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23); block42[id.x * 42 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24); block42[id.x * 42 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25); block42[id.x * 42 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26); block42[id.x * 42 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27); block42[id.x * 42 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28); block42[id.x * 42 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29); block42[id.x * 42 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30); block42[id.x * 42 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31); block42[id.x * 42 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32); block42[id.x * 42 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33); block42[id.x * 42 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34); block42[id.x * 42 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35); block42[id.x * 42 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36); block42[id.x * 42 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37); block42[id.x * 42 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38); block42[id.x * 42 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39); block42[id.x * 42 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40); block42[id.x * 42 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41); block42[id.x * 42 + 41] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block42[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block42[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;;
}


[numthreads(TPB, 1, 1)] void YBlur44(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;;
	LOAD(0, i, 44);
	block44[0 * TPB + id.x] = i;
	LOAD(1, i, 44);
	block44[1 * TPB + id.x] = i;
	LOAD(2, i, 44);
	block44[2 * TPB + id.x] = i;
	LOAD(3, i, 44);
	block44[3 * TPB + id.x] = i;
	LOAD(4, i, 44);
	block44[4 * TPB + id.x] = i;
	LOAD(5, i, 44);
	block44[5 * TPB + id.x] = i;
	LOAD(6, i, 44);
	block44[6 * TPB + id.x] = i;
	LOAD(7, i, 44);
	block44[7 * TPB + id.x] = i;
	LOAD(8, i, 44);
	block44[8 * TPB + id.x] = i;
	LOAD(9, i, 44);
	block44[9 * TPB + id.x] = i;
	LOAD(10, i, 44);
	block44[10 * TPB + id.x] = i;
	LOAD(11, i, 44);
	block44[11 * TPB + id.x] = i;
	LOAD(12, i, 44);
	block44[12 * TPB + id.x] = i;
	LOAD(13, i, 44);
	block44[13 * TPB + id.x] = i;
	LOAD(14, i, 44);
	block44[14 * TPB + id.x] = i;
	LOAD(15, i, 44);
	block44[15 * TPB + id.x] = i;
	LOAD(16, i, 44);
	block44[16 * TPB + id.x] = i;
	LOAD(17, i, 44);
	block44[17 * TPB + id.x] = i;
	LOAD(18, i, 44);
	block44[18 * TPB + id.x] = i;
	LOAD(19, i, 44);
	block44[19 * TPB + id.x] = i;
	LOAD(20, i, 44);
	block44[20 * TPB + id.x] = i;
	LOAD(21, i, 44);
	block44[21 * TPB + id.x] = i;
	LOAD(22, i, 44);
	block44[22 * TPB + id.x] = i;
	LOAD(23, i, 44);
	block44[23 * TPB + id.x] = i;
	LOAD(24, i, 44);
	block44[24 * TPB + id.x] = i;
	LOAD(25, i, 44);
	block44[25 * TPB + id.x] = i;
	LOAD(26, i, 44);
	block44[26 * TPB + id.x] = i;
	LOAD(27, i, 44);
	block44[27 * TPB + id.x] = i;
	LOAD(28, i, 44);
	block44[28 * TPB + id.x] = i;
	LOAD(29, i, 44);
	block44[29 * TPB + id.x] = i;
	LOAD(30, i, 44);
	block44[30 * TPB + id.x] = i;
	LOAD(31, i, 44);
	block44[31 * TPB + id.x] = i;
	LOAD(32, i, 44);
	block44[32 * TPB + id.x] = i;
	LOAD(33, i, 44);
	block44[33 * TPB + id.x] = i;
	LOAD(34, i, 44);
	block44[34 * TPB + id.x] = i;
	LOAD(35, i, 44);
	block44[35 * TPB + id.x] = i;
	LOAD(36, i, 44);
	block44[36 * TPB + id.x] = i;
	LOAD(37, i, 44);
	block44[37 * TPB + id.x] = i;
	LOAD(38, i, 44);
	block44[38 * TPB + id.x] = i;
	LOAD(39, i, 44);
	block44[39 * TPB + id.x] = i;
	LOAD(40, i, 44);
	block44[40 * TPB + id.x] = i;
	LOAD(41, i, 44);
	block44[41 * TPB + id.x] = i;
	LOAD(42, i, 44);
	block44[42 * TPB + id.x] = i;
	LOAD(43, i, 44);
	block44[43 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block44[id.x * 44 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block44[id.x * 44 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block44[id.x * 44 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block44[id.x * 44 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block44[id.x * 44 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block44[id.x * 44 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block44[id.x * 44 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block44[id.x * 44 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block44[id.x * 44 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block44[id.x * 44 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block44[id.x * 44 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block44[id.x * 44 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block44[id.x * 44 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block44[id.x * 44 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block44[id.x * 44 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block44[id.x * 44 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block44[id.x * 44 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block44[id.x * 44 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block44[id.x * 44 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block44[id.x * 44 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block44[id.x * 44 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block44[id.x * 44 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block44[id.x * 44 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block44[id.x * 44 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block44[id.x * 44 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block44[id.x * 44 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block44[id.x * 44 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block44[id.x * 44 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block44[id.x * 44 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block44[id.x * 44 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block44[id.x * 44 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block44[id.x * 44 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block44[id.x * 44 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block44[id.x * 44 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block44[id.x * 44 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block44[id.x * 44 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block44[id.x * 44 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block44[id.x * 44 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block44[id.x * 44 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block44[id.x * 44 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block44[id.x * 44 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block44[id.x * 44 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block44[id.x * 44 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block44[id.x * 44 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr43;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg43;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb43;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr43 = celr43 * W + regr[(44 & 1) ^ 1];
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg43 = celg43 * W + regg[(44 & 1) ^ 1];
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb43 = celb43 * W + regb[(44 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block44[id.x * 44 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block44[id.x * 44 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block44[id.x * 44 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block44[id.x * 44 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block44[id.x * 44 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block44[id.x * 44 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block44[id.x * 44 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block44[id.x * 44 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block44[id.x * 44 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block44[id.x * 44 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block44[id.x * 44 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block44[id.x * 44 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block44[id.x * 44 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block44[id.x * 44 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block44[id.x * 44 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block44[id.x * 44 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block44[id.x * 44 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block44[id.x * 44 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block44[id.x * 44 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block44[id.x * 44 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block44[id.x * 44 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block44[id.x * 44 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block44[id.x * 44 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block44[id.x * 44 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block44[id.x * 44 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block44[id.x * 44 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block44[id.x * 44 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block44[id.x * 44 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block44[id.x * 44 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block44[id.x * 44 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block44[id.x * 44 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block44[id.x * 44 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block44[id.x * 44 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block44[id.x * 44 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block44[id.x * 44 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block44[id.x * 44 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block44[id.x * 44 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block44[id.x * 44 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block44[id.x * 44 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block44[id.x * 44 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block44[id.x * 44 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block44[id.x * 44 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block44[id.x * 44 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block44[id.x * 44 + 43] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block44[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[42 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 42 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block44[43 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 43 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)] void YBlur46(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;;
	LOAD(0, i, 46);
	block46[0 * TPB + id.x] = i;
	LOAD(1, i, 46);
	block46[1 * TPB + id.x] = i;
	LOAD(2, i, 46);
	block46[2 * TPB + id.x] = i;
	LOAD(3, i, 46);
	block46[3 * TPB + id.x] = i;
	LOAD(4, i, 46);
	block46[4 * TPB + id.x] = i;
	LOAD(5, i, 46);
	block46[5 * TPB + id.x] = i;
	LOAD(6, i, 46);
	block46[6 * TPB + id.x] = i;
	LOAD(7, i, 46);
	block46[7 * TPB + id.x] = i;
	LOAD(8, i, 46);
	block46[8 * TPB + id.x] = i;
	LOAD(9, i, 46);
	block46[9 * TPB + id.x] = i;
	LOAD(10, i, 46);
	block46[10 * TPB + id.x] = i;
	LOAD(11, i, 46);
	block46[11 * TPB + id.x] = i;
	LOAD(12, i, 46);
	block46[12 * TPB + id.x] = i;
	LOAD(13, i, 46);
	block46[13 * TPB + id.x] = i;
	LOAD(14, i, 46);
	block46[14 * TPB + id.x] = i;
	LOAD(15, i, 46);
	block46[15 * TPB + id.x] = i;
	LOAD(16, i, 46);
	block46[16 * TPB + id.x] = i;
	LOAD(17, i, 46);
	block46[17 * TPB + id.x] = i;
	LOAD(18, i, 46);
	block46[18 * TPB + id.x] = i;
	LOAD(19, i, 46);
	block46[19 * TPB + id.x] = i;
	LOAD(20, i, 46);
	block46[20 * TPB + id.x] = i;
	LOAD(21, i, 46);
	block46[21 * TPB + id.x] = i;
	LOAD(22, i, 46);
	block46[22 * TPB + id.x] = i;
	LOAD(23, i, 46);
	block46[23 * TPB + id.x] = i;
	LOAD(24, i, 46);
	block46[24 * TPB + id.x] = i;
	LOAD(25, i, 46);
	block46[25 * TPB + id.x] = i;
	LOAD(26, i, 46);
	block46[26 * TPB + id.x] = i;
	LOAD(27, i, 46);
	block46[27 * TPB + id.x] = i;
	LOAD(28, i, 46);
	block46[28 * TPB + id.x] = i;
	LOAD(29, i, 46);
	block46[29 * TPB + id.x] = i;
	LOAD(30, i, 46);
	block46[30 * TPB + id.x] = i;
	LOAD(31, i, 46);
	block46[31 * TPB + id.x] = i;
	LOAD(32, i, 46);
	block46[32 * TPB + id.x] = i;
	LOAD(33, i, 46);
	block46[33 * TPB + id.x] = i;
	LOAD(34, i, 46);
	block46[34 * TPB + id.x] = i;
	LOAD(35, i, 46);
	block46[35 * TPB + id.x] = i;
	LOAD(36, i, 46);
	block46[36 * TPB + id.x] = i;
	LOAD(37, i, 46);
	block46[37 * TPB + id.x] = i;
	LOAD(38, i, 46);
	block46[38 * TPB + id.x] = i;
	LOAD(39, i, 46);
	block46[39 * TPB + id.x] = i;
	LOAD(40, i, 46);
	block46[40 * TPB + id.x] = i;
	LOAD(41, i, 46);
	block46[41 * TPB + id.x] = i;
	LOAD(42, i, 46);
	block46[42 * TPB + id.x] = i;
	LOAD(43, i, 46);
	block46[43 * TPB + id.x] = i;
	LOAD(44, i, 46);
	block46[44 * TPB + id.x] = i;
	LOAD(45, i, 46);
	block46[45 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block46[id.x * 46 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block46[id.x * 46 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block46[id.x * 46 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block46[id.x * 46 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block46[id.x * 46 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block46[id.x * 46 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block46[id.x * 46 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block46[id.x * 46 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block46[id.x * 46 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block46[id.x * 46 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block46[id.x * 46 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block46[id.x * 46 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block46[id.x * 46 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block46[id.x * 46 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block46[id.x * 46 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block46[id.x * 46 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block46[id.x * 46 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block46[id.x * 46 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block46[id.x * 46 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block46[id.x * 46 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block46[id.x * 46 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block46[id.x * 46 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block46[id.x * 46 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block46[id.x * 46 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block46[id.x * 46 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block46[id.x * 46 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block46[id.x * 46 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block46[id.x * 46 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block46[id.x * 46 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block46[id.x * 46 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block46[id.x * 46 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block46[id.x * 46 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block46[id.x * 46 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block46[id.x * 46 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block46[id.x * 46 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block46[id.x * 46 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block46[id.x * 46 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block46[id.x * 46 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block46[id.x * 46 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block46[id.x * 46 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block46[id.x * 46 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block46[id.x * 46 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block46[id.x * 46 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block46[id.x * 46 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block46[id.x * 46 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block46[id.x * 46 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr45;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg45;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb45;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr45 = celr45 * W + regr[(46 & 1) ^ 1];
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg45 = celg45 * W + regg[(46 & 1) ^ 1];
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb45 = celb45 * W + regb[(46 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block46[id.x * 46 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block46[id.x * 46 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block46[id.x * 46 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block46[id.x * 46 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block46[id.x * 46 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block46[id.x * 46 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block46[id.x * 46 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block46[id.x * 46 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block46[id.x * 46 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block46[id.x * 46 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block46[id.x * 46 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block46[id.x * 46 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block46[id.x * 46 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block46[id.x * 46 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block46[id.x * 46 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block46[id.x * 46 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block46[id.x * 46 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block46[id.x * 46 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block46[id.x * 46 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block46[id.x * 46 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block46[id.x * 46 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block46[id.x * 46 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block46[id.x * 46 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block46[id.x * 46 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block46[id.x * 46 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block46[id.x * 46 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block46[id.x * 46 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block46[id.x * 46 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block46[id.x * 46 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block46[id.x * 46 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block46[id.x * 46 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block46[id.x * 46 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block46[id.x * 46 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block46[id.x * 46 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block46[id.x * 46 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block46[id.x * 46 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block46[id.x * 46 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block46[id.x * 46 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block46[id.x * 46 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block46[id.x * 46 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block46[id.x * 46 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block46[id.x * 46 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block46[id.x * 46 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block46[id.x * 46 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block46[id.x * 46 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block46[id.x * 46 + 45] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block46[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[42 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 42 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[43 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 43 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[44 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 44 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block46[45 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 45 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)] void YBlur48(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;;
	LOAD(0, i, 48);
	block48[0 * TPB + id.x] = i;
	LOAD(1, i, 48);
	block48[1 * TPB + id.x] = i;
	LOAD(2, i, 48);
	block48[2 * TPB + id.x] = i;
	LOAD(3, i, 48);
	block48[3 * TPB + id.x] = i;
	LOAD(4, i, 48);
	block48[4 * TPB + id.x] = i;
	LOAD(5, i, 48);
	block48[5 * TPB + id.x] = i;
	LOAD(6, i, 48);
	block48[6 * TPB + id.x] = i;
	LOAD(7, i, 48);
	block48[7 * TPB + id.x] = i;
	LOAD(8, i, 48);
	block48[8 * TPB + id.x] = i;
	LOAD(9, i, 48);
	block48[9 * TPB + id.x] = i;
	LOAD(10, i, 48);
	block48[10 * TPB + id.x] = i;
	LOAD(11, i, 48);
	block48[11 * TPB + id.x] = i;
	LOAD(12, i, 48);
	block48[12 * TPB + id.x] = i;
	LOAD(13, i, 48);
	block48[13 * TPB + id.x] = i;
	LOAD(14, i, 48);
	block48[14 * TPB + id.x] = i;
	LOAD(15, i, 48);
	block48[15 * TPB + id.x] = i;
	LOAD(16, i, 48);
	block48[16 * TPB + id.x] = i;
	LOAD(17, i, 48);
	block48[17 * TPB + id.x] = i;
	LOAD(18, i, 48);
	block48[18 * TPB + id.x] = i;
	LOAD(19, i, 48);
	block48[19 * TPB + id.x] = i;
	LOAD(20, i, 48);
	block48[20 * TPB + id.x] = i;
	LOAD(21, i, 48);
	block48[21 * TPB + id.x] = i;
	LOAD(22, i, 48);
	block48[22 * TPB + id.x] = i;
	LOAD(23, i, 48);
	block48[23 * TPB + id.x] = i;
	LOAD(24, i, 48);
	block48[24 * TPB + id.x] = i;
	LOAD(25, i, 48);
	block48[25 * TPB + id.x] = i;
	LOAD(26, i, 48);
	block48[26 * TPB + id.x] = i;
	LOAD(27, i, 48);
	block48[27 * TPB + id.x] = i;
	LOAD(28, i, 48);
	block48[28 * TPB + id.x] = i;
	LOAD(29, i, 48);
	block48[29 * TPB + id.x] = i;
	LOAD(30, i, 48);
	block48[30 * TPB + id.x] = i;
	LOAD(31, i, 48);
	block48[31 * TPB + id.x] = i;
	LOAD(32, i, 48);
	block48[32 * TPB + id.x] = i;
	LOAD(33, i, 48);
	block48[33 * TPB + id.x] = i;
	LOAD(34, i, 48);
	block48[34 * TPB + id.x] = i;
	LOAD(35, i, 48);
	block48[35 * TPB + id.x] = i;
	LOAD(36, i, 48);
	block48[36 * TPB + id.x] = i;
	LOAD(37, i, 48);
	block48[37 * TPB + id.x] = i;
	LOAD(38, i, 48);
	block48[38 * TPB + id.x] = i;
	LOAD(39, i, 48);
	block48[39 * TPB + id.x] = i;
	LOAD(40, i, 48);
	block48[40 * TPB + id.x] = i;
	LOAD(41, i, 48);
	block48[41 * TPB + id.x] = i;
	LOAD(42, i, 48);
	block48[42 * TPB + id.x] = i;
	LOAD(43, i, 48);
	block48[43 * TPB + id.x] = i;
	LOAD(44, i, 48);
	block48[44 * TPB + id.x] = i;
	LOAD(45, i, 48);
	block48[45 * TPB + id.x] = i;
	LOAD(46, i, 48);
	block48[46 * TPB + id.x] = i;
	LOAD(47, i, 48);
	block48[47 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block48[id.x * 48 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block48[id.x * 48 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block48[id.x * 48 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block48[id.x * 48 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block48[id.x * 48 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block48[id.x * 48 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block48[id.x * 48 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block48[id.x * 48 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block48[id.x * 48 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block48[id.x * 48 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block48[id.x * 48 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block48[id.x * 48 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block48[id.x * 48 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block48[id.x * 48 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block48[id.x * 48 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block48[id.x * 48 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block48[id.x * 48 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block48[id.x * 48 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block48[id.x * 48 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block48[id.x * 48 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block48[id.x * 48 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block48[id.x * 48 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block48[id.x * 48 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block48[id.x * 48 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block48[id.x * 48 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block48[id.x * 48 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block48[id.x * 48 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block48[id.x * 48 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block48[id.x * 48 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block48[id.x * 48 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block48[id.x * 48 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block48[id.x * 48 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block48[id.x * 48 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block48[id.x * 48 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block48[id.x * 48 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block48[id.x * 48 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block48[id.x * 48 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block48[id.x * 48 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block48[id.x * 48 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block48[id.x * 48 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block48[id.x * 48 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block48[id.x * 48 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block48[id.x * 48 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block48[id.x * 48 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block48[id.x * 48 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block48[id.x * 48 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block48[id.x * 48 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block48[id.x * 48 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr47;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg47;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb47;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr47 = celr47 * W + regr[(48 & 1) ^ 1];
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg47 = celg47 * W + regg[(48 & 1) ^ 1];
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb47 = celb47 * W + regb[(48 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block48[id.x * 48 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block48[id.x * 48 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block48[id.x * 48 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block48[id.x * 48 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block48[id.x * 48 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block48[id.x * 48 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block48[id.x * 48 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block48[id.x * 48 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block48[id.x * 48 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block48[id.x * 48 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block48[id.x * 48 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block48[id.x * 48 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block48[id.x * 48 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block48[id.x * 48 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block48[id.x * 48 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block48[id.x * 48 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block48[id.x * 48 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block48[id.x * 48 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block48[id.x * 48 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block48[id.x * 48 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block48[id.x * 48 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block48[id.x * 48 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block48[id.x * 48 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block48[id.x * 48 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block48[id.x * 48 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block48[id.x * 48 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block48[id.x * 48 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block48[id.x * 48 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block48[id.x * 48 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block48[id.x * 48 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block48[id.x * 48 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block48[id.x * 48 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block48[id.x * 48 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block48[id.x * 48 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block48[id.x * 48 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block48[id.x * 48 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block48[id.x * 48 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block48[id.x * 48 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block48[id.x * 48 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block48[id.x * 48 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block48[id.x * 48 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block48[id.x * 48 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block48[id.x * 48 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block48[id.x * 48 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block48[id.x * 48 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block48[id.x * 48 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block48[id.x * 48 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block48[id.x * 48 + 47] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block48[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[42 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 42 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[43 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 43 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[44 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 44 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[45 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 45 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[46 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 46 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block48[47 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 47 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)] void YBlur50(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;;
	LOAD(0, i, 50);
	block50[0 * TPB + id.x] = i;
	LOAD(1, i, 50);
	block50[1 * TPB + id.x] = i;
	LOAD(2, i, 50);
	block50[2 * TPB + id.x] = i;
	LOAD(3, i, 50);
	block50[3 * TPB + id.x] = i;
	LOAD(4, i, 50);
	block50[4 * TPB + id.x] = i;
	LOAD(5, i, 50);
	block50[5 * TPB + id.x] = i;
	LOAD(6, i, 50);
	block50[6 * TPB + id.x] = i;
	LOAD(7, i, 50);
	block50[7 * TPB + id.x] = i;
	LOAD(8, i, 50);
	block50[8 * TPB + id.x] = i;
	LOAD(9, i, 50);
	block50[9 * TPB + id.x] = i;
	LOAD(10, i, 50);
	block50[10 * TPB + id.x] = i;
	LOAD(11, i, 50);
	block50[11 * TPB + id.x] = i;
	LOAD(12, i, 50);
	block50[12 * TPB + id.x] = i;
	LOAD(13, i, 50);
	block50[13 * TPB + id.x] = i;
	LOAD(14, i, 50);
	block50[14 * TPB + id.x] = i;
	LOAD(15, i, 50);
	block50[15 * TPB + id.x] = i;
	LOAD(16, i, 50);
	block50[16 * TPB + id.x] = i;
	LOAD(17, i, 50);
	block50[17 * TPB + id.x] = i;
	LOAD(18, i, 50);
	block50[18 * TPB + id.x] = i;
	LOAD(19, i, 50);
	block50[19 * TPB + id.x] = i;
	LOAD(20, i, 50);
	block50[20 * TPB + id.x] = i;
	LOAD(21, i, 50);
	block50[21 * TPB + id.x] = i;
	LOAD(22, i, 50);
	block50[22 * TPB + id.x] = i;
	LOAD(23, i, 50);
	block50[23 * TPB + id.x] = i;
	LOAD(24, i, 50);
	block50[24 * TPB + id.x] = i;
	LOAD(25, i, 50);
	block50[25 * TPB + id.x] = i;
	LOAD(26, i, 50);
	block50[26 * TPB + id.x] = i;
	LOAD(27, i, 50);
	block50[27 * TPB + id.x] = i;
	LOAD(28, i, 50);
	block50[28 * TPB + id.x] = i;
	LOAD(29, i, 50);
	block50[29 * TPB + id.x] = i;
	LOAD(30, i, 50);
	block50[30 * TPB + id.x] = i;
	LOAD(31, i, 50);
	block50[31 * TPB + id.x] = i;
	LOAD(32, i, 50);
	block50[32 * TPB + id.x] = i;
	LOAD(33, i, 50);
	block50[33 * TPB + id.x] = i;
	LOAD(34, i, 50);
	block50[34 * TPB + id.x] = i;
	LOAD(35, i, 50);
	block50[35 * TPB + id.x] = i;
	LOAD(36, i, 50);
	block50[36 * TPB + id.x] = i;
	LOAD(37, i, 50);
	block50[37 * TPB + id.x] = i;
	LOAD(38, i, 50);
	block50[38 * TPB + id.x] = i;
	LOAD(39, i, 50);
	block50[39 * TPB + id.x] = i;
	LOAD(40, i, 50);
	block50[40 * TPB + id.x] = i;
	LOAD(41, i, 50);
	block50[41 * TPB + id.x] = i;
	LOAD(42, i, 50);
	block50[42 * TPB + id.x] = i;
	LOAD(43, i, 50);
	block50[43 * TPB + id.x] = i;
	LOAD(44, i, 50);
	block50[44 * TPB + id.x] = i;
	LOAD(45, i, 50);
	block50[45 * TPB + id.x] = i;
	LOAD(46, i, 50);
	block50[46 * TPB + id.x] = i;
	LOAD(47, i, 50);
	block50[47 * TPB + id.x] = i;
	LOAD(48, i, 50);
	block50[48 * TPB + id.x] = i;
	LOAD(49, i, 50);
	block50[49 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block50[id.x * 50 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block50[id.x * 50 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block50[id.x * 50 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block50[id.x * 50 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block50[id.x * 50 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block50[id.x * 50 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block50[id.x * 50 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block50[id.x * 50 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block50[id.x * 50 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block50[id.x * 50 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block50[id.x * 50 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block50[id.x * 50 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block50[id.x * 50 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block50[id.x * 50 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block50[id.x * 50 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block50[id.x * 50 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block50[id.x * 50 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block50[id.x * 50 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block50[id.x * 50 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block50[id.x * 50 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block50[id.x * 50 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block50[id.x * 50 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block50[id.x * 50 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block50[id.x * 50 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block50[id.x * 50 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block50[id.x * 50 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block50[id.x * 50 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block50[id.x * 50 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block50[id.x * 50 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block50[id.x * 50 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block50[id.x * 50 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block50[id.x * 50 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block50[id.x * 50 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block50[id.x * 50 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block50[id.x * 50 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block50[id.x * 50 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block50[id.x * 50 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block50[id.x * 50 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block50[id.x * 50 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block50[id.x * 50 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block50[id.x * 50 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block50[id.x * 50 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block50[id.x * 50 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block50[id.x * 50 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block50[id.x * 50 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block50[id.x * 50 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block50[id.x * 50 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block50[id.x * 50 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block50[id.x * 50 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block50[id.x * 50 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr49;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg49;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb49;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];;
		regr[(50 & 1) ^ 1] = regr[(50 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr49 = celr49 * W + regr[(50 & 1) ^ 1];
		regg[(50 & 1) ^ 1] = regg[(50 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg49 = celg49 * W + regg[(50 & 1) ^ 1];
		regb[(50 & 1) ^ 1] = regb[(50 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb49 = celb49 * W + regb[(50 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block50[id.x * 50 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block50[id.x * 50 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block50[id.x * 50 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block50[id.x * 50 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block50[id.x * 50 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block50[id.x * 50 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block50[id.x * 50 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block50[id.x * 50 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block50[id.x * 50 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block50[id.x * 50 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block50[id.x * 50 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block50[id.x * 50 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block50[id.x * 50 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block50[id.x * 50 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block50[id.x * 50 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block50[id.x * 50 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block50[id.x * 50 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block50[id.x * 50 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block50[id.x * 50 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block50[id.x * 50 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block50[id.x * 50 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block50[id.x * 50 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block50[id.x * 50 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block50[id.x * 50 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block50[id.x * 50 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block50[id.x * 50 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block50[id.x * 50 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block50[id.x * 50 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block50[id.x * 50 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block50[id.x * 50 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block50[id.x * 50 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block50[id.x * 50 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block50[id.x * 50 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block50[id.x * 50 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block50[id.x * 50 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block50[id.x * 50 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block50[id.x * 50 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block50[id.x * 50 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block50[id.x * 50 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block50[id.x * 50 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block50[id.x * 50 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block50[id.x * 50 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block50[id.x * 50 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block50[id.x * 50 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block50[id.x * 50 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block50[id.x * 50 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block50[id.x * 50 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block50[id.x * 50 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block50[id.x * 50 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block50[id.x * 50 + 49] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block50[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[42 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 42 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[43 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 43 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[44 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 44 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[45 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 45 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[46 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 46 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[47 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 47 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[48 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 48 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block50[49 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 49 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)] void YBlur52(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;
	float celr50;
	float celg50;
	float celb50;
	float celr51;
	float celg51;
	float celb51;;
	LOAD(0, i, 52);
	block52[0 * TPB + id.x] = i;
	LOAD(1, i, 52);
	block52[1 * TPB + id.x] = i;
	LOAD(2, i, 52);
	block52[2 * TPB + id.x] = i;
	LOAD(3, i, 52);
	block52[3 * TPB + id.x] = i;
	LOAD(4, i, 52);
	block52[4 * TPB + id.x] = i;
	LOAD(5, i, 52);
	block52[5 * TPB + id.x] = i;
	LOAD(6, i, 52);
	block52[6 * TPB + id.x] = i;
	LOAD(7, i, 52);
	block52[7 * TPB + id.x] = i;
	LOAD(8, i, 52);
	block52[8 * TPB + id.x] = i;
	LOAD(9, i, 52);
	block52[9 * TPB + id.x] = i;
	LOAD(10, i, 52);
	block52[10 * TPB + id.x] = i;
	LOAD(11, i, 52);
	block52[11 * TPB + id.x] = i;
	LOAD(12, i, 52);
	block52[12 * TPB + id.x] = i;
	LOAD(13, i, 52);
	block52[13 * TPB + id.x] = i;
	LOAD(14, i, 52);
	block52[14 * TPB + id.x] = i;
	LOAD(15, i, 52);
	block52[15 * TPB + id.x] = i;
	LOAD(16, i, 52);
	block52[16 * TPB + id.x] = i;
	LOAD(17, i, 52);
	block52[17 * TPB + id.x] = i;
	LOAD(18, i, 52);
	block52[18 * TPB + id.x] = i;
	LOAD(19, i, 52);
	block52[19 * TPB + id.x] = i;
	LOAD(20, i, 52);
	block52[20 * TPB + id.x] = i;
	LOAD(21, i, 52);
	block52[21 * TPB + id.x] = i;
	LOAD(22, i, 52);
	block52[22 * TPB + id.x] = i;
	LOAD(23, i, 52);
	block52[23 * TPB + id.x] = i;
	LOAD(24, i, 52);
	block52[24 * TPB + id.x] = i;
	LOAD(25, i, 52);
	block52[25 * TPB + id.x] = i;
	LOAD(26, i, 52);
	block52[26 * TPB + id.x] = i;
	LOAD(27, i, 52);
	block52[27 * TPB + id.x] = i;
	LOAD(28, i, 52);
	block52[28 * TPB + id.x] = i;
	LOAD(29, i, 52);
	block52[29 * TPB + id.x] = i;
	LOAD(30, i, 52);
	block52[30 * TPB + id.x] = i;
	LOAD(31, i, 52);
	block52[31 * TPB + id.x] = i;
	LOAD(32, i, 52);
	block52[32 * TPB + id.x] = i;
	LOAD(33, i, 52);
	block52[33 * TPB + id.x] = i;
	LOAD(34, i, 52);
	block52[34 * TPB + id.x] = i;
	LOAD(35, i, 52);
	block52[35 * TPB + id.x] = i;
	LOAD(36, i, 52);
	block52[36 * TPB + id.x] = i;
	LOAD(37, i, 52);
	block52[37 * TPB + id.x] = i;
	LOAD(38, i, 52);
	block52[38 * TPB + id.x] = i;
	LOAD(39, i, 52);
	block52[39 * TPB + id.x] = i;
	LOAD(40, i, 52);
	block52[40 * TPB + id.x] = i;
	LOAD(41, i, 52);
	block52[41 * TPB + id.x] = i;
	LOAD(42, i, 52);
	block52[42 * TPB + id.x] = i;
	LOAD(43, i, 52);
	block52[43 * TPB + id.x] = i;
	LOAD(44, i, 52);
	block52[44 * TPB + id.x] = i;
	LOAD(45, i, 52);
	block52[45 * TPB + id.x] = i;
	LOAD(46, i, 52);
	block52[46 * TPB + id.x] = i;
	LOAD(47, i, 52);
	block52[47 * TPB + id.x] = i;
	LOAD(48, i, 52);
	block52[48 * TPB + id.x] = i;
	LOAD(49, i, 52);
	block52[49 * TPB + id.x] = i;
	LOAD(50, i, 52);
	block52[50 * TPB + id.x] = i;
	LOAD(51, i, 52);
	block52[51 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block52[id.x * 52 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block52[id.x * 52 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block52[id.x * 52 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block52[id.x * 52 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block52[id.x * 52 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block52[id.x * 52 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block52[id.x * 52 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block52[id.x * 52 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block52[id.x * 52 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block52[id.x * 52 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block52[id.x * 52 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block52[id.x * 52 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block52[id.x * 52 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block52[id.x * 52 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block52[id.x * 52 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block52[id.x * 52 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block52[id.x * 52 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block52[id.x * 52 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block52[id.x * 52 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block52[id.x * 52 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block52[id.x * 52 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block52[id.x * 52 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block52[id.x * 52 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block52[id.x * 52 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block52[id.x * 52 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block52[id.x * 52 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block52[id.x * 52 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block52[id.x * 52 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block52[id.x * 52 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block52[id.x * 52 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block52[id.x * 52 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block52[id.x * 52 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block52[id.x * 52 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block52[id.x * 52 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block52[id.x * 52 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block52[id.x * 52 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block52[id.x * 52 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block52[id.x * 52 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block52[id.x * 52 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block52[id.x * 52 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block52[id.x * 52 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block52[id.x * 52 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block52[id.x * 52 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block52[id.x * 52 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block52[id.x * 52 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block52[id.x * 52 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block52[id.x * 52 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block52[id.x * 52 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block52[id.x * 52 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block52[id.x * 52 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);
	i = block52[id.x * 52 + 50];
	celr50 = (i % 256);
	celg50 = (i / 256 % 256);
	celb50 = (i / 65536 % 256);
	i = block52[id.x * 52 + 51];
	celr51 = (i % 256);
	celg51 = (i / 256 % 256);
	celb51 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr51;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg51;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb51;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];
		regr[48 & 1] = celr49 * WLR;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + celr50 * WLR;
		celr49 = celr49 * W + regr[(48 & 1) ^ 1];
		regg[48 & 1] = celg49 * WLR;
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + celg50 * WLR;
		celg49 = celg49 * W + regg[(48 & 1) ^ 1];
		regb[48 & 1] = celb49 * WLR;
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + celb50 * WLR;
		celb49 = celb49 * W + regb[(48 & 1) ^ 1];
		regr[49 & 1] = celr50 * WLR;
		regr[(49 & 1) ^ 1] = regr[(49 & 1) ^ 1] + celr51 * WLR;
		celr50 = celr50 * W + regr[(49 & 1) ^ 1];
		regg[49 & 1] = celg50 * WLR;
		regg[(49 & 1) ^ 1] = regg[(49 & 1) ^ 1] + celg51 * WLR;
		celg50 = celg50 * W + regg[(49 & 1) ^ 1];
		regb[49 & 1] = celb50 * WLR;
		regb[(49 & 1) ^ 1] = regb[(49 & 1) ^ 1] + celb51 * WLR;
		celb50 = celb50 * W + regb[(49 & 1) ^ 1];;
		regr[(52 & 1) ^ 1] = regr[(52 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr51 = celr51 * W + regr[(52 & 1) ^ 1];
		regg[(52 & 1) ^ 1] = regg[(52 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg51 = celg51 * W + regg[(52 & 1) ^ 1];
		regb[(52 & 1) ^ 1] = regb[(52 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb51 = celb51 * W + regb[(52 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block52[id.x * 52 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block52[id.x * 52 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block52[id.x * 52 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block52[id.x * 52 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block52[id.x * 52 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block52[id.x * 52 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block52[id.x * 52 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block52[id.x * 52 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block52[id.x * 52 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block52[id.x * 52 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block52[id.x * 52 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block52[id.x * 52 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block52[id.x * 52 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block52[id.x * 52 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block52[id.x * 52 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block52[id.x * 52 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block52[id.x * 52 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block52[id.x * 52 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block52[id.x * 52 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block52[id.x * 52 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block52[id.x * 52 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block52[id.x * 52 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block52[id.x * 52 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block52[id.x * 52 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block52[id.x * 52 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block52[id.x * 52 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block52[id.x * 52 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block52[id.x * 52 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block52[id.x * 52 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block52[id.x * 52 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block52[id.x * 52 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block52[id.x * 52 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block52[id.x * 52 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block52[id.x * 52 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block52[id.x * 52 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block52[id.x * 52 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block52[id.x * 52 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block52[id.x * 52 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block52[id.x * 52 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block52[id.x * 52 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block52[id.x * 52 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block52[id.x * 52 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block52[id.x * 52 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block52[id.x * 52 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block52[id.x * 52 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block52[id.x * 52 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block52[id.x * 52 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block52[id.x * 52 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block52[id.x * 52 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block52[id.x * 52 + 49] = i;
	i = ((uint)celr50) + 256 * ((uint)celg50) + 65536 * ((uint)celb50);
	block52[id.x * 52 + 50] = i;
	i = ((uint)celr51) + 256 * ((uint)celg51) + 65536 * ((uint)celb51);
	block52[id.x * 52 + 51] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block52[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[42 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 42 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[43 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 43 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[44 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 44 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[45 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 45 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[46 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 46 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[47 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 47 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[48 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 48 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[49 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 49 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[50 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 50 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block52[51 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 51 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)] void YBlur54(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;
	float celr50;
	float celg50;
	float celb50;
	float celr51;
	float celg51;
	float celb51;
	float celr52;
	float celg52;
	float celb52;
	float celr53;
	float celg53;
	float celb53;;
	LOAD(0, i, 54);
	block54[0 * TPB + id.x] = i;
	LOAD(1, i, 54);
	block54[1 * TPB + id.x] = i;
	LOAD(2, i, 54);
	block54[2 * TPB + id.x] = i;
	LOAD(3, i, 54);
	block54[3 * TPB + id.x] = i;
	LOAD(4, i, 54);
	block54[4 * TPB + id.x] = i;
	LOAD(5, i, 54);
	block54[5 * TPB + id.x] = i;
	LOAD(6, i, 54);
	block54[6 * TPB + id.x] = i;
	LOAD(7, i, 54);
	block54[7 * TPB + id.x] = i;
	LOAD(8, i, 54);
	block54[8 * TPB + id.x] = i;
	LOAD(9, i, 54);
	block54[9 * TPB + id.x] = i;
	LOAD(10, i, 54);
	block54[10 * TPB + id.x] = i;
	LOAD(11, i, 54);
	block54[11 * TPB + id.x] = i;
	LOAD(12, i, 54);
	block54[12 * TPB + id.x] = i;
	LOAD(13, i, 54);
	block54[13 * TPB + id.x] = i;
	LOAD(14, i, 54);
	block54[14 * TPB + id.x] = i;
	LOAD(15, i, 54);
	block54[15 * TPB + id.x] = i;
	LOAD(16, i, 54);
	block54[16 * TPB + id.x] = i;
	LOAD(17, i, 54);
	block54[17 * TPB + id.x] = i;
	LOAD(18, i, 54);
	block54[18 * TPB + id.x] = i;
	LOAD(19, i, 54);
	block54[19 * TPB + id.x] = i;
	LOAD(20, i, 54);
	block54[20 * TPB + id.x] = i;
	LOAD(21, i, 54);
	block54[21 * TPB + id.x] = i;
	LOAD(22, i, 54);
	block54[22 * TPB + id.x] = i;
	LOAD(23, i, 54);
	block54[23 * TPB + id.x] = i;
	LOAD(24, i, 54);
	block54[24 * TPB + id.x] = i;
	LOAD(25, i, 54);
	block54[25 * TPB + id.x] = i;
	LOAD(26, i, 54);
	block54[26 * TPB + id.x] = i;
	LOAD(27, i, 54);
	block54[27 * TPB + id.x] = i;
	LOAD(28, i, 54);
	block54[28 * TPB + id.x] = i;
	LOAD(29, i, 54);
	block54[29 * TPB + id.x] = i;
	LOAD(30, i, 54);
	block54[30 * TPB + id.x] = i;
	LOAD(31, i, 54);
	block54[31 * TPB + id.x] = i;
	LOAD(32, i, 54);
	block54[32 * TPB + id.x] = i;
	LOAD(33, i, 54);
	block54[33 * TPB + id.x] = i;
	LOAD(34, i, 54);
	block54[34 * TPB + id.x] = i;
	LOAD(35, i, 54);
	block54[35 * TPB + id.x] = i;
	LOAD(36, i, 54);
	block54[36 * TPB + id.x] = i;
	LOAD(37, i, 54);
	block54[37 * TPB + id.x] = i;
	LOAD(38, i, 54);
	block54[38 * TPB + id.x] = i;
	LOAD(39, i, 54);
	block54[39 * TPB + id.x] = i;
	LOAD(40, i, 54);
	block54[40 * TPB + id.x] = i;
	LOAD(41, i, 54);
	block54[41 * TPB + id.x] = i;
	LOAD(42, i, 54);
	block54[42 * TPB + id.x] = i;
	LOAD(43, i, 54);
	block54[43 * TPB + id.x] = i;
	LOAD(44, i, 54);
	block54[44 * TPB + id.x] = i;
	LOAD(45, i, 54);
	block54[45 * TPB + id.x] = i;
	LOAD(46, i, 54);
	block54[46 * TPB + id.x] = i;
	LOAD(47, i, 54);
	block54[47 * TPB + id.x] = i;
	LOAD(48, i, 54);
	block54[48 * TPB + id.x] = i;
	LOAD(49, i, 54);
	block54[49 * TPB + id.x] = i;
	LOAD(50, i, 54);
	block54[50 * TPB + id.x] = i;
	LOAD(51, i, 54);
	block54[51 * TPB + id.x] = i;
	LOAD(52, i, 54);
	block54[52 * TPB + id.x] = i;
	LOAD(53, i, 54);
	block54[53 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block54[id.x * 54 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block54[id.x * 54 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block54[id.x * 54 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block54[id.x * 54 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block54[id.x * 54 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block54[id.x * 54 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block54[id.x * 54 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block54[id.x * 54 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block54[id.x * 54 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block54[id.x * 54 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block54[id.x * 54 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block54[id.x * 54 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block54[id.x * 54 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block54[id.x * 54 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block54[id.x * 54 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block54[id.x * 54 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block54[id.x * 54 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block54[id.x * 54 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block54[id.x * 54 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block54[id.x * 54 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block54[id.x * 54 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block54[id.x * 54 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block54[id.x * 54 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block54[id.x * 54 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block54[id.x * 54 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block54[id.x * 54 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block54[id.x * 54 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block54[id.x * 54 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block54[id.x * 54 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block54[id.x * 54 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block54[id.x * 54 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block54[id.x * 54 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block54[id.x * 54 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block54[id.x * 54 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block54[id.x * 54 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block54[id.x * 54 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block54[id.x * 54 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block54[id.x * 54 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block54[id.x * 54 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block54[id.x * 54 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block54[id.x * 54 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block54[id.x * 54 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block54[id.x * 54 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block54[id.x * 54 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block54[id.x * 54 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block54[id.x * 54 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block54[id.x * 54 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block54[id.x * 54 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block54[id.x * 54 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block54[id.x * 54 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);
	i = block54[id.x * 54 + 50];
	celr50 = (i % 256);
	celg50 = (i / 256 % 256);
	celb50 = (i / 65536 % 256);
	i = block54[id.x * 54 + 51];
	celr51 = (i % 256);
	celg51 = (i / 256 % 256);
	celb51 = (i / 65536 % 256);
	i = block54[id.x * 54 + 52];
	celr52 = (i % 256);
	celg52 = (i / 256 % 256);
	celb52 = (i / 65536 % 256);
	i = block54[id.x * 54 + 53];
	celr53 = (i % 256);
	celg53 = (i / 256 % 256);
	celb53 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr53;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg53;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb53;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];
		regr[48 & 1] = celr49 * WLR;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + celr50 * WLR;
		celr49 = celr49 * W + regr[(48 & 1) ^ 1];
		regg[48 & 1] = celg49 * WLR;
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + celg50 * WLR;
		celg49 = celg49 * W + regg[(48 & 1) ^ 1];
		regb[48 & 1] = celb49 * WLR;
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + celb50 * WLR;
		celb49 = celb49 * W + regb[(48 & 1) ^ 1];
		regr[49 & 1] = celr50 * WLR;
		regr[(49 & 1) ^ 1] = regr[(49 & 1) ^ 1] + celr51 * WLR;
		celr50 = celr50 * W + regr[(49 & 1) ^ 1];
		regg[49 & 1] = celg50 * WLR;
		regg[(49 & 1) ^ 1] = regg[(49 & 1) ^ 1] + celg51 * WLR;
		celg50 = celg50 * W + regg[(49 & 1) ^ 1];
		regb[49 & 1] = celb50 * WLR;
		regb[(49 & 1) ^ 1] = regb[(49 & 1) ^ 1] + celb51 * WLR;
		celb50 = celb50 * W + regb[(49 & 1) ^ 1];
		regr[50 & 1] = celr51 * WLR;
		regr[(50 & 1) ^ 1] = regr[(50 & 1) ^ 1] + celr52 * WLR;
		celr51 = celr51 * W + regr[(50 & 1) ^ 1];
		regg[50 & 1] = celg51 * WLR;
		regg[(50 & 1) ^ 1] = regg[(50 & 1) ^ 1] + celg52 * WLR;
		celg51 = celg51 * W + regg[(50 & 1) ^ 1];
		regb[50 & 1] = celb51 * WLR;
		regb[(50 & 1) ^ 1] = regb[(50 & 1) ^ 1] + celb52 * WLR;
		celb51 = celb51 * W + regb[(50 & 1) ^ 1];
		regr[51 & 1] = celr52 * WLR;
		regr[(51 & 1) ^ 1] = regr[(51 & 1) ^ 1] + celr53 * WLR;
		celr52 = celr52 * W + regr[(51 & 1) ^ 1];
		regg[51 & 1] = celg52 * WLR;
		regg[(51 & 1) ^ 1] = regg[(51 & 1) ^ 1] + celg53 * WLR;
		celg52 = celg52 * W + regg[(51 & 1) ^ 1];
		regb[51 & 1] = celb52 * WLR;
		regb[(51 & 1) ^ 1] = regb[(51 & 1) ^ 1] + celb53 * WLR;
		celb52 = celb52 * W + regb[(51 & 1) ^ 1];;
		regr[(54 & 1) ^ 1] = regr[(54 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr53 = celr53 * W + regr[(54 & 1) ^ 1];
		regg[(54 & 1) ^ 1] = regg[(54 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg53 = celg53 * W + regg[(54 & 1) ^ 1];
		regb[(54 & 1) ^ 1] = regb[(54 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb53 = celb53 * W + regb[(54 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block54[id.x * 54 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block54[id.x * 54 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block54[id.x * 54 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block54[id.x * 54 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block54[id.x * 54 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block54[id.x * 54 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block54[id.x * 54 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block54[id.x * 54 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block54[id.x * 54 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block54[id.x * 54 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block54[id.x * 54 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block54[id.x * 54 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block54[id.x * 54 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block54[id.x * 54 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block54[id.x * 54 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block54[id.x * 54 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block54[id.x * 54 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block54[id.x * 54 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block54[id.x * 54 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block54[id.x * 54 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block54[id.x * 54 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block54[id.x * 54 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block54[id.x * 54 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block54[id.x * 54 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block54[id.x * 54 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block54[id.x * 54 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block54[id.x * 54 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block54[id.x * 54 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block54[id.x * 54 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block54[id.x * 54 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block54[id.x * 54 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block54[id.x * 54 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block54[id.x * 54 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block54[id.x * 54 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block54[id.x * 54 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block54[id.x * 54 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block54[id.x * 54 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block54[id.x * 54 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block54[id.x * 54 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block54[id.x * 54 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block54[id.x * 54 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block54[id.x * 54 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block54[id.x * 54 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block54[id.x * 54 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block54[id.x * 54 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block54[id.x * 54 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block54[id.x * 54 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block54[id.x * 54 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block54[id.x * 54 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block54[id.x * 54 + 49] = i;
	i = ((uint)celr50) + 256 * ((uint)celg50) + 65536 * ((uint)celb50);
	block54[id.x * 54 + 50] = i;
	i = ((uint)celr51) + 256 * ((uint)celg51) + 65536 * ((uint)celb51);
	block54[id.x * 54 + 51] = i;
	i = ((uint)celr52) + 256 * ((uint)celg52) + 65536 * ((uint)celb52);
	block54[id.x * 54 + 52] = i;
	i = ((uint)celr53) + 256 * ((uint)celg53) + 65536 * ((uint)celb53);
	block54[id.x * 54 + 53] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block54[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[42 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 42 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[43 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 43 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[44 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 44 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[45 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 45 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[46 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 46 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[47 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 47 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[48 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 48 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[49 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 49 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[50 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 50 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[51 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 51 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[52 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 52 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block54[53 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 53 * TPB + id.x)] = f4;;
}[numthreads(TPB, 1, 1)] void YBlur56(uint2 id : SV_DispatchThreadID) {
	float4 f4;
	uint i, j;
	float regr[2];
	float regg[2];
	float regb[2];
	float celr0;
	float celg0;
	float celb0;
	float celr1;
	float celg1;
	float celb1;
	float celr2;
	float celg2;
	float celb2;
	float celr3;
	float celg3;
	float celb3;
	float celr4;
	float celg4;
	float celb4;
	float celr5;
	float celg5;
	float celb5;
	float celr6;
	float celg6;
	float celb6;
	float celr7;
	float celg7;
	float celb7;
	float celr8;
	float celg8;
	float celb8;
	float celr9;
	float celg9;
	float celb9;
	float celr10;
	float celg10;
	float celb10;
	float celr11;
	float celg11;
	float celb11;
	float celr12;
	float celg12;
	float celb12;
	float celr13;
	float celg13;
	float celb13;
	float celr14;
	float celg14;
	float celb14;
	float celr15;
	float celg15;
	float celb15;
	float celr16;
	float celg16;
	float celb16;
	float celr17;
	float celg17;
	float celb17;
	float celr18;
	float celg18;
	float celb18;
	float celr19;
	float celg19;
	float celb19;
	float celr20;
	float celg20;
	float celb20;
	float celr21;
	float celg21;
	float celb21;
	float celr22;
	float celg22;
	float celb22;
	float celr23;
	float celg23;
	float celb23;
	float celr24;
	float celg24;
	float celb24;
	float celr25;
	float celg25;
	float celb25;
	float celr26;
	float celg26;
	float celb26;
	float celr27;
	float celg27;
	float celb27;
	float celr28;
	float celg28;
	float celb28;
	float celr29;
	float celg29;
	float celb29;
	float celr30;
	float celg30;
	float celb30;
	float celr31;
	float celg31;
	float celb31;
	float celr32;
	float celg32;
	float celb32;
	float celr33;
	float celg33;
	float celb33;
	float celr34;
	float celg34;
	float celb34;
	float celr35;
	float celg35;
	float celb35;
	float celr36;
	float celg36;
	float celb36;
	float celr37;
	float celg37;
	float celb37;
	float celr38;
	float celg38;
	float celb38;
	float celr39;
	float celg39;
	float celb39;
	float celr40;
	float celg40;
	float celb40;
	float celr41;
	float celg41;
	float celb41;
	float celr42;
	float celg42;
	float celb42;
	float celr43;
	float celg43;
	float celb43;
	float celr44;
	float celg44;
	float celb44;
	float celr45;
	float celg45;
	float celb45;
	float celr46;
	float celg46;
	float celb46;
	float celr47;
	float celg47;
	float celb47;
	float celr48;
	float celg48;
	float celb48;
	float celr49;
	float celg49;
	float celb49;
	float celr50;
	float celg50;
	float celb50;
	float celr51;
	float celg51;
	float celb51;
	float celr52;
	float celg52;
	float celb52;
	float celr53;
	float celg53;
	float celb53;
	float celr54;
	float celg54;
	float celb54;
	float celr55;
	float celg55;
	float celb55;;
	LOAD(0, i, 56);
	block56[0 * TPB + id.x] = i;
	LOAD(1, i, 56);
	block56[1 * TPB + id.x] = i;
	LOAD(2, i, 56);
	block56[2 * TPB + id.x] = i;
	LOAD(3, i, 56);
	block56[3 * TPB + id.x] = i;
	LOAD(4, i, 56);
	block56[4 * TPB + id.x] = i;
	LOAD(5, i, 56);
	block56[5 * TPB + id.x] = i;
	LOAD(6, i, 56);
	block56[6 * TPB + id.x] = i;
	LOAD(7, i, 56);
	block56[7 * TPB + id.x] = i;
	LOAD(8, i, 56);
	block56[8 * TPB + id.x] = i;
	LOAD(9, i, 56);
	block56[9 * TPB + id.x] = i;
	LOAD(10, i, 56);
	block56[10 * TPB + id.x] = i;
	LOAD(11, i, 56);
	block56[11 * TPB + id.x] = i;
	LOAD(12, i, 56);
	block56[12 * TPB + id.x] = i;
	LOAD(13, i, 56);
	block56[13 * TPB + id.x] = i;
	LOAD(14, i, 56);
	block56[14 * TPB + id.x] = i;
	LOAD(15, i, 56);
	block56[15 * TPB + id.x] = i;
	LOAD(16, i, 56);
	block56[16 * TPB + id.x] = i;
	LOAD(17, i, 56);
	block56[17 * TPB + id.x] = i;
	LOAD(18, i, 56);
	block56[18 * TPB + id.x] = i;
	LOAD(19, i, 56);
	block56[19 * TPB + id.x] = i;
	LOAD(20, i, 56);
	block56[20 * TPB + id.x] = i;
	LOAD(21, i, 56);
	block56[21 * TPB + id.x] = i;
	LOAD(22, i, 56);
	block56[22 * TPB + id.x] = i;
	LOAD(23, i, 56);
	block56[23 * TPB + id.x] = i;
	LOAD(24, i, 56);
	block56[24 * TPB + id.x] = i;
	LOAD(25, i, 56);
	block56[25 * TPB + id.x] = i;
	LOAD(26, i, 56);
	block56[26 * TPB + id.x] = i;
	LOAD(27, i, 56);
	block56[27 * TPB + id.x] = i;
	LOAD(28, i, 56);
	block56[28 * TPB + id.x] = i;
	LOAD(29, i, 56);
	block56[29 * TPB + id.x] = i;
	LOAD(30, i, 56);
	block56[30 * TPB + id.x] = i;
	LOAD(31, i, 56);
	block56[31 * TPB + id.x] = i;
	LOAD(32, i, 56);
	block56[32 * TPB + id.x] = i;
	LOAD(33, i, 56);
	block56[33 * TPB + id.x] = i;
	LOAD(34, i, 56);
	block56[34 * TPB + id.x] = i;
	LOAD(35, i, 56);
	block56[35 * TPB + id.x] = i;
	LOAD(36, i, 56);
	block56[36 * TPB + id.x] = i;
	LOAD(37, i, 56);
	block56[37 * TPB + id.x] = i;
	LOAD(38, i, 56);
	block56[38 * TPB + id.x] = i;
	LOAD(39, i, 56);
	block56[39 * TPB + id.x] = i;
	LOAD(40, i, 56);
	block56[40 * TPB + id.x] = i;
	LOAD(41, i, 56);
	block56[41 * TPB + id.x] = i;
	LOAD(42, i, 56);
	block56[42 * TPB + id.x] = i;
	LOAD(43, i, 56);
	block56[43 * TPB + id.x] = i;
	LOAD(44, i, 56);
	block56[44 * TPB + id.x] = i;
	LOAD(45, i, 56);
	block56[45 * TPB + id.x] = i;
	LOAD(46, i, 56);
	block56[46 * TPB + id.x] = i;
	LOAD(47, i, 56);
	block56[47 * TPB + id.x] = i;
	LOAD(48, i, 56);
	block56[48 * TPB + id.x] = i;
	LOAD(49, i, 56);
	block56[49 * TPB + id.x] = i;
	LOAD(50, i, 56);
	block56[50 * TPB + id.x] = i;
	LOAD(51, i, 56);
	block56[51 * TPB + id.x] = i;
	LOAD(52, i, 56);
	block56[52 * TPB + id.x] = i;
	LOAD(53, i, 56);
	block56[53 * TPB + id.x] = i;
	LOAD(54, i, 56);
	block56[54 * TPB + id.x] = i;
	LOAD(55, i, 56);
	block56[55 * TPB + id.x] = i;;
	GroupMemoryBarrierWithGroupSync();
	i = block56[id.x * 56 + 0];
	celr0 = (i % 256);
	celg0 = (i / 256 % 256);
	celb0 = (i / 65536 % 256);
	i = block56[id.x * 56 + 1];
	celr1 = (i % 256);
	celg1 = (i / 256 % 256);
	celb1 = (i / 65536 % 256);
	i = block56[id.x * 56 + 2];
	celr2 = (i % 256);
	celg2 = (i / 256 % 256);
	celb2 = (i / 65536 % 256);
	i = block56[id.x * 56 + 3];
	celr3 = (i % 256);
	celg3 = (i / 256 % 256);
	celb3 = (i / 65536 % 256);
	i = block56[id.x * 56 + 4];
	celr4 = (i % 256);
	celg4 = (i / 256 % 256);
	celb4 = (i / 65536 % 256);
	i = block56[id.x * 56 + 5];
	celr5 = (i % 256);
	celg5 = (i / 256 % 256);
	celb5 = (i / 65536 % 256);
	i = block56[id.x * 56 + 6];
	celr6 = (i % 256);
	celg6 = (i / 256 % 256);
	celb6 = (i / 65536 % 256);
	i = block56[id.x * 56 + 7];
	celr7 = (i % 256);
	celg7 = (i / 256 % 256);
	celb7 = (i / 65536 % 256);
	i = block56[id.x * 56 + 8];
	celr8 = (i % 256);
	celg8 = (i / 256 % 256);
	celb8 = (i / 65536 % 256);
	i = block56[id.x * 56 + 9];
	celr9 = (i % 256);
	celg9 = (i / 256 % 256);
	celb9 = (i / 65536 % 256);
	i = block56[id.x * 56 + 10];
	celr10 = (i % 256);
	celg10 = (i / 256 % 256);
	celb10 = (i / 65536 % 256);
	i = block56[id.x * 56 + 11];
	celr11 = (i % 256);
	celg11 = (i / 256 % 256);
	celb11 = (i / 65536 % 256);
	i = block56[id.x * 56 + 12];
	celr12 = (i % 256);
	celg12 = (i / 256 % 256);
	celb12 = (i / 65536 % 256);
	i = block56[id.x * 56 + 13];
	celr13 = (i % 256);
	celg13 = (i / 256 % 256);
	celb13 = (i / 65536 % 256);
	i = block56[id.x * 56 + 14];
	celr14 = (i % 256);
	celg14 = (i / 256 % 256);
	celb14 = (i / 65536 % 256);
	i = block56[id.x * 56 + 15];
	celr15 = (i % 256);
	celg15 = (i / 256 % 256);
	celb15 = (i / 65536 % 256);
	i = block56[id.x * 56 + 16];
	celr16 = (i % 256);
	celg16 = (i / 256 % 256);
	celb16 = (i / 65536 % 256);
	i = block56[id.x * 56 + 17];
	celr17 = (i % 256);
	celg17 = (i / 256 % 256);
	celb17 = (i / 65536 % 256);
	i = block56[id.x * 56 + 18];
	celr18 = (i % 256);
	celg18 = (i / 256 % 256);
	celb18 = (i / 65536 % 256);
	i = block56[id.x * 56 + 19];
	celr19 = (i % 256);
	celg19 = (i / 256 % 256);
	celb19 = (i / 65536 % 256);
	i = block56[id.x * 56 + 20];
	celr20 = (i % 256);
	celg20 = (i / 256 % 256);
	celb20 = (i / 65536 % 256);
	i = block56[id.x * 56 + 21];
	celr21 = (i % 256);
	celg21 = (i / 256 % 256);
	celb21 = (i / 65536 % 256);
	i = block56[id.x * 56 + 22];
	celr22 = (i % 256);
	celg22 = (i / 256 % 256);
	celb22 = (i / 65536 % 256);
	i = block56[id.x * 56 + 23];
	celr23 = (i % 256);
	celg23 = (i / 256 % 256);
	celb23 = (i / 65536 % 256);
	i = block56[id.x * 56 + 24];
	celr24 = (i % 256);
	celg24 = (i / 256 % 256);
	celb24 = (i / 65536 % 256);
	i = block56[id.x * 56 + 25];
	celr25 = (i % 256);
	celg25 = (i / 256 % 256);
	celb25 = (i / 65536 % 256);
	i = block56[id.x * 56 + 26];
	celr26 = (i % 256);
	celg26 = (i / 256 % 256);
	celb26 = (i / 65536 % 256);
	i = block56[id.x * 56 + 27];
	celr27 = (i % 256);
	celg27 = (i / 256 % 256);
	celb27 = (i / 65536 % 256);
	i = block56[id.x * 56 + 28];
	celr28 = (i % 256);
	celg28 = (i / 256 % 256);
	celb28 = (i / 65536 % 256);
	i = block56[id.x * 56 + 29];
	celr29 = (i % 256);
	celg29 = (i / 256 % 256);
	celb29 = (i / 65536 % 256);
	i = block56[id.x * 56 + 30];
	celr30 = (i % 256);
	celg30 = (i / 256 % 256);
	celb30 = (i / 65536 % 256);
	i = block56[id.x * 56 + 31];
	celr31 = (i % 256);
	celg31 = (i / 256 % 256);
	celb31 = (i / 65536 % 256);
	i = block56[id.x * 56 + 32];
	celr32 = (i % 256);
	celg32 = (i / 256 % 256);
	celb32 = (i / 65536 % 256);
	i = block56[id.x * 56 + 33];
	celr33 = (i % 256);
	celg33 = (i / 256 % 256);
	celb33 = (i / 65536 % 256);
	i = block56[id.x * 56 + 34];
	celr34 = (i % 256);
	celg34 = (i / 256 % 256);
	celb34 = (i / 65536 % 256);
	i = block56[id.x * 56 + 35];
	celr35 = (i % 256);
	celg35 = (i / 256 % 256);
	celb35 = (i / 65536 % 256);
	i = block56[id.x * 56 + 36];
	celr36 = (i % 256);
	celg36 = (i / 256 % 256);
	celb36 = (i / 65536 % 256);
	i = block56[id.x * 56 + 37];
	celr37 = (i % 256);
	celg37 = (i / 256 % 256);
	celb37 = (i / 65536 % 256);
	i = block56[id.x * 56 + 38];
	celr38 = (i % 256);
	celg38 = (i / 256 % 256);
	celb38 = (i / 65536 % 256);
	i = block56[id.x * 56 + 39];
	celr39 = (i % 256);
	celg39 = (i / 256 % 256);
	celb39 = (i / 65536 % 256);
	i = block56[id.x * 56 + 40];
	celr40 = (i % 256);
	celg40 = (i / 256 % 256);
	celb40 = (i / 65536 % 256);
	i = block56[id.x * 56 + 41];
	celr41 = (i % 256);
	celg41 = (i / 256 % 256);
	celb41 = (i / 65536 % 256);
	i = block56[id.x * 56 + 42];
	celr42 = (i % 256);
	celg42 = (i / 256 % 256);
	celb42 = (i / 65536 % 256);
	i = block56[id.x * 56 + 43];
	celr43 = (i % 256);
	celg43 = (i / 256 % 256);
	celb43 = (i / 65536 % 256);
	i = block56[id.x * 56 + 44];
	celr44 = (i % 256);
	celg44 = (i / 256 % 256);
	celb44 = (i / 65536 % 256);
	i = block56[id.x * 56 + 45];
	celr45 = (i % 256);
	celg45 = (i / 256 % 256);
	celb45 = (i / 65536 % 256);
	i = block56[id.x * 56 + 46];
	celr46 = (i % 256);
	celg46 = (i / 256 % 256);
	celb46 = (i / 65536 % 256);
	i = block56[id.x * 56 + 47];
	celr47 = (i % 256);
	celg47 = (i / 256 % 256);
	celb47 = (i / 65536 % 256);
	i = block56[id.x * 56 + 48];
	celr48 = (i % 256);
	celg48 = (i / 256 % 256);
	celb48 = (i / 65536 % 256);
	i = block56[id.x * 56 + 49];
	celr49 = (i % 256);
	celg49 = (i / 256 % 256);
	celb49 = (i / 65536 % 256);
	i = block56[id.x * 56 + 50];
	celr50 = (i % 256);
	celg50 = (i / 256 % 256);
	celb50 = (i / 65536 % 256);
	i = block56[id.x * 56 + 51];
	celr51 = (i % 256);
	celg51 = (i / 256 % 256);
	celb51 = (i / 65536 % 256);
	i = block56[id.x * 56 + 52];
	celr52 = (i % 256);
	celg52 = (i / 256 % 256);
	celb52 = (i / 65536 % 256);
	i = block56[id.x * 56 + 53];
	celr53 = (i % 256);
	celg53 = (i / 256 % 256);
	celb53 = (i / 65536 % 256);
	i = block56[id.x * 56 + 54];
	celr54 = (i % 256);
	celg54 = (i / 256 % 256);
	celb54 = (i / 65536 % 256);
	i = block56[id.x * 56 + 55];
	celr55 = (i % 256);
	celg55 = (i / 256 % 256);
	celb55 = (i / 65536 % 256);;
	for (j = 0;
		j < (uint)loopnum;
		j++) {
		GroupMemoryBarrierWithGroupSync();
		fblock0r[id.x] = celr0;
		fblock1r[id.x] = celr55;
		fblock0g[id.x] = celg0;
		fblock1g[id.x] = celg55;
		fblock0b[id.x] = celb0;
		fblock1b[id.x] = celb55;
		GroupMemoryBarrierWithGroupSync();
		regr[1] = celr0 * WLR;
		regr[0] = celr1 * WLR + fblock1r[(id.x + TPB - 1) % TPB] * WLR;
		celr0 = celr0 * W + regr[0];
		regg[1] = celg0 * WLR;
		regg[0] = celg1 * WLR + fblock1g[(id.x + TPB - 1) % TPB] * WLR;
		celg0 = celg0 * W + regg[0];
		regb[1] = celb0 * WLR;
		regb[0] = celb1 * WLR + fblock1b[(id.x + TPB - 1) % TPB] * WLR;
		celb0 = celb0 * W + regb[0];
		regr[0 & 1] = celr1 * WLR;
		regr[(0 & 1) ^ 1] = regr[(0 & 1) ^ 1] + celr2 * WLR;
		celr1 = celr1 * W + regr[(0 & 1) ^ 1];
		regg[0 & 1] = celg1 * WLR;
		regg[(0 & 1) ^ 1] = regg[(0 & 1) ^ 1] + celg2 * WLR;
		celg1 = celg1 * W + regg[(0 & 1) ^ 1];
		regb[0 & 1] = celb1 * WLR;
		regb[(0 & 1) ^ 1] = regb[(0 & 1) ^ 1] + celb2 * WLR;
		celb1 = celb1 * W + regb[(0 & 1) ^ 1];
		regr[1 & 1] = celr2 * WLR;
		regr[(1 & 1) ^ 1] = regr[(1 & 1) ^ 1] + celr3 * WLR;
		celr2 = celr2 * W + regr[(1 & 1) ^ 1];
		regg[1 & 1] = celg2 * WLR;
		regg[(1 & 1) ^ 1] = regg[(1 & 1) ^ 1] + celg3 * WLR;
		celg2 = celg2 * W + regg[(1 & 1) ^ 1];
		regb[1 & 1] = celb2 * WLR;
		regb[(1 & 1) ^ 1] = regb[(1 & 1) ^ 1] + celb3 * WLR;
		celb2 = celb2 * W + regb[(1 & 1) ^ 1];
		regr[2 & 1] = celr3 * WLR;
		regr[(2 & 1) ^ 1] = regr[(2 & 1) ^ 1] + celr4 * WLR;
		celr3 = celr3 * W + regr[(2 & 1) ^ 1];
		regg[2 & 1] = celg3 * WLR;
		regg[(2 & 1) ^ 1] = regg[(2 & 1) ^ 1] + celg4 * WLR;
		celg3 = celg3 * W + regg[(2 & 1) ^ 1];
		regb[2 & 1] = celb3 * WLR;
		regb[(2 & 1) ^ 1] = regb[(2 & 1) ^ 1] + celb4 * WLR;
		celb3 = celb3 * W + regb[(2 & 1) ^ 1];
		regr[3 & 1] = celr4 * WLR;
		regr[(3 & 1) ^ 1] = regr[(3 & 1) ^ 1] + celr5 * WLR;
		celr4 = celr4 * W + regr[(3 & 1) ^ 1];
		regg[3 & 1] = celg4 * WLR;
		regg[(3 & 1) ^ 1] = regg[(3 & 1) ^ 1] + celg5 * WLR;
		celg4 = celg4 * W + regg[(3 & 1) ^ 1];
		regb[3 & 1] = celb4 * WLR;
		regb[(3 & 1) ^ 1] = regb[(3 & 1) ^ 1] + celb5 * WLR;
		celb4 = celb4 * W + regb[(3 & 1) ^ 1];
		regr[4 & 1] = celr5 * WLR;
		regr[(4 & 1) ^ 1] = regr[(4 & 1) ^ 1] + celr6 * WLR;
		celr5 = celr5 * W + regr[(4 & 1) ^ 1];
		regg[4 & 1] = celg5 * WLR;
		regg[(4 & 1) ^ 1] = regg[(4 & 1) ^ 1] + celg6 * WLR;
		celg5 = celg5 * W + regg[(4 & 1) ^ 1];
		regb[4 & 1] = celb5 * WLR;
		regb[(4 & 1) ^ 1] = regb[(4 & 1) ^ 1] + celb6 * WLR;
		celb5 = celb5 * W + regb[(4 & 1) ^ 1];
		regr[5 & 1] = celr6 * WLR;
		regr[(5 & 1) ^ 1] = regr[(5 & 1) ^ 1] + celr7 * WLR;
		celr6 = celr6 * W + regr[(5 & 1) ^ 1];
		regg[5 & 1] = celg6 * WLR;
		regg[(5 & 1) ^ 1] = regg[(5 & 1) ^ 1] + celg7 * WLR;
		celg6 = celg6 * W + regg[(5 & 1) ^ 1];
		regb[5 & 1] = celb6 * WLR;
		regb[(5 & 1) ^ 1] = regb[(5 & 1) ^ 1] + celb7 * WLR;
		celb6 = celb6 * W + regb[(5 & 1) ^ 1];
		regr[6 & 1] = celr7 * WLR;
		regr[(6 & 1) ^ 1] = regr[(6 & 1) ^ 1] + celr8 * WLR;
		celr7 = celr7 * W + regr[(6 & 1) ^ 1];
		regg[6 & 1] = celg7 * WLR;
		regg[(6 & 1) ^ 1] = regg[(6 & 1) ^ 1] + celg8 * WLR;
		celg7 = celg7 * W + regg[(6 & 1) ^ 1];
		regb[6 & 1] = celb7 * WLR;
		regb[(6 & 1) ^ 1] = regb[(6 & 1) ^ 1] + celb8 * WLR;
		celb7 = celb7 * W + regb[(6 & 1) ^ 1];
		regr[7 & 1] = celr8 * WLR;
		regr[(7 & 1) ^ 1] = regr[(7 & 1) ^ 1] + celr9 * WLR;
		celr8 = celr8 * W + regr[(7 & 1) ^ 1];
		regg[7 & 1] = celg8 * WLR;
		regg[(7 & 1) ^ 1] = regg[(7 & 1) ^ 1] + celg9 * WLR;
		celg8 = celg8 * W + regg[(7 & 1) ^ 1];
		regb[7 & 1] = celb8 * WLR;
		regb[(7 & 1) ^ 1] = regb[(7 & 1) ^ 1] + celb9 * WLR;
		celb8 = celb8 * W + regb[(7 & 1) ^ 1];
		regr[8 & 1] = celr9 * WLR;
		regr[(8 & 1) ^ 1] = regr[(8 & 1) ^ 1] + celr10 * WLR;
		celr9 = celr9 * W + regr[(8 & 1) ^ 1];
		regg[8 & 1] = celg9 * WLR;
		regg[(8 & 1) ^ 1] = regg[(8 & 1) ^ 1] + celg10 * WLR;
		celg9 = celg9 * W + regg[(8 & 1) ^ 1];
		regb[8 & 1] = celb9 * WLR;
		regb[(8 & 1) ^ 1] = regb[(8 & 1) ^ 1] + celb10 * WLR;
		celb9 = celb9 * W + regb[(8 & 1) ^ 1];
		regr[9 & 1] = celr10 * WLR;
		regr[(9 & 1) ^ 1] = regr[(9 & 1) ^ 1] + celr11 * WLR;
		celr10 = celr10 * W + regr[(9 & 1) ^ 1];
		regg[9 & 1] = celg10 * WLR;
		regg[(9 & 1) ^ 1] = regg[(9 & 1) ^ 1] + celg11 * WLR;
		celg10 = celg10 * W + regg[(9 & 1) ^ 1];
		regb[9 & 1] = celb10 * WLR;
		regb[(9 & 1) ^ 1] = regb[(9 & 1) ^ 1] + celb11 * WLR;
		celb10 = celb10 * W + regb[(9 & 1) ^ 1];
		regr[10 & 1] = celr11 * WLR;
		regr[(10 & 1) ^ 1] = regr[(10 & 1) ^ 1] + celr12 * WLR;
		celr11 = celr11 * W + regr[(10 & 1) ^ 1];
		regg[10 & 1] = celg11 * WLR;
		regg[(10 & 1) ^ 1] = regg[(10 & 1) ^ 1] + celg12 * WLR;
		celg11 = celg11 * W + regg[(10 & 1) ^ 1];
		regb[10 & 1] = celb11 * WLR;
		regb[(10 & 1) ^ 1] = regb[(10 & 1) ^ 1] + celb12 * WLR;
		celb11 = celb11 * W + regb[(10 & 1) ^ 1];
		regr[11 & 1] = celr12 * WLR;
		regr[(11 & 1) ^ 1] = regr[(11 & 1) ^ 1] + celr13 * WLR;
		celr12 = celr12 * W + regr[(11 & 1) ^ 1];
		regg[11 & 1] = celg12 * WLR;
		regg[(11 & 1) ^ 1] = regg[(11 & 1) ^ 1] + celg13 * WLR;
		celg12 = celg12 * W + regg[(11 & 1) ^ 1];
		regb[11 & 1] = celb12 * WLR;
		regb[(11 & 1) ^ 1] = regb[(11 & 1) ^ 1] + celb13 * WLR;
		celb12 = celb12 * W + regb[(11 & 1) ^ 1];
		regr[12 & 1] = celr13 * WLR;
		regr[(12 & 1) ^ 1] = regr[(12 & 1) ^ 1] + celr14 * WLR;
		celr13 = celr13 * W + regr[(12 & 1) ^ 1];
		regg[12 & 1] = celg13 * WLR;
		regg[(12 & 1) ^ 1] = regg[(12 & 1) ^ 1] + celg14 * WLR;
		celg13 = celg13 * W + regg[(12 & 1) ^ 1];
		regb[12 & 1] = celb13 * WLR;
		regb[(12 & 1) ^ 1] = regb[(12 & 1) ^ 1] + celb14 * WLR;
		celb13 = celb13 * W + regb[(12 & 1) ^ 1];
		regr[13 & 1] = celr14 * WLR;
		regr[(13 & 1) ^ 1] = regr[(13 & 1) ^ 1] + celr15 * WLR;
		celr14 = celr14 * W + regr[(13 & 1) ^ 1];
		regg[13 & 1] = celg14 * WLR;
		regg[(13 & 1) ^ 1] = regg[(13 & 1) ^ 1] + celg15 * WLR;
		celg14 = celg14 * W + regg[(13 & 1) ^ 1];
		regb[13 & 1] = celb14 * WLR;
		regb[(13 & 1) ^ 1] = regb[(13 & 1) ^ 1] + celb15 * WLR;
		celb14 = celb14 * W + regb[(13 & 1) ^ 1];
		regr[14 & 1] = celr15 * WLR;
		regr[(14 & 1) ^ 1] = regr[(14 & 1) ^ 1] + celr16 * WLR;
		celr15 = celr15 * W + regr[(14 & 1) ^ 1];
		regg[14 & 1] = celg15 * WLR;
		regg[(14 & 1) ^ 1] = regg[(14 & 1) ^ 1] + celg16 * WLR;
		celg15 = celg15 * W + regg[(14 & 1) ^ 1];
		regb[14 & 1] = celb15 * WLR;
		regb[(14 & 1) ^ 1] = regb[(14 & 1) ^ 1] + celb16 * WLR;
		celb15 = celb15 * W + regb[(14 & 1) ^ 1];
		regr[15 & 1] = celr16 * WLR;
		regr[(15 & 1) ^ 1] = regr[(15 & 1) ^ 1] + celr17 * WLR;
		celr16 = celr16 * W + regr[(15 & 1) ^ 1];
		regg[15 & 1] = celg16 * WLR;
		regg[(15 & 1) ^ 1] = regg[(15 & 1) ^ 1] + celg17 * WLR;
		celg16 = celg16 * W + regg[(15 & 1) ^ 1];
		regb[15 & 1] = celb16 * WLR;
		regb[(15 & 1) ^ 1] = regb[(15 & 1) ^ 1] + celb17 * WLR;
		celb16 = celb16 * W + regb[(15 & 1) ^ 1];
		regr[16 & 1] = celr17 * WLR;
		regr[(16 & 1) ^ 1] = regr[(16 & 1) ^ 1] + celr18 * WLR;
		celr17 = celr17 * W + regr[(16 & 1) ^ 1];
		regg[16 & 1] = celg17 * WLR;
		regg[(16 & 1) ^ 1] = regg[(16 & 1) ^ 1] + celg18 * WLR;
		celg17 = celg17 * W + regg[(16 & 1) ^ 1];
		regb[16 & 1] = celb17 * WLR;
		regb[(16 & 1) ^ 1] = regb[(16 & 1) ^ 1] + celb18 * WLR;
		celb17 = celb17 * W + regb[(16 & 1) ^ 1];
		regr[17 & 1] = celr18 * WLR;
		regr[(17 & 1) ^ 1] = regr[(17 & 1) ^ 1] + celr19 * WLR;
		celr18 = celr18 * W + regr[(17 & 1) ^ 1];
		regg[17 & 1] = celg18 * WLR;
		regg[(17 & 1) ^ 1] = regg[(17 & 1) ^ 1] + celg19 * WLR;
		celg18 = celg18 * W + regg[(17 & 1) ^ 1];
		regb[17 & 1] = celb18 * WLR;
		regb[(17 & 1) ^ 1] = regb[(17 & 1) ^ 1] + celb19 * WLR;
		celb18 = celb18 * W + regb[(17 & 1) ^ 1];
		regr[18 & 1] = celr19 * WLR;
		regr[(18 & 1) ^ 1] = regr[(18 & 1) ^ 1] + celr20 * WLR;
		celr19 = celr19 * W + regr[(18 & 1) ^ 1];
		regg[18 & 1] = celg19 * WLR;
		regg[(18 & 1) ^ 1] = regg[(18 & 1) ^ 1] + celg20 * WLR;
		celg19 = celg19 * W + regg[(18 & 1) ^ 1];
		regb[18 & 1] = celb19 * WLR;
		regb[(18 & 1) ^ 1] = regb[(18 & 1) ^ 1] + celb20 * WLR;
		celb19 = celb19 * W + regb[(18 & 1) ^ 1];
		regr[19 & 1] = celr20 * WLR;
		regr[(19 & 1) ^ 1] = regr[(19 & 1) ^ 1] + celr21 * WLR;
		celr20 = celr20 * W + regr[(19 & 1) ^ 1];
		regg[19 & 1] = celg20 * WLR;
		regg[(19 & 1) ^ 1] = regg[(19 & 1) ^ 1] + celg21 * WLR;
		celg20 = celg20 * W + regg[(19 & 1) ^ 1];
		regb[19 & 1] = celb20 * WLR;
		regb[(19 & 1) ^ 1] = regb[(19 & 1) ^ 1] + celb21 * WLR;
		celb20 = celb20 * W + regb[(19 & 1) ^ 1];
		regr[20 & 1] = celr21 * WLR;
		regr[(20 & 1) ^ 1] = regr[(20 & 1) ^ 1] + celr22 * WLR;
		celr21 = celr21 * W + regr[(20 & 1) ^ 1];
		regg[20 & 1] = celg21 * WLR;
		regg[(20 & 1) ^ 1] = regg[(20 & 1) ^ 1] + celg22 * WLR;
		celg21 = celg21 * W + regg[(20 & 1) ^ 1];
		regb[20 & 1] = celb21 * WLR;
		regb[(20 & 1) ^ 1] = regb[(20 & 1) ^ 1] + celb22 * WLR;
		celb21 = celb21 * W + regb[(20 & 1) ^ 1];
		regr[21 & 1] = celr22 * WLR;
		regr[(21 & 1) ^ 1] = regr[(21 & 1) ^ 1] + celr23 * WLR;
		celr22 = celr22 * W + regr[(21 & 1) ^ 1];
		regg[21 & 1] = celg22 * WLR;
		regg[(21 & 1) ^ 1] = regg[(21 & 1) ^ 1] + celg23 * WLR;
		celg22 = celg22 * W + regg[(21 & 1) ^ 1];
		regb[21 & 1] = celb22 * WLR;
		regb[(21 & 1) ^ 1] = regb[(21 & 1) ^ 1] + celb23 * WLR;
		celb22 = celb22 * W + regb[(21 & 1) ^ 1];
		regr[22 & 1] = celr23 * WLR;
		regr[(22 & 1) ^ 1] = regr[(22 & 1) ^ 1] + celr24 * WLR;
		celr23 = celr23 * W + regr[(22 & 1) ^ 1];
		regg[22 & 1] = celg23 * WLR;
		regg[(22 & 1) ^ 1] = regg[(22 & 1) ^ 1] + celg24 * WLR;
		celg23 = celg23 * W + regg[(22 & 1) ^ 1];
		regb[22 & 1] = celb23 * WLR;
		regb[(22 & 1) ^ 1] = regb[(22 & 1) ^ 1] + celb24 * WLR;
		celb23 = celb23 * W + regb[(22 & 1) ^ 1];
		regr[23 & 1] = celr24 * WLR;
		regr[(23 & 1) ^ 1] = regr[(23 & 1) ^ 1] + celr25 * WLR;
		celr24 = celr24 * W + regr[(23 & 1) ^ 1];
		regg[23 & 1] = celg24 * WLR;
		regg[(23 & 1) ^ 1] = regg[(23 & 1) ^ 1] + celg25 * WLR;
		celg24 = celg24 * W + regg[(23 & 1) ^ 1];
		regb[23 & 1] = celb24 * WLR;
		regb[(23 & 1) ^ 1] = regb[(23 & 1) ^ 1] + celb25 * WLR;
		celb24 = celb24 * W + regb[(23 & 1) ^ 1];
		regr[24 & 1] = celr25 * WLR;
		regr[(24 & 1) ^ 1] = regr[(24 & 1) ^ 1] + celr26 * WLR;
		celr25 = celr25 * W + regr[(24 & 1) ^ 1];
		regg[24 & 1] = celg25 * WLR;
		regg[(24 & 1) ^ 1] = regg[(24 & 1) ^ 1] + celg26 * WLR;
		celg25 = celg25 * W + regg[(24 & 1) ^ 1];
		regb[24 & 1] = celb25 * WLR;
		regb[(24 & 1) ^ 1] = regb[(24 & 1) ^ 1] + celb26 * WLR;
		celb25 = celb25 * W + regb[(24 & 1) ^ 1];
		regr[25 & 1] = celr26 * WLR;
		regr[(25 & 1) ^ 1] = regr[(25 & 1) ^ 1] + celr27 * WLR;
		celr26 = celr26 * W + regr[(25 & 1) ^ 1];
		regg[25 & 1] = celg26 * WLR;
		regg[(25 & 1) ^ 1] = regg[(25 & 1) ^ 1] + celg27 * WLR;
		celg26 = celg26 * W + regg[(25 & 1) ^ 1];
		regb[25 & 1] = celb26 * WLR;
		regb[(25 & 1) ^ 1] = regb[(25 & 1) ^ 1] + celb27 * WLR;
		celb26 = celb26 * W + regb[(25 & 1) ^ 1];
		regr[26 & 1] = celr27 * WLR;
		regr[(26 & 1) ^ 1] = regr[(26 & 1) ^ 1] + celr28 * WLR;
		celr27 = celr27 * W + regr[(26 & 1) ^ 1];
		regg[26 & 1] = celg27 * WLR;
		regg[(26 & 1) ^ 1] = regg[(26 & 1) ^ 1] + celg28 * WLR;
		celg27 = celg27 * W + regg[(26 & 1) ^ 1];
		regb[26 & 1] = celb27 * WLR;
		regb[(26 & 1) ^ 1] = regb[(26 & 1) ^ 1] + celb28 * WLR;
		celb27 = celb27 * W + regb[(26 & 1) ^ 1];
		regr[27 & 1] = celr28 * WLR;
		regr[(27 & 1) ^ 1] = regr[(27 & 1) ^ 1] + celr29 * WLR;
		celr28 = celr28 * W + regr[(27 & 1) ^ 1];
		regg[27 & 1] = celg28 * WLR;
		regg[(27 & 1) ^ 1] = regg[(27 & 1) ^ 1] + celg29 * WLR;
		celg28 = celg28 * W + regg[(27 & 1) ^ 1];
		regb[27 & 1] = celb28 * WLR;
		regb[(27 & 1) ^ 1] = regb[(27 & 1) ^ 1] + celb29 * WLR;
		celb28 = celb28 * W + regb[(27 & 1) ^ 1];
		regr[28 & 1] = celr29 * WLR;
		regr[(28 & 1) ^ 1] = regr[(28 & 1) ^ 1] + celr30 * WLR;
		celr29 = celr29 * W + regr[(28 & 1) ^ 1];
		regg[28 & 1] = celg29 * WLR;
		regg[(28 & 1) ^ 1] = regg[(28 & 1) ^ 1] + celg30 * WLR;
		celg29 = celg29 * W + regg[(28 & 1) ^ 1];
		regb[28 & 1] = celb29 * WLR;
		regb[(28 & 1) ^ 1] = regb[(28 & 1) ^ 1] + celb30 * WLR;
		celb29 = celb29 * W + regb[(28 & 1) ^ 1];
		regr[29 & 1] = celr30 * WLR;
		regr[(29 & 1) ^ 1] = regr[(29 & 1) ^ 1] + celr31 * WLR;
		celr30 = celr30 * W + regr[(29 & 1) ^ 1];
		regg[29 & 1] = celg30 * WLR;
		regg[(29 & 1) ^ 1] = regg[(29 & 1) ^ 1] + celg31 * WLR;
		celg30 = celg30 * W + regg[(29 & 1) ^ 1];
		regb[29 & 1] = celb30 * WLR;
		regb[(29 & 1) ^ 1] = regb[(29 & 1) ^ 1] + celb31 * WLR;
		celb30 = celb30 * W + regb[(29 & 1) ^ 1];
		regr[30 & 1] = celr31 * WLR;
		regr[(30 & 1) ^ 1] = regr[(30 & 1) ^ 1] + celr32 * WLR;
		celr31 = celr31 * W + regr[(30 & 1) ^ 1];
		regg[30 & 1] = celg31 * WLR;
		regg[(30 & 1) ^ 1] = regg[(30 & 1) ^ 1] + celg32 * WLR;
		celg31 = celg31 * W + regg[(30 & 1) ^ 1];
		regb[30 & 1] = celb31 * WLR;
		regb[(30 & 1) ^ 1] = regb[(30 & 1) ^ 1] + celb32 * WLR;
		celb31 = celb31 * W + regb[(30 & 1) ^ 1];
		regr[31 & 1] = celr32 * WLR;
		regr[(31 & 1) ^ 1] = regr[(31 & 1) ^ 1] + celr33 * WLR;
		celr32 = celr32 * W + regr[(31 & 1) ^ 1];
		regg[31 & 1] = celg32 * WLR;
		regg[(31 & 1) ^ 1] = regg[(31 & 1) ^ 1] + celg33 * WLR;
		celg32 = celg32 * W + regg[(31 & 1) ^ 1];
		regb[31 & 1] = celb32 * WLR;
		regb[(31 & 1) ^ 1] = regb[(31 & 1) ^ 1] + celb33 * WLR;
		celb32 = celb32 * W + regb[(31 & 1) ^ 1];
		regr[32 & 1] = celr33 * WLR;
		regr[(32 & 1) ^ 1] = regr[(32 & 1) ^ 1] + celr34 * WLR;
		celr33 = celr33 * W + regr[(32 & 1) ^ 1];
		regg[32 & 1] = celg33 * WLR;
		regg[(32 & 1) ^ 1] = regg[(32 & 1) ^ 1] + celg34 * WLR;
		celg33 = celg33 * W + regg[(32 & 1) ^ 1];
		regb[32 & 1] = celb33 * WLR;
		regb[(32 & 1) ^ 1] = regb[(32 & 1) ^ 1] + celb34 * WLR;
		celb33 = celb33 * W + regb[(32 & 1) ^ 1];
		regr[33 & 1] = celr34 * WLR;
		regr[(33 & 1) ^ 1] = regr[(33 & 1) ^ 1] + celr35 * WLR;
		celr34 = celr34 * W + regr[(33 & 1) ^ 1];
		regg[33 & 1] = celg34 * WLR;
		regg[(33 & 1) ^ 1] = regg[(33 & 1) ^ 1] + celg35 * WLR;
		celg34 = celg34 * W + regg[(33 & 1) ^ 1];
		regb[33 & 1] = celb34 * WLR;
		regb[(33 & 1) ^ 1] = regb[(33 & 1) ^ 1] + celb35 * WLR;
		celb34 = celb34 * W + regb[(33 & 1) ^ 1];
		regr[34 & 1] = celr35 * WLR;
		regr[(34 & 1) ^ 1] = regr[(34 & 1) ^ 1] + celr36 * WLR;
		celr35 = celr35 * W + regr[(34 & 1) ^ 1];
		regg[34 & 1] = celg35 * WLR;
		regg[(34 & 1) ^ 1] = regg[(34 & 1) ^ 1] + celg36 * WLR;
		celg35 = celg35 * W + regg[(34 & 1) ^ 1];
		regb[34 & 1] = celb35 * WLR;
		regb[(34 & 1) ^ 1] = regb[(34 & 1) ^ 1] + celb36 * WLR;
		celb35 = celb35 * W + regb[(34 & 1) ^ 1];
		regr[35 & 1] = celr36 * WLR;
		regr[(35 & 1) ^ 1] = regr[(35 & 1) ^ 1] + celr37 * WLR;
		celr36 = celr36 * W + regr[(35 & 1) ^ 1];
		regg[35 & 1] = celg36 * WLR;
		regg[(35 & 1) ^ 1] = regg[(35 & 1) ^ 1] + celg37 * WLR;
		celg36 = celg36 * W + regg[(35 & 1) ^ 1];
		regb[35 & 1] = celb36 * WLR;
		regb[(35 & 1) ^ 1] = regb[(35 & 1) ^ 1] + celb37 * WLR;
		celb36 = celb36 * W + regb[(35 & 1) ^ 1];
		regr[36 & 1] = celr37 * WLR;
		regr[(36 & 1) ^ 1] = regr[(36 & 1) ^ 1] + celr38 * WLR;
		celr37 = celr37 * W + regr[(36 & 1) ^ 1];
		regg[36 & 1] = celg37 * WLR;
		regg[(36 & 1) ^ 1] = regg[(36 & 1) ^ 1] + celg38 * WLR;
		celg37 = celg37 * W + regg[(36 & 1) ^ 1];
		regb[36 & 1] = celb37 * WLR;
		regb[(36 & 1) ^ 1] = regb[(36 & 1) ^ 1] + celb38 * WLR;
		celb37 = celb37 * W + regb[(36 & 1) ^ 1];
		regr[37 & 1] = celr38 * WLR;
		regr[(37 & 1) ^ 1] = regr[(37 & 1) ^ 1] + celr39 * WLR;
		celr38 = celr38 * W + regr[(37 & 1) ^ 1];
		regg[37 & 1] = celg38 * WLR;
		regg[(37 & 1) ^ 1] = regg[(37 & 1) ^ 1] + celg39 * WLR;
		celg38 = celg38 * W + regg[(37 & 1) ^ 1];
		regb[37 & 1] = celb38 * WLR;
		regb[(37 & 1) ^ 1] = regb[(37 & 1) ^ 1] + celb39 * WLR;
		celb38 = celb38 * W + regb[(37 & 1) ^ 1];
		regr[38 & 1] = celr39 * WLR;
		regr[(38 & 1) ^ 1] = regr[(38 & 1) ^ 1] + celr40 * WLR;
		celr39 = celr39 * W + regr[(38 & 1) ^ 1];
		regg[38 & 1] = celg39 * WLR;
		regg[(38 & 1) ^ 1] = regg[(38 & 1) ^ 1] + celg40 * WLR;
		celg39 = celg39 * W + regg[(38 & 1) ^ 1];
		regb[38 & 1] = celb39 * WLR;
		regb[(38 & 1) ^ 1] = regb[(38 & 1) ^ 1] + celb40 * WLR;
		celb39 = celb39 * W + regb[(38 & 1) ^ 1];
		regr[39 & 1] = celr40 * WLR;
		regr[(39 & 1) ^ 1] = regr[(39 & 1) ^ 1] + celr41 * WLR;
		celr40 = celr40 * W + regr[(39 & 1) ^ 1];
		regg[39 & 1] = celg40 * WLR;
		regg[(39 & 1) ^ 1] = regg[(39 & 1) ^ 1] + celg41 * WLR;
		celg40 = celg40 * W + regg[(39 & 1) ^ 1];
		regb[39 & 1] = celb40 * WLR;
		regb[(39 & 1) ^ 1] = regb[(39 & 1) ^ 1] + celb41 * WLR;
		celb40 = celb40 * W + regb[(39 & 1) ^ 1];
		regr[40 & 1] = celr41 * WLR;
		regr[(40 & 1) ^ 1] = regr[(40 & 1) ^ 1] + celr42 * WLR;
		celr41 = celr41 * W + regr[(40 & 1) ^ 1];
		regg[40 & 1] = celg41 * WLR;
		regg[(40 & 1) ^ 1] = regg[(40 & 1) ^ 1] + celg42 * WLR;
		celg41 = celg41 * W + regg[(40 & 1) ^ 1];
		regb[40 & 1] = celb41 * WLR;
		regb[(40 & 1) ^ 1] = regb[(40 & 1) ^ 1] + celb42 * WLR;
		celb41 = celb41 * W + regb[(40 & 1) ^ 1];
		regr[41 & 1] = celr42 * WLR;
		regr[(41 & 1) ^ 1] = regr[(41 & 1) ^ 1] + celr43 * WLR;
		celr42 = celr42 * W + regr[(41 & 1) ^ 1];
		regg[41 & 1] = celg42 * WLR;
		regg[(41 & 1) ^ 1] = regg[(41 & 1) ^ 1] + celg43 * WLR;
		celg42 = celg42 * W + regg[(41 & 1) ^ 1];
		regb[41 & 1] = celb42 * WLR;
		regb[(41 & 1) ^ 1] = regb[(41 & 1) ^ 1] + celb43 * WLR;
		celb42 = celb42 * W + regb[(41 & 1) ^ 1];
		regr[42 & 1] = celr43 * WLR;
		regr[(42 & 1) ^ 1] = regr[(42 & 1) ^ 1] + celr44 * WLR;
		celr43 = celr43 * W + regr[(42 & 1) ^ 1];
		regg[42 & 1] = celg43 * WLR;
		regg[(42 & 1) ^ 1] = regg[(42 & 1) ^ 1] + celg44 * WLR;
		celg43 = celg43 * W + regg[(42 & 1) ^ 1];
		regb[42 & 1] = celb43 * WLR;
		regb[(42 & 1) ^ 1] = regb[(42 & 1) ^ 1] + celb44 * WLR;
		celb43 = celb43 * W + regb[(42 & 1) ^ 1];
		regr[43 & 1] = celr44 * WLR;
		regr[(43 & 1) ^ 1] = regr[(43 & 1) ^ 1] + celr45 * WLR;
		celr44 = celr44 * W + regr[(43 & 1) ^ 1];
		regg[43 & 1] = celg44 * WLR;
		regg[(43 & 1) ^ 1] = regg[(43 & 1) ^ 1] + celg45 * WLR;
		celg44 = celg44 * W + regg[(43 & 1) ^ 1];
		regb[43 & 1] = celb44 * WLR;
		regb[(43 & 1) ^ 1] = regb[(43 & 1) ^ 1] + celb45 * WLR;
		celb44 = celb44 * W + regb[(43 & 1) ^ 1];
		regr[44 & 1] = celr45 * WLR;
		regr[(44 & 1) ^ 1] = regr[(44 & 1) ^ 1] + celr46 * WLR;
		celr45 = celr45 * W + regr[(44 & 1) ^ 1];
		regg[44 & 1] = celg45 * WLR;
		regg[(44 & 1) ^ 1] = regg[(44 & 1) ^ 1] + celg46 * WLR;
		celg45 = celg45 * W + regg[(44 & 1) ^ 1];
		regb[44 & 1] = celb45 * WLR;
		regb[(44 & 1) ^ 1] = regb[(44 & 1) ^ 1] + celb46 * WLR;
		celb45 = celb45 * W + regb[(44 & 1) ^ 1];
		regr[45 & 1] = celr46 * WLR;
		regr[(45 & 1) ^ 1] = regr[(45 & 1) ^ 1] + celr47 * WLR;
		celr46 = celr46 * W + regr[(45 & 1) ^ 1];
		regg[45 & 1] = celg46 * WLR;
		regg[(45 & 1) ^ 1] = regg[(45 & 1) ^ 1] + celg47 * WLR;
		celg46 = celg46 * W + regg[(45 & 1) ^ 1];
		regb[45 & 1] = celb46 * WLR;
		regb[(45 & 1) ^ 1] = regb[(45 & 1) ^ 1] + celb47 * WLR;
		celb46 = celb46 * W + regb[(45 & 1) ^ 1];
		regr[46 & 1] = celr47 * WLR;
		regr[(46 & 1) ^ 1] = regr[(46 & 1) ^ 1] + celr48 * WLR;
		celr47 = celr47 * W + regr[(46 & 1) ^ 1];
		regg[46 & 1] = celg47 * WLR;
		regg[(46 & 1) ^ 1] = regg[(46 & 1) ^ 1] + celg48 * WLR;
		celg47 = celg47 * W + regg[(46 & 1) ^ 1];
		regb[46 & 1] = celb47 * WLR;
		regb[(46 & 1) ^ 1] = regb[(46 & 1) ^ 1] + celb48 * WLR;
		celb47 = celb47 * W + regb[(46 & 1) ^ 1];
		regr[47 & 1] = celr48 * WLR;
		regr[(47 & 1) ^ 1] = regr[(47 & 1) ^ 1] + celr49 * WLR;
		celr48 = celr48 * W + regr[(47 & 1) ^ 1];
		regg[47 & 1] = celg48 * WLR;
		regg[(47 & 1) ^ 1] = regg[(47 & 1) ^ 1] + celg49 * WLR;
		celg48 = celg48 * W + regg[(47 & 1) ^ 1];
		regb[47 & 1] = celb48 * WLR;
		regb[(47 & 1) ^ 1] = regb[(47 & 1) ^ 1] + celb49 * WLR;
		celb48 = celb48 * W + regb[(47 & 1) ^ 1];
		regr[48 & 1] = celr49 * WLR;
		regr[(48 & 1) ^ 1] = regr[(48 & 1) ^ 1] + celr50 * WLR;
		celr49 = celr49 * W + regr[(48 & 1) ^ 1];
		regg[48 & 1] = celg49 * WLR;
		regg[(48 & 1) ^ 1] = regg[(48 & 1) ^ 1] + celg50 * WLR;
		celg49 = celg49 * W + regg[(48 & 1) ^ 1];
		regb[48 & 1] = celb49 * WLR;
		regb[(48 & 1) ^ 1] = regb[(48 & 1) ^ 1] + celb50 * WLR;
		celb49 = celb49 * W + regb[(48 & 1) ^ 1];
		regr[49 & 1] = celr50 * WLR;
		regr[(49 & 1) ^ 1] = regr[(49 & 1) ^ 1] + celr51 * WLR;
		celr50 = celr50 * W + regr[(49 & 1) ^ 1];
		regg[49 & 1] = celg50 * WLR;
		regg[(49 & 1) ^ 1] = regg[(49 & 1) ^ 1] + celg51 * WLR;
		celg50 = celg50 * W + regg[(49 & 1) ^ 1];
		regb[49 & 1] = celb50 * WLR;
		regb[(49 & 1) ^ 1] = regb[(49 & 1) ^ 1] + celb51 * WLR;
		celb50 = celb50 * W + regb[(49 & 1) ^ 1];
		regr[50 & 1] = celr51 * WLR;
		regr[(50 & 1) ^ 1] = regr[(50 & 1) ^ 1] + celr52 * WLR;
		celr51 = celr51 * W + regr[(50 & 1) ^ 1];
		regg[50 & 1] = celg51 * WLR;
		regg[(50 & 1) ^ 1] = regg[(50 & 1) ^ 1] + celg52 * WLR;
		celg51 = celg51 * W + regg[(50 & 1) ^ 1];
		regb[50 & 1] = celb51 * WLR;
		regb[(50 & 1) ^ 1] = regb[(50 & 1) ^ 1] + celb52 * WLR;
		celb51 = celb51 * W + regb[(50 & 1) ^ 1];
		regr[51 & 1] = celr52 * WLR;
		regr[(51 & 1) ^ 1] = regr[(51 & 1) ^ 1] + celr53 * WLR;
		celr52 = celr52 * W + regr[(51 & 1) ^ 1];
		regg[51 & 1] = celg52 * WLR;
		regg[(51 & 1) ^ 1] = regg[(51 & 1) ^ 1] + celg53 * WLR;
		celg52 = celg52 * W + regg[(51 & 1) ^ 1];
		regb[51 & 1] = celb52 * WLR;
		regb[(51 & 1) ^ 1] = regb[(51 & 1) ^ 1] + celb53 * WLR;
		celb52 = celb52 * W + regb[(51 & 1) ^ 1];
		regr[52 & 1] = celr53 * WLR;
		regr[(52 & 1) ^ 1] = regr[(52 & 1) ^ 1] + celr54 * WLR;
		celr53 = celr53 * W + regr[(52 & 1) ^ 1];
		regg[52 & 1] = celg53 * WLR;
		regg[(52 & 1) ^ 1] = regg[(52 & 1) ^ 1] + celg54 * WLR;
		celg53 = celg53 * W + regg[(52 & 1) ^ 1];
		regb[52 & 1] = celb53 * WLR;
		regb[(52 & 1) ^ 1] = regb[(52 & 1) ^ 1] + celb54 * WLR;
		celb53 = celb53 * W + regb[(52 & 1) ^ 1];
		regr[53 & 1] = celr54 * WLR;
		regr[(53 & 1) ^ 1] = regr[(53 & 1) ^ 1] + celr55 * WLR;
		celr54 = celr54 * W + regr[(53 & 1) ^ 1];
		regg[53 & 1] = celg54 * WLR;
		regg[(53 & 1) ^ 1] = regg[(53 & 1) ^ 1] + celg55 * WLR;
		celg54 = celg54 * W + regg[(53 & 1) ^ 1];
		regb[53 & 1] = celb54 * WLR;
		regb[(53 & 1) ^ 1] = regb[(53 & 1) ^ 1] + celb55 * WLR;
		celb54 = celb54 * W + regb[(53 & 1) ^ 1];;
		regr[(56 & 1) ^ 1] = regr[(56 & 1) ^ 1] + fblock0r[(id.x + 1) % TPB] * WLR;
		celr55 = celr55 * W + regr[(56 & 1) ^ 1];
		regg[(56 & 1) ^ 1] = regg[(56 & 1) ^ 1] + fblock0g[(id.x + 1) % TPB] * WLR;
		celg55 = celg55 * W + regg[(56 & 1) ^ 1];
		regb[(56 & 1) ^ 1] = regb[(56 & 1) ^ 1] + fblock0b[(id.x + 1) % TPB] * WLR;
		celb55 = celb55 * W + regb[(56 & 1) ^ 1];
	} GroupMemoryBarrierWithGroupSync();
	i = ((uint)celr0) + 256 * ((uint)celg0) + 65536 * ((uint)celb0);
	block56[id.x * 56 + 0] = i;
	i = ((uint)celr1) + 256 * ((uint)celg1) + 65536 * ((uint)celb1);
	block56[id.x * 56 + 1] = i;
	i = ((uint)celr2) + 256 * ((uint)celg2) + 65536 * ((uint)celb2);
	block56[id.x * 56 + 2] = i;
	i = ((uint)celr3) + 256 * ((uint)celg3) + 65536 * ((uint)celb3);
	block56[id.x * 56 + 3] = i;
	i = ((uint)celr4) + 256 * ((uint)celg4) + 65536 * ((uint)celb4);
	block56[id.x * 56 + 4] = i;
	i = ((uint)celr5) + 256 * ((uint)celg5) + 65536 * ((uint)celb5);
	block56[id.x * 56 + 5] = i;
	i = ((uint)celr6) + 256 * ((uint)celg6) + 65536 * ((uint)celb6);
	block56[id.x * 56 + 6] = i;
	i = ((uint)celr7) + 256 * ((uint)celg7) + 65536 * ((uint)celb7);
	block56[id.x * 56 + 7] = i;
	i = ((uint)celr8) + 256 * ((uint)celg8) + 65536 * ((uint)celb8);
	block56[id.x * 56 + 8] = i;
	i = ((uint)celr9) + 256 * ((uint)celg9) + 65536 * ((uint)celb9);
	block56[id.x * 56 + 9] = i;
	i = ((uint)celr10) + 256 * ((uint)celg10) + 65536 * ((uint)celb10);
	block56[id.x * 56 + 10] = i;
	i = ((uint)celr11) + 256 * ((uint)celg11) + 65536 * ((uint)celb11);
	block56[id.x * 56 + 11] = i;
	i = ((uint)celr12) + 256 * ((uint)celg12) + 65536 * ((uint)celb12);
	block56[id.x * 56 + 12] = i;
	i = ((uint)celr13) + 256 * ((uint)celg13) + 65536 * ((uint)celb13);
	block56[id.x * 56 + 13] = i;
	i = ((uint)celr14) + 256 * ((uint)celg14) + 65536 * ((uint)celb14);
	block56[id.x * 56 + 14] = i;
	i = ((uint)celr15) + 256 * ((uint)celg15) + 65536 * ((uint)celb15);
	block56[id.x * 56 + 15] = i;
	i = ((uint)celr16) + 256 * ((uint)celg16) + 65536 * ((uint)celb16);
	block56[id.x * 56 + 16] = i;
	i = ((uint)celr17) + 256 * ((uint)celg17) + 65536 * ((uint)celb17);
	block56[id.x * 56 + 17] = i;
	i = ((uint)celr18) + 256 * ((uint)celg18) + 65536 * ((uint)celb18);
	block56[id.x * 56 + 18] = i;
	i = ((uint)celr19) + 256 * ((uint)celg19) + 65536 * ((uint)celb19);
	block56[id.x * 56 + 19] = i;
	i = ((uint)celr20) + 256 * ((uint)celg20) + 65536 * ((uint)celb20);
	block56[id.x * 56 + 20] = i;
	i = ((uint)celr21) + 256 * ((uint)celg21) + 65536 * ((uint)celb21);
	block56[id.x * 56 + 21] = i;
	i = ((uint)celr22) + 256 * ((uint)celg22) + 65536 * ((uint)celb22);
	block56[id.x * 56 + 22] = i;
	i = ((uint)celr23) + 256 * ((uint)celg23) + 65536 * ((uint)celb23);
	block56[id.x * 56 + 23] = i;
	i = ((uint)celr24) + 256 * ((uint)celg24) + 65536 * ((uint)celb24);
	block56[id.x * 56 + 24] = i;
	i = ((uint)celr25) + 256 * ((uint)celg25) + 65536 * ((uint)celb25);
	block56[id.x * 56 + 25] = i;
	i = ((uint)celr26) + 256 * ((uint)celg26) + 65536 * ((uint)celb26);
	block56[id.x * 56 + 26] = i;
	i = ((uint)celr27) + 256 * ((uint)celg27) + 65536 * ((uint)celb27);
	block56[id.x * 56 + 27] = i;
	i = ((uint)celr28) + 256 * ((uint)celg28) + 65536 * ((uint)celb28);
	block56[id.x * 56 + 28] = i;
	i = ((uint)celr29) + 256 * ((uint)celg29) + 65536 * ((uint)celb29);
	block56[id.x * 56 + 29] = i;
	i = ((uint)celr30) + 256 * ((uint)celg30) + 65536 * ((uint)celb30);
	block56[id.x * 56 + 30] = i;
	i = ((uint)celr31) + 256 * ((uint)celg31) + 65536 * ((uint)celb31);
	block56[id.x * 56 + 31] = i;
	i = ((uint)celr32) + 256 * ((uint)celg32) + 65536 * ((uint)celb32);
	block56[id.x * 56 + 32] = i;
	i = ((uint)celr33) + 256 * ((uint)celg33) + 65536 * ((uint)celb33);
	block56[id.x * 56 + 33] = i;
	i = ((uint)celr34) + 256 * ((uint)celg34) + 65536 * ((uint)celb34);
	block56[id.x * 56 + 34] = i;
	i = ((uint)celr35) + 256 * ((uint)celg35) + 65536 * ((uint)celb35);
	block56[id.x * 56 + 35] = i;
	i = ((uint)celr36) + 256 * ((uint)celg36) + 65536 * ((uint)celb36);
	block56[id.x * 56 + 36] = i;
	i = ((uint)celr37) + 256 * ((uint)celg37) + 65536 * ((uint)celb37);
	block56[id.x * 56 + 37] = i;
	i = ((uint)celr38) + 256 * ((uint)celg38) + 65536 * ((uint)celb38);
	block56[id.x * 56 + 38] = i;
	i = ((uint)celr39) + 256 * ((uint)celg39) + 65536 * ((uint)celb39);
	block56[id.x * 56 + 39] = i;
	i = ((uint)celr40) + 256 * ((uint)celg40) + 65536 * ((uint)celb40);
	block56[id.x * 56 + 40] = i;
	i = ((uint)celr41) + 256 * ((uint)celg41) + 65536 * ((uint)celb41);
	block56[id.x * 56 + 41] = i;
	i = ((uint)celr42) + 256 * ((uint)celg42) + 65536 * ((uint)celb42);
	block56[id.x * 56 + 42] = i;
	i = ((uint)celr43) + 256 * ((uint)celg43) + 65536 * ((uint)celb43);
	block56[id.x * 56 + 43] = i;
	i = ((uint)celr44) + 256 * ((uint)celg44) + 65536 * ((uint)celb44);
	block56[id.x * 56 + 44] = i;
	i = ((uint)celr45) + 256 * ((uint)celg45) + 65536 * ((uint)celb45);
	block56[id.x * 56 + 45] = i;
	i = ((uint)celr46) + 256 * ((uint)celg46) + 65536 * ((uint)celb46);
	block56[id.x * 56 + 46] = i;
	i = ((uint)celr47) + 256 * ((uint)celg47) + 65536 * ((uint)celb47);
	block56[id.x * 56 + 47] = i;
	i = ((uint)celr48) + 256 * ((uint)celg48) + 65536 * ((uint)celb48);
	block56[id.x * 56 + 48] = i;
	i = ((uint)celr49) + 256 * ((uint)celg49) + 65536 * ((uint)celb49);
	block56[id.x * 56 + 49] = i;
	i = ((uint)celr50) + 256 * ((uint)celg50) + 65536 * ((uint)celb50);
	block56[id.x * 56 + 50] = i;
	i = ((uint)celr51) + 256 * ((uint)celg51) + 65536 * ((uint)celb51);
	block56[id.x * 56 + 51] = i;
	i = ((uint)celr52) + 256 * ((uint)celg52) + 65536 * ((uint)celb52);
	block56[id.x * 56 + 52] = i;
	i = ((uint)celr53) + 256 * ((uint)celg53) + 65536 * ((uint)celb53);
	block56[id.x * 56 + 53] = i;
	i = ((uint)celr54) + 256 * ((uint)celg54) + 65536 * ((uint)celb54);
	block56[id.x * 56 + 54] = i;
	i = ((uint)celr55) + 256 * ((uint)celg55) + 65536 * ((uint)celb55);
	block56[id.x * 56 + 55] = i;;
	GroupMemoryBarrierWithGroupSync();
	f4.w = 1;
	i = block56[0 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 0 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[1 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 1 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[2 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 2 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[3 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 3 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[4 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 4 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[5 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 5 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[6 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 6 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[7 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 7 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[8 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 8 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[9 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 9 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[10 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 10 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[11 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 11 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[12 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 12 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[13 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 13 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[14 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 14 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[15 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 15 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[16 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 16 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[17 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 17 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[18 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 18 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[19 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 19 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[20 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 20 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[21 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 21 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[22 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 22 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[23 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 23 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[24 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 24 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[25 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 25 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[26 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 26 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[27 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 27 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[28 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 28 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[29 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 29 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[30 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 30 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[31 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 31 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[32 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 32 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[33 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 33 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[34 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 34 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[35 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 35 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[36 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 36 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[37 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 37 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[38 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 38 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[39 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 39 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[40 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 40 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[41 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 41 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[42 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 42 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[43 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 43 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[44 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 44 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[45 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 45 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[46 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 46 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[47 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 47 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[48 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 48 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[49 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 49 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[50 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 50 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[51 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 51 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[52 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 52 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[53 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 53 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[54 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 54 * TPB + id.x)] = f4;
	f4.w = 1;
	i = block56[55 * TPB + id.x];
	f4.x = (i % 256);
	f4.y = (i / 256 % 256);
	f4.z = (i / 65536 % 256);
	f4.xyz /= FTOI;
	Tex[float2(id.y, 55 * TPB + id.x)] = f4;;
}
